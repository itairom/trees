{"version":3,"sources":["cmps/TreePreview.jsx","cmps/TreePreviewList.jsx"],"names":["TreePreview","tree","querySurveyTrees","dispatch","useDispatch","useState","isRemove","setIsRemove","history","useHistory","loggedInUser","useSelector","state","appModule","useEffect","onClick","e","stopPropagation","preventDefault","toggleIsTreePreviewShowen","className","idx","type","typeValue","diameter","health","height","location","canopy","movingPossibility","recommendation","imgUrl","src","alt","push","_id","treeService","removeTree","username","ev","TreePreviewList","currentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","isTreePreviewShowen","TreeModule","console","log","map","key"],"mappings":"8MAMaA,EAAc,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAE1BC,EAAWC,cACjB,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,cACRC,EAAiBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAA5CH,aAIRI,qBAAU,eASV,OACI,6BACIC,QAAS,SAAAC,GACLA,EAAEC,kBACFD,EAAEE,iBACFf,EAASgB,gBAGbC,UAAU,qBAEV,6BAASA,UAAU,+BACf,yBAAKA,UAAU,gBACX,4EAAanB,QAAb,IAAaA,OAAb,EAAaA,EAAMoB,KACnB,uEAAapB,QAAb,IAAaA,OAAb,EAAaA,EAAMqB,KAAKC,WACxB,kFAActB,QAAd,IAAcA,OAAd,EAAcA,EAAMuB,UACpB,oGAAiBvB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAMwB,QACvB,kFAAcxB,QAAd,IAAcA,OAAd,EAAcA,EAAMyB,QACpB,wFAAezB,QAAf,IAAeA,OAAf,EAAeA,EAAM0B,UACrB,iHAAoB1B,QAApB,IAAoBA,OAApB,EAAoBA,EAAM2B,QAC1B,gHAAmB3B,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAM4B,mBACzB,qEAAW5B,QAAX,IAAWA,OAAX,EAAWA,EAAM6B,iBAEJ,KAAhB7B,EAAK8B,QAAiB,yBAAKC,IAAG,OAAE/B,QAAF,IAAEA,OAAF,EAAEA,EAAM8B,OAAQE,IAAI,SAClC,KAAhBhC,EAAK8B,QAAiB,yBAAKC,IAAI,2BAA2BC,IAAI,SAC/D,yBAAKb,UAAU,WACX,yBACIA,UAAU,iBACVL,QAAS,WAAQR,GAAY,KAC7B,qDAEJ,yBACIa,UAAU,iBACVL,QAAS,WACLP,EAAQ0B,KAAR,uBAA6BjC,EAAKkC,QAEtC,4DAIP7B,GAAY,yBAAKc,UAAU,iBACxB,kFACA,yBAAKA,UAAU,IACX,uBAAGA,UAAU,MAAML,QAAS,WA/C5CqB,IAAYC,WAAWpC,EAAKkC,IAAKzB,EAAa4B,UAC9CnC,EAASgB,eACTjB,MA6CgB,sBACA,uBAAGkB,UAAU,MAAML,QAAS,WAAQR,GAAY,KAAhD,8BAGR,yBACIa,UAAU,gBACVL,QAAS,SAACwB,GACNA,EAAGtB,kBACHd,EAASgB,iBAEhB,uCCpEAqB,EAAmB,SAAC,GAA8C,IAA5CtC,EAA2C,EAA3CA,iBAAkBuC,EAAyB,EAAzBA,mBAErD,EAAoDpC,oBAAS,GAA7D,mBAAOqC,EAAP,KAA2BC,EAA3B,KACQC,EAAwBjC,aAAY,SAAAC,GAAK,OAAIA,EAAMiC,cAAnDD,oBACFzC,EAAWC,cAMjB,OAJAU,qBAAU,WACVgC,QAAQC,IAAIN,EAAmB,wBAC7B,CAACA,IAGC,yBAAKrB,UAAU,eACX,6FACCqB,GAAsB,yBAAKrB,UAAU,8BACjCqB,EAAmBO,KAAI,SAAC/C,GACrB,OAAO,yBACHgD,IAAKhD,EAAKkC,IACVf,UAAU,aACVL,QAAS,WACL4B,EAAsB1C,GACtBE,EAASgB,iBAEb,2BAAIlB,EAAKoB,KACT,yBAAKW,IAAI,oBAAoBC,IAAI,cAGxCW,GAAuB,kBAAC,EAAD,CAAa3C,KAAMyC,EAAoBxC,iBAAkBA","file":"static/js/6.b7f871ea.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\nimport { treeService } from '../services/treeService'\n\nexport const TreePreview = ({ tree, querySurveyTrees }) => {\n\n    const dispatch = useDispatch()\n    const [isRemove, setIsRemove] = useState(false)\n    const history = useHistory()\n    const { loggedInUser } = useSelector(state => state.appModule)\n\n\n\n    useEffect(() => {\n    })\n\n    const onRemoveTree = () => {\n        treeService.removeTree(tree._id, loggedInUser.username)\n        dispatch(toggleIsTreePreviewShowen())\n        querySurveyTrees()\n    }\n\n    return (\n        <section\n            onClick={e => {\n                e.stopPropagation()\n                e.preventDefault()\n                dispatch(toggleIsTreePreviewShowen())\n\n            }}\n            className=\"preview-container\" >\n\n            <section className=\"main-container tree-preview\">\n                <div className=\"preview-info\">\n                    <p>מספר עץ: {tree?.idx}</p>\n                    <p> סוג עץ: {tree?.type.typeValue}</p>\n                    <p>קוטר גזע: {tree?.diameter}</p>\n                    <p>מצב בריאותי: {tree?.health}</p>\n                    <p>גובה העץ: {tree?.height}</p>\n                    <p>מיקום העץ: {tree?.location}</p>\n                    <p>ניקוד חופת העץ: {tree?.canopy}</p>\n                    <p>היתכנות העתקה: {tree?.movingPossibility}</p>\n                    <p>המלצה: {tree?.recommendation}</p>\n                </div>\n                {tree.imgUrl !== '' && <img src={tree?.imgUrl} alt=\"tree\" />}\n                {tree.imgUrl === '' && <img src='imgs/tree_silhouette.png' alt=\"tree\" />}\n                <div className=\"options\">\n                    <div\n                        className=\"remove-btn btn\"\n                        onClick={() => { setIsRemove(true) }}>\n                        <span>מחק</span>\n                    </div>\n                    <div\n                        className=\"update-btn btn\"\n                        onClick={() => {\n                            history.push(`/tree_update/${tree._id}`)\n                        }}>\n                        <span>עדכן</span>\n                    </div>\n\n                </div>\n                {isRemove && <div className=\"remove-modal \">\n                    <p>האם למחוק ?</p>\n                    <div className=\"\">\n                        <p className=\"btn\" onClick={() => { onRemoveTree() }}>מחק</p>\n                        <p className=\"btn\" onClick={() => { setIsRemove(false) }}>חזור</p>\n                    </div>\n                </div>}\n                <div\n                    className=\"close-preview\"\n                    onClick={(ev) => {\n                        ev.stopPropagation()\n                        dispatch(toggleIsTreePreviewShowen())\n                    }}\n                ><span>X</span></div>\n            </section>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { toggleIsTreePreviewShowen } from \"../actions/TreeActions\"\nimport { TreePreview } from \"./TreePreview\"\n\n\n\n\n export   const  TreePreviewList  = ({ querySurveyTrees, currentSurveyTrees }) => {\n\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n    const { isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n    console.log(currentSurveyTrees,'currentSurveyTrees');\n    },[currentSurveyTrees])\n\n    return (\n        <div className=\"other-trees\">\n            <h3>עצים נוספים</h3>\n            {currentSurveyTrees && <div className=\"current-trees pointer flex\">\n                {currentSurveyTrees.map((tree) => {\n                    return <div\n                        key={tree._id}\n                        className=\"tree-index\"\n                        onClick={() => {\n                            setCurrentPreviewTree(tree)\n                            dispatch(toggleIsTreePreviewShowen())\n                        }} >\n                        <p>{tree.idx}</p>\n                        <img src=\"imgs/treeLogo.png\" alt=\"index\" />\n                    </div>\n                })}\n                {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} querySurveyTrees={querySurveyTrees} />}\n            </div>}\n        </div>\n    )\n}\n"],"sourceRoot":""}