{"version":3,"sources":["serviceWorker.js","reducers/TreeReducer.js","assets/svg/menu_black_24dp.svg","services/storageService.js","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","cmps/TreesTable.jsx","services/httpService.js","services/treeService.js","cmps/TreesTypesTable.jsx","pages/TreesSurvey.jsx","services/customHooks.js","services/formService.js","services/cloudinaryService.js","cmps/CloudinaryUpload.jsx","cmps/FormAutocomplete.jsx","cmps/form/input.jsx","cmps/form/FormModal.jsx","cmps/TreesForm.jsx","actions/TreeActions.js","pages/ChooseSurvey.jsx","pages/CreateSurvey.jsx","cmps/TreePreview.jsx","pages/SurveyEditor.jsx","pages/TreeUpdate.jsx","pages/Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","filterBy","isDark","currentSurvey","isTreePreviewShowen","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","_ref3","_ref","svgRef","title","props","height","viewBox","width","ref","ForwardRef","forwardRef","storageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","AppHeader","useState","isMobile","setIsMobile","localSurveyId","setLocalSurveyId","useEffect","storageId","surveyTitle","changeMobile","prev","className","to","onClick","About","TreesImages","trees","map","tree","_id","idx","imgUrl","src","alt","TreesTable","history","useHistory","console","log","calculateValue","canopy","health","type","typeValue","ValueColor","sum","id","label","quantity","diameter","rootsDiameter","isPalmTree","Math","pow","toFixed","calculateTreeValue","calculatePalmTreeValue","movingPossibility","description","recommendation","movingReason","push","table","filename","sheet","buttonText","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","then","tableId","treeId","removedTree","surveyId","treeService","save","queryTrees","querySurveyIdList","querySurveyTrees","removeTree","getTreeById","TreesTypesTable","treeTypeObj","setTreeTypeObj","treeTypeKeysArr","setTreeTypeKeysArr","totalvaluesArr","setTotalvaluesArr","mapTreeValue","localTotalvaluesArr","lowPriority","mediumPriority","highPriority","veryHighPriority","typeObj","NTL","value","treeKeys","objToArr","values","reduce","b","TreesSurvey","useSelector","state","TreeModule","setTrees","setTableIdList","useForm","initialFValues","validateOnChange","validate","setValues","errors","setErrors","handleInputChange","ev","name","checked","resetForm","useHandleModal","cb","fields","setFields","field","prevFields","formService","treeTypes","palmstreeTypes","recomandationOptions","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","error","CloudinaryUpload","file","setFile","isUpload","setIsUpload","sendFile","img","imgUrlRes","onGetImgUrl","fileHandler","htmlFor","required","multiple","onChange","FormAutocomplete","onSetTreeType","options","display","setDisplay","search","setSearch","treeObj","setTreeObj","onSetSearch","useCallback","func","timer","args","context","clearTimeout","setTimeout","debounce","placeholder","filter","option","includes","v","Input","InputProps","multiline","rows","TextField","variant","color","helperText","FormModal","HandleiIsModalShown","modal","imgSrc","isShowen","TreesForm","setSurveyId","treeTypeOptions","setTreeTypeOptions","treeType","setType","setImgUrl","fieldValues","temp","isLessThenFiveInput","isEmptyInput","mobile","every","x","isAddingTree","isModalShown","HandleIsModalShown","submitForm","preventDefault","treeCopy","inputsRef","document","querySelectorAll","textareaRef","forEach","input","textarea","onResetForm","scrollTo","dir","action","onSubmit","setIsPalmTree","inputProps","max","min","FormControl","Select","MenuItem","Button","_setCurrentSurvey","survey","setCurrentSurvey","dispatch","ChooseSurvey","useDispatch","surveyIdList","setSurveyIdList","currentSurveyId","setCurrentSurveyId","handleOnClickNext","handleOnClickBack","resp","filterdList","InputLabel","CreateSurvey","handleOnClick","useFormCreateSurvey","surveyDate","surveySummary","handleChange","addNewSurvey","TreePreview","isRemove","setIsRemove","SurveyEditor","setIsAddingTree","currentSurveyTrees","setCurrentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","localCurrentSurvey","setLocalCurrentSurvey","storageTreeId","TreeUpdate","setTree","useParams","treeById","setInputRef","setTextAreaRef","mergeTree","style","marginBottom","Home","App","path","component","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b6998fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n    filterBy: null,\r\n    isDark: false,\r\n    currentSurvey:{},\r\n    isTreePreviewShowen:false\r\n}\r\n\r\nexport default function TreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_SURVEY':\r\n            return {\r\n                ...state,\r\n                currentSurvey: action.survey\r\n            }\r\n\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'TOGGLE_IS_PREVIEW_TREE':\r\n            return {\r\n                ...state,\r\n                isTreePreviewShowen: !state.isTreePreviewShowen\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n});\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\nimport { storageService } from '../services/storageService'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    const [localSurveyId, setLocalSurveyId] = useState('')\r\n\r\n    useEffect(() => {\r\n        let storageId = storageService.loadFromStorage('surveyId')\r\n        if(storageId){\r\n            setLocalSurveyId(storageId.surveyTitle)\r\n        }\r\n    }, [])\r\n\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav className=\"main-nav \">\r\n                {!isMobile && <div className=\"left-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                    <Link to='/survey_editor'><span>הוספת עץ</span></Link>\r\n                    <a className=\"current-survey\"><span>סקר </span>{localSurveyId}</a>\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <p>סקר <span>{localSurveyId}</span></p>\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                    <Link to='/survey_editor'><span>הוספת עץ</span></Link>\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\nexport const TreesImages = (...props) => {\n\n    const { trees } = props[0]\n    return (\n        <section className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    <div key={tree._id} className=\"image-card\">\n                        <p >{tree.idx}</p>\n                        {tree.imgUrl !== '' && <img key={tree._id} src={tree.imgUrl} alt=\"tree\" />}\n                        {tree.imgUrl === '' && <img key={tree._id} src=\"imgs/tree_silhouette.png\" alt=\"tree\" />}\n                    </div>\n                )\n            })}\n        </section>\n\n    )\n}","import React, { useEffect } from \"react\"\nimport ReactToExcel from 'react-html-table-to-excel'\nimport { useHistory } from \"react-router\"\n\nexport const TreesTable = ({trees}) => {\n\n    const history =useHistory()\n    useEffect(() => {\n        console.log(trees);\n    }, [trees])\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    // const calculateMonetaryValue = (tree) => {\n    //     let sum = (calculateValue(tree) / 5) * 20\n    //     return sum\n    // }\n\n    const calculateTreeValue = (tree) => {\n        const sum = (((tree.location * +tree.type.typeValue * tree.health) / 5) * (Math.pow((tree.diameter / 2), 2) * 3.14) / 5) * 20\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const calculatePalmTreeValue = (tree) => {\n        const sum = (tree.height * ((tree.location / 5 * +tree.type.typeValue / 5 * +tree.health / 5))) * 1500\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'yellow'\n        else if (sum > 6 && 14 > sum) return 'grey'\n        else if (sum > 13 && 17 > sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table \">\n\n            <table id=\"main-table\">\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type.label}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.type.typeValue}</td>\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                {!tree.isPalmTree && <td>{calculateTreeValue(tree)}</td>}\n                                {tree.isPalmTree && <td>{calculatePalmTreeValue(tree)}</td>}\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>{tree.recommendation}</td>\n                                <td>{tree.movingReason}</td>\n                                <div\n                                    onClick={() => {history.push(`tree_update/${tree._id}`) }}\n                                    className=\"edit-btn btn\">עריכה</div >\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <ReactToExcel\n                className=\"download-table \"\n                table=\"main-table\"\n                filename=\"טבלת סקר עצים\"\n                sheet=\"טבלת סקר עצים\"\n                buttonText=\"הורדה\"\n            />\n        </section>\n    )\n\n\n}\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","import { httpService } from \"./httpService\"\n\n\nasync function save(tree) {\n    await httpService.put(`tree/save`, tree)\n        .then((res) => {\n            console.log(res);\n        })\n\n}\nasync function queryTrees(tableId) {\n    let trees = await httpService.get(`tree/`,tableId)\n    return trees\n}\nasync function getTreeById(treeId) {\n    let tree = await httpService.get(`tree/${treeId}`)\n    return tree\n}\nasync function removeTree(treeId) {\n    console.log(\"🚀 ~ file: treeService.js ~ line 16 ~ removeTree ~ treeId\", treeId)\n    let removedTree = await httpService.delete(`tree/${treeId}`)\n    return removedTree\n}\n\nasync function querySurveyIdList() {\n    let trees = await httpService.get(`tree/survey_id_list`)\n    return trees\n}\nasync function querySurveyTrees(surveyId) {\n    let trees = await httpService.get(`tree/survey_trees`,surveyId)\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    queryTrees,\n    querySurveyIdList,\n    querySurveyTrees,\n    removeTree,\n    getTreeById\n}","import { keys } from \"@material-ui/core/styles/createBreakpoints\"\nimport React, { useEffect, useState } from \"react\"\nimport { utilService } from \"../services/utilService\"\n\n\n\n\nexport const TreesTypesTable = ({ trees }) => {\n\n\n    const [treeTypeObj, setTreeTypeObj] = useState([])\n    const [treeTypeKeysArr, setTreeTypeKeysArr] = useState([])\n    const [totalvaluesArr, setTotalvaluesArr] = useState({})\n\n    useEffect(() => {\n        mapTreeValue(trees)\n    }, [trees])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    // const calculateMonetaryValue = (tree) => {\n    //     let sum = (calculateValue(tree) / 5) * 20\n    //     return sum\n    // }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'lowPriority'\n        else if (sum > 6 && 14 > sum) return 'mediumPriority'\n        else if (sum > 13 && 17 > sum) return 'highPriority'\n        else return 'veryHighPriority'\n    }\n\n\n    const getTotalvaluesArr = () => {\n        return (\n            {\n                lowPriority: 0,\n                mediumPriority: 0,\n                highPriority: 0,\n                veryHighPriority: 0\n            }\n        )\n    }\n\n\n    const mapTreeValue = (trees) => { // improve the code!\n        let localTotalvaluesArr = getTotalvaluesArr()\n        let typeObj = {}\n        for (let i = 0; i < trees.length; i++) {\n            let NTL = trees[i].type.label\n            let value = ValueColor(trees[i])\n            if (!typeObj.hasOwnProperty(NTL)) {\n                let NTL = trees[i].type.label\n                typeObj[NTL] = {\n                    'highPriority': 0,\n                    'lowPriority': 0,\n                    'mediumPriority': 0,\n                    'veryHighPriority': 0,\n                    'total': 0\n                }\n            }\n            ++localTotalvaluesArr[value]\n            ++typeObj[NTL][value]\n            ++typeObj[NTL]['total']\n        }\n\n        // console.log(\"🚀 ~ file: TreesTypesTable.jsx ~ line 54 ~ mapTreeValue ~ localTotalvaluesArr\", localTotalvaluesArr)\n        const treeKeys = Object.keys(typeObj)\n        const objToArr = Object.values(typeObj)\n        setTreeTypeObj(objToArr)\n        setTreeTypeKeysArr(treeKeys)\n        setTotalvaluesArr(localTotalvaluesArr)\n    }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th className=\"red\">ערכיות גבוהה מאוד **</th>\n                    <th className=\"green\">ערכיות גבוהה **</th>\n                    <th className=\"grey\">ערכיות בינונית **</th>\n                    <th className=\"yellow\">ערכיות נמוכה **</th>\n                    <th className=\"\">סה״כ</th>\n                </tr>\n                <tbody>\n                    {treeTypeKeysArr && treeTypeObj?.map((tree, idx) => {\n                        return (\n                            <tr key={tree._id}>\n                                {<td>{treeTypeKeysArr[idx]}</td>}\n                                {<td>{tree['veryHighPriority']}</td>}\n                                {<td>{tree['highPriority']}</td>}\n                                {<td>{tree['mediumPriority']}</td>}\n                                {<td>{tree['lowPriority']}</td>}\n                                {<td>{tree['total']}</td>}\n                            </tr>\n                        )\n                    })}\n                    <tr key='total-values'>\n                        {<td>סה״ב</td>}\n                        {<td>{totalvaluesArr['veryHighPriority']}</td>}\n                        {<td>{totalvaluesArr['highPriority']}</td>}\n                        {<td>{totalvaluesArr['mediumPriority']}</td>}\n                        {<td>{totalvaluesArr['lowPriority']}</td>}\n                        {<td>{Object.values(totalvaluesArr).reduce((a, b) => a + b, 0)}</td>}\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\n","import React, { useEffect, useState } from 'react'\nimport html2pdf from 'html2pdf.js'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\nimport { TreesTypesTable } from '../cmps/TreesTypesTable';\n\nexport const TreesSurvey = () => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    let [trees, setTrees] = useState([])\n    // let [currentTableId, setCurrentTableId] = useState('')\n    let [tableIdList, setTableIdList] = useState([''])\n    const [localSurveyId, setLocalSurveyId] = useState('')\n\n    useEffect(() => {\n\n        async function queryTrees() {\n            setTableIdList(await treeService.querySurveyIdList())\n            setTrees(await treeService.queryTrees(currentSurvey?.surveyTitle))\n            if (Object.keys(currentSurvey).length === 0) {\n                let storageId = await storageService.loadFromStorage('surveyId')\n                if (storageId) {\n                    setTrees(await treeService.queryTrees(storageId?.surveyTitle))\n                    setLocalSurveyId(storageId)\n                }\n            }\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n        async function queryTrees() {\n            if (Object.keys(currentSurvey).length === 0) {\n                setTrees(await treeService.queryTrees(localSurveyId?.surveyTitle))\n            }\n        }\n        queryTrees()\n    }, [localSurveyId])\n\n\n    // const downloadAsPdf = () => {\n    //     let el = document.querySelector('#main-survey')\n    //     html2pdf(el);\n    // }\n\n    return (\n        <section id=\"main-survey\" className=\"main-container trees-survey flex\">\n            <h1>טבלה סקר <span>{currentSurvey?.surveyTitle || localSurveyId?.surveyTitle}</span></h1>\n\n            <TreesTable trees={trees} />\n            <TreesImages trees={trees} />\n            <TreesTypesTable trees={trees} />\n        </section>\n    )\n}","import { useEffect, useState } from 'react'\r\n\r\nexport function useForm(initialFValues, validateOnChange = false, validate) {\r\n  const [values, setValues] = useState(initialFValues);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = ev => {\r\n    const { name } = ev.target\r\n    let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n    value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    })\r\n    if (validateOnChange)\r\n      validate({ [name]: value })\r\n  }\r\n\r\n  const resetForm = () => {\r\n    setValues(initialFValues);\r\n    setErrors({})\r\n  }\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n  }\r\n}\r\n\r\nexport const useFormCreateSurvey = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useError = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: '' }))\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      if (value > 5 || value < 0) {\r\n        setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n      }\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useHandleModal = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (field, value) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n","import treeTypes from '../data/treeTypes.json';\nimport palmstreeTypes from '../data/palmstreeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n    ,\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notDefined',\n        label: 'לא מוגדר',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    palmstreeTypes,\n    recomandationOptions: recommendationOptions\n}\n","function uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n    const formData = new FormData();\n    formData.append('file', files[0])\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","import React, { useState } from \"react\"\nimport { cloudinaryService } from \"../services/cloudinaryService\"\n\nexport const CloudinaryUpload = (...props) => {\n\n    // const [name, setName] = useState('')\n    const [file, setFile] = useState(null)\n    const [isUpload, setIsUpload] = useState(false)\n\n    const sendFile = async img => {\n        setIsUpload(true)\n        let imgUrlRes = await cloudinaryService.uploadImg(img)\n        setIsUpload(false)\n        setFile(imgUrlRes.url)\n        props[0].onGetImgUrl(imgUrlRes.url)\n    }\n\n    const fileHandler = ev => {\n        // setFile(ev.target.files)\n        sendFile(ev.target.files)\n    }\n\n    // const nameHandler = ev => {\n    //     const { value } = ev.target\n    //     setName(value)\n    // }\n\n    return (\n        <section className=\"upload-container\">\n            <label htmlFor=\"file\">בחר תמונה</label>\n            <input\n                required\n                multiple\n                name=\"file1\"\n                type=\"file\"\n                id=\"file\"\n                className=\"upload-btn\"\n                onChange={(ev) => { fileHandler(ev) }} />\n            {isUpload &&\n                <img src=\"/imgs/circle_loader.gif\" alt=\"loader\" />\n            }\n            {file &&\n\n                <div className=\"image-preview\">\n                    <p>Preview</p>\n                    <img src={file} alt=\"image\" />\n                </div>\n            }\n        </section>\n    )\n}\n\n\n\n","import React, { useCallback, useEffect, useState } from 'react'\n\n\nexport const FormAutocomplete = ({ onSetTreeType, options }) => {\n\n    const [display, setDisplay] = useState(false)\n    // const [options, setOptions] = useState([])\n    const [search, setSearch] = useState('')\n    const [treeObj, setTreeObj] = useState('')\n\n\n    useEffect(() => {\n        // setOptions(formService.treeTypes)\n    }, [options])\n\n\n    const debounce = (func) => {\n        let timer\n        return function (...args) {\n            const context = this\n            if (timer) clearTimeout(timer)\n            timer = setTimeout(() => {\n                timer = null\n                func.apply(context, args)\n            }, 1000)\n        }\n    }\n\n\n    useEffect(() => {\n        onSetTreeType(treeObj)\n        setDisplay(false)\n    }, [treeObj])\n\n\n\n    const onSetSearch = useCallback(debounce(setSearch))\n\n    const setTree = (tree) => {\n        setTreeObj(tree)\n        setSearch(tree.label)\n    }\n\n    return (\n        <section className=\"autocomplete-form\">\n            <input onChange={(ev) => { onSetSearch(ev.target.value) }} value={search} type=\"text\" placeholder=\" מין העץ\" onClick={() => { setDisplay(!display) }} />\n            {display &&\n                <div className=\"autocomplete-container\">\n                    {options.filter((option) => option?.label?.includes(search)).map((v, i) => {\n                        return (\n                            <div onClick={() => { setTree(v) }} className=\"tree-option\" key={v.label}>\n                                <span>{v.label}</span>\n                            </div>\n                        )\n                    })\n                    }\n                </div>\n            }\n        </section>\n    )\n}","import React from 'react'\nimport { TextField } from '@material-ui/core';\n\nexport default function Input(props) {\n\n    const { name, label, value, error = null, onChange, InputProps, id, multiline, rows, placeholder } = props;\n    return (\n        <TextField\n            variant=\"standard\"\n            name={name}\n            // value={value}\n            onChange={onChange}\n            InputProps={InputProps}\n            id={id}\n            color=\"primary\"\n            type=\"number\"\n            {...(error && { error: true, helperText: error })}\n            {...multiline &&\n            {\n                rows: rows,\n                multiline\n            }}\n            // {...placeholder && { placeholder: placeholder }}\n            placeholder={placeholder}\n        />\n    )\n}","import React from 'react'\n\nexport default function FormModal({ HandleiIsModalShown, modal, imgSrc }) {\n    return (\n        <div\n            onClick={() => HandleiIsModalShown(modal.type, !modal.isShowen)}\n            className=\"form-modal health-modal\" >\n            <div className=\"modal-container \">\n                <img src={imgSrc} alt=\"מקרא\" />\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { CloudinaryUpload } from './CloudinaryUpload';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from './FormAutocomplete';\nimport Input from './form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from './form/FormModal';\n\nexport const TreesForm = ({ querySurveyTrees }) => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n\n    const initialFValues = {\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: '',\n        isPalmTree: false\n    }\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n            temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n            temp.recommendation = isEmptyInput(fieldValues.recommendation)\n\n        setErrors({\n            ...temp\n        })\n\n        if (fieldValues === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate);\n\n    const [isModalShown, HandleIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: '',\n        isAddingTree: ''\n    })\n\n    useEffect(() => {\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        if (!surveyId||Object.keys(surveyId).length === 0) {\n            let storageId = storageService.loadFromStorage('surveyId')\n            if (storageId) {\n                setSurveyId(storageId)\n            }\n        }\n    }, [surveyId])\n\n    const onResetForm = () => {\n        resetForm()\n        const inputsRef = document.querySelectorAll('input')\n        const textareaRef = document.querySelectorAll('textarea')\n        inputsRef.forEach(input => {\n            input.value = ''\n        })\n        textareaRef.forEach(textarea => {\n            textarea.value = ''\n        })\n    }\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        // if (!imgUrl) alert('יש לבחור תמונה')\n        const treeCopy = { ...values }\n        treeCopy.type = treeType\n        treeCopy.surveyId = surveyId\n        treeCopy.imgUrl = imgUrl\n        if (validate()) {\n            console.log('SUBMIT');\n            treeService.save(treeCopy)\n            HandleIsModalShown(!isModalShown.health)\n            querySurveyTrees()\n            onResetForm()\n        }\n        window.scrollTo(0, 0)\n    }\n    return (\n        <div className=\"form-container\">\n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                <div className=\"trees-form flex column\">\n                    <div className=\"type-form \">\n                        <label htmlFor=\"isPalmTree rtl\">\n                            <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                            עץ דקל\n                        </label>\n                        <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>מספר עץ</p>\n                        <Input\n                            error={errors.idx}\n                            name=\"idx\"\n                            value={values.idx}\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>כמות עצים</p>\n                        <Input\n                            error={errors.quantity}\n                            value={values.quantity}\n                            name=\"quantity\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>קוטר הגזע</p>\n                        <Input\n                            error={errors.diameter}\n                            value={values.diameter}\n                            placeholder=\"קוטר בס״מ של הגזע\"\n                            name=\"diameter\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                    </div>\n\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                        <Input\n                            error={errors.health}\n                            value={values.health}\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            placeholder=\"0-5\"\n                            id=\"health\"\n                            name=\"health\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                        {isModalShown.health &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'health',\n                                    isShowen: isModalShown.health\n                                }}\n                                imgSrc=\"/imgs/modal/healthModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>גובה העץ</p>\n                        <Input\n                            error={errors.height}\n                            name=\"height\"\n                            variant=\"standard\"\n                            placeholder=\"גובה העץ במטרים\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                        <Input\n                            error={errors.location}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"location\"\n                            name=\"location\"\n                            onChange={handleInputChange} />\n\n                        {isModalShown.location &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'location',\n                                    isShowen: isModalShown.location\n                                }}\n                                imgSrc=\"/imgs/modal/locationModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                        <Input\n                            error={errors.canopy}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"canopy\"\n                            name=\"canopy\"\n                            onChange={handleInputChange} />\n                        {isModalShown.canopy &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'canopy',\n                                    isShowen: isModalShown.canopy\n                                }}\n                                imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>אזור שורשים מוגן</p>\n                        <Input\n                            error={errors.rootsDiameter}\n                            placeholder=\"אזור שורשים מוגן במטרים\"\n                            id=\"rootsDiameter\"\n                            name=\"rootsDiameter\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>היתכנות העתקה</p>\n                        <FormControl>\n                            <Select\n                                // error={errors.movingPossibility}\n                                type=\"text\"\n                                id=\"movingPossibility\"\n                                name=\"movingPossibility\"\n                                value={values.movingPossibility}\n                                onChange={handleInputChange}>\n                                {formService.movingPossibility.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>המלצה</p>\n                        <FormControl >\n                            <Select\n                                // error={errors.recommendation}\n                                type=\"text\"\n                                id=\"recommendation\"\n                                name=\"recommendation\"\n                                value={values.recommendation}\n                                onChange={handleInputChange}>\n                                {formService.recomandationOptions.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>סיבת כריתה או\n                            העתקת\n                            העץ</p>\n                        <Input\n                            error={errors.movingReason}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"movingReason\"\n                            name=\"movingReason\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>הערות</p>\n                        <Input\n                            error={errors.description}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"description\"\n                            name=\"description\"\n                            onChange={handleInputChange} />\n                    </div>\n                </div>\n                <CloudinaryUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">הוסף עץ </Button>\n                {isModalShown.isAddingTree &&\n                    <div\n                        onClick={() => { HandleIsModalShown(!isModalShown.health) }}\n                        className=\"adding-modal\">\n                        <div className=\"background\"></div>\n                        <h1>העץ נוסף בהצלחה!</h1>\n                    </div>}\n            </form>\n        </div>\n    )\n}\n","\r\n// Dispatchers\r\nconst _setFilter = (filterBy) => ({ type: 'SET_FILTER', filterBy });\r\nconst _toggleDark = () => ({ type: 'TOGGLE_DARK' });\r\nconst _toggleIsTreePreviewShowen = () => ({ type: 'TOGGLE_IS_PREVIEW_TREE' });\r\nconst _setCurrentSurvey = (survey) => ({ type: 'SET_CURRENT_SURVEY', survey });\r\n\r\n// THUNK\r\n\r\nexport function setFilter(filterBy) {\r\n    return async (dispatch) => dispatch(_setFilter(filterBy))\r\n}\r\nexport function setCurrentSurvey(survey) {\r\n    return async (dispatch) => dispatch(_setCurrentSurvey(survey))\r\n}\r\nexport function toggleDark() {\r\n    return (dispatch) => dispatch(_toggleDark())\r\n}\r\nexport function toggleIsTreePreviewShowen() {\r\n    return (dispatch) => dispatch(_toggleIsTreePreviewShowen())\r\n}\r\n\r\n// export function saveCar(car) {\r\n//     return async (dispatch, getState) => {\r\n//         const type = car._id ? 'UPDATE_CAR' : 'ADD_CAR';\r\n//         const savedCar = await carService.save(car)\r\n//         dispatch({ type, car: savedCar })\r\n//     }\r\n// }\r\n","import { Link, useHistory } from 'react-router-dom'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSurvey } from '../actions/TreeActions';\nimport { storageService } from '../services/storageService';\n\n\n\nexport const ChooseSurvey = () => {\n\n    let dispatch = useDispatch()\n    const history = useHistory();\n    let [surveyIdList, setSurveyIdList] = useState([''])\n    let [currentSurveyId, setCurrentSurveyId] = useState('kfar saba')\n    const handleOnClickNext = useCallback(() => history.push('/survey_editor'), [history]);\n    const handleOnClickBack = useCallback(() => history.push('/'), [history]);\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n\n    useEffect(() => {\n        (async () => {\n            const resp = await treeService.querySurveyIdList()\n            setSurveyIdList(resp)\n        })()\n    }, [])\n\n    useEffect(() => {\n        let filterdList = surveyIdList.filter(tree => { return tree.surveyTitle === currentSurveyId })\n        if(filterdList[0]){\n            storageService.saveToStorage('surveyId', filterdList[0])\n            dispatch(setCurrentSurvey(filterdList[0]))\n        }\n      \n    }, [currentSurveyId])\n\n\n\n\n    return (\n        <section className=\"choose-section flex\">\n            <h1>בחר סקר</h1>\n            <FormControl>\n                <InputLabel required id=\"movingPossibility\">בחר</InputLabel>\n                <Select\n                    required\n                    type=\"text\"\n                    id=\"currentTableId\"\n                    name=\"currentTableId\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                    value={currentSurveyId}\n                    // defaultValue=\"בחר סקר\"\n                    label=\"לחץ כאן\"\n                    placeholder=\"לחץ כאן\"\n                    onChange={(ev) => { setCurrentSurveyId(ev.target.value) }} >\n                    {\n                        surveyIdList?.map((id) => (\n                            <MenuItem\n\n                                key={id.surveyTitle}\n                                value={id.surveyTitle}>\n                                {id.surveyTitle}\n                            </MenuItem>\n                        ))\n                    }\n                </Select>\n            </FormControl>\n            <div className=\"next-btn button\"\n                onClick={() => { handleOnClickNext() }} >\n                <p>המשך</p>\n            </div>\n            <div className=\"back-btn button\"\n                onClick={() => { handleOnClickBack() }} >\n                <p>חזור</p>\n            </div>\n        </section>\n    )\n}","import React, { useCallback } from 'react'\nimport { useFormCreateSurvey } from '../services/customHooks'\nimport { Link,useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentSurvey } from '../actions/TreeActions'\nimport { storageService } from '../services/storageService';\n\n\nexport const CreateSurvey = () => {\n\n    \n    const history = useHistory();\n    const handleOnClick = useCallback(() => history.push('/survey_editor'), [history]);\n    const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    const [survey, handleChange] = useFormCreateSurvey({\n        surveyTitle: '',\n        surveyDate: '',\n        surveySummary: ''\n    })\n\n    const addNewSurvey = async () => {\n        await dispatch(setCurrentSurvey(survey))\n        storageService.saveToStorage('surveyId', survey)\n\n        handleOnClick()\n    }\n\n    return (\n        <section className=\"new-survey rtl\">\n            <form action=\"\">\n                <label htmlFor=\"surveyTitle\" onSubmit={(ev) => { ev.preventDefault() }}>\n                    כותרת סקר:\n                    <input\n                        id=\"surveyTitle\"\n                        name=\"surveyTitle\"\n                        type=\"text\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyTitle} />\n                </label>\n                <label htmlFor=\"surveyTitle\">\n                    תאריך סקר:\n                    <input\n                        id=\"surveyDate\"\n                        name=\"surveyDate\"\n                        type=\"date\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyDate} />\n                </label>\n                <div className=\"add-btn button\" onClick={() => { addNewSurvey() }}>הוסף סקר</div>\n\n                <Link to=\"/choose_survey\" >\n                    <div className=\"existing-survey\">חזרה</div>\n                </Link>\n\n            </form>\n        </section>\n\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\nimport { treeService } from '../services/treeService'\n\nexport const TreePreview = ({ tree, querySurveyTrees }) => {\n\n    const dispatch = useDispatch()\n    const [isRemove, setIsRemove] = useState(false)\n    const history = useHistory()\n\n    useEffect(() => {\n    })\n\n    const onRemoveTree = () => {\n        treeService.removeTree(tree._id)\n        querySurveyTrees()\n    }\n\n    return (\n        <section className=\"main-container tree-preview\">\n            <div className=\"preview-info\">\n                <p>מספר עץ: {tree?.idx}</p>\n                <p> סוג עץ: {tree?.type.typeValue}</p>\n                <p>קוטר גזע: {tree?.diameter}</p>\n                <p>מצב בריאותי: {tree?.health}</p>\n                <p>גובה העץ: {tree?.height}</p>\n                <p>מיקום העץ: {tree?.location}</p>\n                <p>ניקוד חופת העץ: {tree?.canopy}</p>\n                <p>היתכנות העתקה: {tree?.movingPossibility}</p>\n                <p>המלצה: {tree?.recommendation}</p>\n            </div>\n            {tree.imgUrl !== '' && <img src={tree?.imgUrl} alt=\"tree image\" />}\n            {tree.imgUrl === '' && <img src='imgs/tree_silhouette.png' alt=\"tree image\" />}\n            <div className=\"options\">\n                <div\n                    className=\"remove-btn btn\"\n                    onClick={() => { setIsRemove(true) }}>\n                    <span>מחק</span>\n                </div>\n                <div\n                    className=\"update-btn btn\"\n                    onClick={() => {\n                        history.push(`/tree_update/${tree._id}`)\n                    }}>\n                    <span>עדכן</span>\n                </div>\n\n            </div>\n            {isRemove && <div className=\"remove-modal\">\n                <p>האם למחוק ?</p>\n                <p onClick={() => { onRemoveTree() }}>מחק</p>\n                <p onClick={() => { setIsRemove(false) }}>חזור</p>\n            </div>}\n            <div\n                className=\"close-preview\"\n                onClick={(ev) => {\n                    ev.preventDefault()\n                    dispatch(toggleIsTreePreviewShowen())\n                }}\n            ><span>X</span></div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TreesForm } from '../cmps/TreesForm'\nimport { treeService } from '../services/treeService'\nimport { storageService } from '../services/storageService';\nimport { TreePreview } from '../cmps/TreePreview';\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions';\n\nexport const SurveyEditor = () => {\n\n    const dispatch = useDispatch()\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const [isAddingTree, setIsAddingTree] = useState(true)\n    // const [isAddingTree, setIsAddingTree] = useState(false)\n    const [currentSurveyTrees, setCurrentSurveyTrees] = useState([])\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n    const [localCurrentSurvey, setLocalCurrentSurvey] = useState('')\n\n\n    useEffect(() => {\n        querySurveyTrees()\n    }, [])\n\n    // useEffect(() => {\n    //     console.log('currentSurveyTrees', currentSurveyTrees);\n\n    // }, [currentSurveyTrees])\n\n    const querySurveyTrees = async () => {\n        console.log('query()');\n        let trees = await treeService.querySurveyTrees(currentSurvey.surveyTitle)\n        setCurrentSurveyTrees(trees)\n        if (Object.keys(currentSurvey).length === 0) {\n            const storageTreeId = storageService.loadFromStorage('surveyId')\n            if (storageTreeId) {\n                let trees = await treeService.querySurveyTrees(storageTreeId.surveyTitle)\n                setLocalCurrentSurvey(storageTreeId)\n                setCurrentSurveyTrees(trees)\n            }\n        }\n    }\n\n    return (\n        <section className=\"main-container rtl\">\n            {/* <h1><span>{currentSurvey.surveyTitle}</span> טופס סקר עצים </h1> */}\n            <h1>טופס סקר עצים <span>{localCurrentSurvey.surveyTitle}</span>  </h1>\n            <div className=\"add-tree\">\n                {<p onClick={(ev) => {\n                    ev.preventDefault()\n                    setIsAddingTree(true)\n                }}>הוסף עץ</p> && !isAddingTree}\n                {isAddingTree && <TreesForm querySurveyTrees={querySurveyTrees} />}\n            </div>\n            <div className=\"other-trees\">\n                <h3>עצים נוספים</h3>\n                {currentSurveyTrees && <div className=\"current-trees flex\">\n                    {currentSurveyTrees.map((tree) => {\n                        return <div\n                            key={tree._id}\n                            className=\"tree-index\"\n                            onClick={() => {\n                                setCurrentPreviewTree(tree)\n                                dispatch(toggleIsTreePreviewShowen())\n                            }} >\n                            <p>{tree.idx}</p>\n                            <img src=\"imgs/treeLogo.png\" alt=\"index\" />\n                        </div>\n                    })}\n                    {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} querySurveyTrees={querySurveyTrees} />}\n                </div>}\n            </div>\n        </section>\n    )\n}","import React, { useEffect, useState } from \"react\"\nimport { useParams, useHistory } from \"react-router\"\nimport { treeService } from \"../services/treeService\"\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\n// import { CloudinaryUpload } from './CloudinaryUpload';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from '../cmps/FormAutocomplete';\nimport Input from '../cmps/form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from '../cmps/form/FormModal';\n\nexport const TreeUpdate = () => {\n\n    const [tree, setTree] = useState({})\n    const params = useParams()\n    let history = useHistory()\n\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n            temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n            temp.recommendation = isEmptyInput(fieldValues.recommendation)\n\n        setErrors({\n            ...temp\n        })\n\n        if (tree === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        errors,\n        setErrors,\n        handleInputChange,\n    } = useForm(tree, true, validate);\n\n    const [isModalShown, HandleIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: '',\n        isAddingTree: ''\n    })\n\n    useEffect(() => {\n        (async () => {\n            const treeById = await treeService.getTreeById(params.treeId)\n            setTree(treeById)\n        })()\n    }, [])\n\n    useEffect(() => {\n        setInputRef()\n        setTextAreaRef()\n    }, [tree])\n    const setInputRef = () => {\n\n        const inputsRef = document.querySelectorAll('input')\n        inputsRef.forEach(input => {\n            const name = input.name\n            input.value = tree[name]\n        })\n    }\n    const setTextAreaRef = () => {\n        const textareasRef = document.querySelectorAll('textarea')\n        textareasRef.forEach(textarea => {\n            const name = textarea.name\n            textarea.value = tree[name]\n        })\n    }\n\n    useEffect(() => {\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        if (Object.keys(surveyId).length === 0) {\n            let storageId = storageService.loadFromStorage('surveyId')\n            if (storageId) {\n                setSurveyId(storageId)\n            }\n        }\n    }, [surveyId])\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        const mergeTree = { ...tree, type:treeType, ...values }\n        console.log(\"🚀 ~ file: TreeUpdate.jsx ~ line 170 ~ submitForm ~ mergeTree\", mergeTree)\n        // if (validate()) {\n        console.log('UPDATE');\n        treeService.save(mergeTree)\n        history.push('/survey_editor')\n        // }\n    }\n\n    return (\n        <div className=\"main-container\">\n            <h1>עדכן עץ</h1>\n            <div className=\"form-container\">\n                <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                    <div className=\"trees-form flex column\">\n                        <div className=\"type-form \">\n                            <label htmlFor=\"isPalmTree rtl\">\n                                <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                                עץ דקל\n                            </label>\n                            <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>מספר עץ</p>\n                            <Input\n                                error={errors.idx}\n                                name=\"idx\"\n                                value={values.idx}\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>כמות עצים</p>\n                            <Input\n                                error={errors.quantity}\n                                value={values.quantity}\n                                name=\"quantity\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>קוטר הגזע</p>\n                            <Input\n                                error={errors.diameter}\n                                value={values.diameter}\n                                placeholder=\"קוטר בס״מ של הגזע\"\n                                name=\"diameter\"\n                                variant=\"standard\"\n                                onChange={handleInputChange} />\n                        </div>\n\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                            <Input\n                                error={errors.health}\n                                value={values.health}\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                placeholder=\"0-5\"\n                                id=\"health\"\n                                name=\"health\"\n                                variant=\"standard\"\n                                onChange={handleInputChange} />\n                            {isModalShown.health &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'health',\n                                        isShowen: isModalShown.health\n                                    }}\n                                    imgSrc=\"/imgs/modal/healthModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p>גובה העץ</p>\n                            <Input\n                                error={errors.height}\n                                name=\"height\"\n                                variant=\"standard\"\n                                placeholder=\"גובה העץ במטרים\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                            <Input\n                                error={errors.location}\n                                placeholder=\"0-5\"\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                id=\"location\"\n                                name=\"location\"\n                                onChange={handleInputChange} />\n\n                            {isModalShown.location &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'location',\n                                        isShowen: isModalShown.location\n                                    }}\n                                    imgSrc=\"/imgs/modal/locationModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                            <Input\n                                error={errors.canopy}\n                                placeholder=\"0-5\"\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                id=\"canopy\"\n                                name=\"canopy\"\n                                onChange={handleInputChange} />\n                            {isModalShown.canopy &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'canopy',\n                                        isShowen: isModalShown.canopy\n                                    }}\n                                    imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p>אזור שורשים מוגן</p>\n                            <Input\n                                error={errors.rootsDiameter}\n                                placeholder=\"אזור שורשים מוגן במטרים\"\n                                id=\"rootsDiameter\"\n                                name=\"rootsDiameter\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>היתכנות העתקה</p>\n                            <FormControl>\n                                <Select\n                                    // error={errors.movingPossibility}\n                                    type=\"text\"\n                                    id=\"movingPossibility\"\n                                    name=\"movingPossibility\"\n                                    value={values.movingPossibility}\n                                    onChange={handleInputChange}>\n                                    {formService.movingPossibility.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <div className=\"input-container\">\n                            <p>המלצה</p>\n                            <FormControl >\n                                <Select\n                                    // error={errors.recommendation}\n                                    type=\"text\"\n                                    id=\"recommendation\"\n                                    name=\"recommendation\"\n                                    value={values.recommendation}\n                                    onChange={handleInputChange}>\n                                    {formService.recomandationOptions.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <div className=\"input-container\">\n                            <p>סיבת כריתה או\n                                העתקת\n                                העץ</p>\n                            <Input\n                                error={errors.movingReason}\n                                multiline\n                                rows={2}\n                                type=\"text\"\n                                id=\"movingReason\"\n                                name=\"movingReason\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>הערות</p>\n                            <Input\n                                error={errors.description}\n                                multiline\n                                rows={2}\n                                type=\"text\"\n                                id=\"description\"\n                                name=\"description\"\n                                onChange={handleInputChange} />\n                        </div>\n                    </div>\n                    {/* <CloudinaryUpload onGetImgUrl={onGetImgUrl} /> */}\n                    <Button style={{ marginBottom: '20px' }} onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">עדכן עץ</Button>\n                    {isModalShown.isAddingTree &&\n                        <div\n                            onClick={() => { HandleIsModalShown(!isModalShown.health) }}\n                            className=\"adding-modal\">\n                            <div className=\"background\"></div>\n                            <h1>העץ נוסף בהצלחה!</h1>\n                        </div>}\n                </form>\n            </div>\n        </div>\n    )\n\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\n    return (\n        <section className=\"home-container flex \">\n        <Link to=\"/create_survey\" >\n            <div className=\"new-survey\">סקר חדש</div>\n        </Link>\n\n        <Link to=\"/choose_survey\" >\n        <div className=\"existing-survey\">בחר סקר</div>\n        </Link>\n    </section>\n\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { TreesForm } from './cmps/TreesForm';\nimport { ChooseSurvey } from './pages/ChooseSurvey';\nimport { CreateSurvey } from './pages/CreateSurvey';\nimport { SurveyEditor } from './pages/SurveyEditor';\nimport { TreeUpdate } from './pages/TreeUpdate';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/about\" component={ About } />\n        <Route path=\"/trees\" component={ TreesSurvey } />\n        <Route path=\"/tree_update/:treeId\" component={ TreeUpdate } />\n        <Route path=\"/survey_editor\" component={ SurveyEditor } />\n        <Route path=\"/choose_survey\" component={ ChooseSurvey } />\n        <Route path=\"/create_survey\" component={ CreateSurvey } />\n        <Route path=\"/\" component={ Home } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport TreeReducer from './reducers/TreeReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    TreeModule: TreeReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}