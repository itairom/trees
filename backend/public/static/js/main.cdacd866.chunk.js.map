{"version":3,"sources":["serviceWorker.js","reducers/TreeReducer.js","assets/svg/menu_black_24dp.svg","services/storageService.js","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","services/customHooks.js","cmps/TreesTable.jsx","services/httpService.js","services/treeService.js","cmps/TreesTypesTable.jsx","cmps/table/TreeRecommendationTable.jsx","pages/TreesSurvey.jsx","services/formService.js","cmps/FormAutocomplete.jsx","cmps/form/input.jsx","cmps/form/FormModal.jsx","services/cloudinaryService.js","cmps/ImgUpload.jsx","cmps/TreesForm.jsx","actions/TreeActions.js","pages/ChooseSurvey.jsx","pages/CreateSurvey.jsx","cmps/TreePreview.jsx","pages/SurveyEditor.jsx","pages/TreeUpdate.jsx","pages/Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","filterBy","isDark","currentSurvey","isTreePreviewShowen","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","_ref","svgRef","title","props","height","viewBox","width","ref","ForwardRef","forwardRef","storageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","AppHeader","useState","isMobile","setIsMobile","localSurveyId","setLocalSurveyId","useEffect","storageId","surveyTitle","changeMobile","prev","className","to","onClick","About","TreesImages","trees","map","tree","_id","idx","imgUrl","src","alt","useForm","initialFValues","validateOnChange","validate","values","setValues","errors","setErrors","handleInputChange","ev","name","value","type","checked","resetForm","useHandleModal","cb","fields","setFields","field","prevFields","TreesTable","history","useHistory","console","log","windowSize","isClient","getSize","innerWidth","undefined","innerHeight","setWindowSize","handleResize","addEventListener","removeEventListener","useWindowSize","calculateValue","canopy","health","typeValue","calculateTreeValue","sum","Math","pow","diameter","quantity","toFixed","calculatePalmTreeValue","ValueColor","id","label","rootsDiameter","isPalmTree","movingPossibility","description","recommendation","movingReason","push","table","filename","sheet","buttonText","aria-multiline","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","then","tableId","treeId","removedTree","surveyId","treeService","save","queryTrees","querySurveyIdList","querySurveyTrees","removeTree","getTreeById","TreesTypesTable","treeTypeObj","setTreeTypeObj","treeTypeKeysArr","setTreeTypeKeysArr","totalvaluesArr","setTotalvaluesArr","mapTreeValue","localTotalvaluesArr","lowPriority","mediumPriority","highPriority","veryHighPriority","typeObj","NTL","treeKeys","objToArr","reduce","b","TreeRecommendationTable","TreesSurvey","useSelector","state","TreeModule","setTrees","setTableIdList","formService","treeTypes","palmstreeTypes","recomandationOptions","FormAutocomplete","onSetTreeType","options","display","setDisplay","search","setSearch","treeObj","setTreeObj","onSetSearch","useCallback","func","timer","args","context","clearTimeout","setTimeout","debounce","onChange","placeholder","filter","option","includes","v","Input","error","InputProps","multiline","rows","TextField","variant","color","helperText","FormModal","HandleiIsModalShown","modal","imgSrc","isShowen","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","ImgUpload","onGetImgUrl","images","setImages","file","secure_url","imageList","addUpdateIndex","maxNumber","dataURLKey","onImageUpload","onImageUpdate","onImageRemoveAll","onImageRemove","isDragging","dragProps","style","image","index","data_url","TreesForm","setSurveyId","treeTypeOptions","setTreeTypeOptions","treeType","setType","setImgUrl","fieldValues","temp","isLessThenFiveInput","isEmptyInput","mobile","every","x","isAddingTree","isModalShown","HandleIsModalShown","submitForm","preventDefault","treeCopy","inputsRef","document","querySelectorAll","textareaRef","forEach","input","textarea","onResetForm","scrollTo","dir","action","onSubmit","htmlFor","setIsPalmTree","inputProps","max","min","FormControl","Select","MenuItem","img","Button","_setCurrentSurvey","survey","setCurrentSurvey","dispatch","ChooseSurvey","useDispatch","surveyIdList","setSurveyIdList","currentSurveyId","setCurrentSurveyId","handleOnClickNext","handleOnClickBack","resp","filterdList","InputLabel","required","CreateSurvey","handleOnClick","useFormCreateSurvey","surveyDate","surveySummary","handleChange","addNewSurvey","TreePreview","isRemove","setIsRemove","SurveyEditor","setIsAddingTree","currentSurveyTrees","setCurrentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","localCurrentSurvey","setLocalCurrentSurvey","storageTreeId","TreeUpdate","setTree","useParams","treeById","setInputRef","setTextAreaRef","mergeTree","marginBottom","Home","App","path","component","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cdacd866.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n    filterBy: null,\r\n    isDark: false,\r\n    currentSurvey:{},\r\n    isTreePreviewShowen:false\r\n}\r\n\r\nexport default function TreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_SURVEY':\r\n            return {\r\n                ...state,\r\n                currentSurvey: action.survey\r\n            }\r\n\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'TOGGLE_IS_PREVIEW_TREE':\r\n            return {\r\n                ...state,\r\n                isTreePreviewShowen: !state.isTreePreviewShowen\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n});\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\nimport { storageService } from '../services/storageService'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    const [localSurveyId, setLocalSurveyId] = useState('')\r\n\r\n    useEffect(() => {\r\n        let storageId = storageService.loadFromStorage('surveyId')\r\n        if(storageId){\r\n            setLocalSurveyId(storageId.surveyTitle)\r\n        }\r\n    }, [])\r\n\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav className=\"main-nav \">\r\n                {!isMobile && <div className=\"left-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                    <Link to='/survey_editor'><span>הוספת עץ</span></Link>\r\n                    <a className=\"current-survey\"><span>סקר </span>{localSurveyId}</a>\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <p>סקר <span>{localSurveyId}</span></p>\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                    <Link to='/survey_editor'><span>הוספת עץ</span></Link>\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\nexport const TreesImages = (...props) => {\n\n    const { trees } = props[0]\n    return (\n        <section className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    <div key={tree._id} className=\"image-card pointer\">\n                        <p >{tree.idx}</p>\n                        {tree.imgUrl !== '' && <img key={tree._id} src={tree.imgUrl} alt=\"tree\" />}\n                        {tree.imgUrl === '' && <img key={tree._id} src=\"imgs/tree_silhouette.png\" alt=\"tree\" />}\n                    </div>\n                )\n            })}\n        </section>\n\n    )\n}","import { useEffect, useState } from 'react'\r\n\r\nexport function useForm(initialFValues, validateOnChange = false, validate) {\r\n  const [values, setValues] = useState(initialFValues);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = ev => {\r\n    const { name } = ev.target\r\n    let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n    value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    })\r\n    if (validateOnChange)\r\n      validate({ [name]: value })\r\n  }\r\n\r\n  const resetForm = () => {\r\n    setValues(initialFValues);\r\n    setErrors({})\r\n  }\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n  }\r\n}\r\n\r\nexport const useFormCreateSurvey = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useError = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: '' }))\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      if (value > 5 || value < 0) {\r\n        setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n      }\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useHandleModal = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (field, value) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n\r\nexport const useGeolocation = () => {\r\n\r\n  const [location, setLocation] = useState({\r\n    isReady: false,\r\n    coordinates: {\r\n      lng: '', lat: ''\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(onSucsess, onError)\r\n  },[])\r\n\r\n  const onSucsess = (position) => {\r\n    setLocation({\r\n      isReady: true,\r\n      coordinates: {\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude\r\n      }\r\n    })\r\n  }\r\n\r\n  const onError = (err) => {\r\n    setLocation({\r\n      isReady: true,\r\n      err\r\n    })\r\n\r\n  };\r\n\r\n  return location\r\n}\r\n\r\nexport default function useWindowSize() {\r\n  const isClient = typeof window === 'object';\r\n\r\n  function getSize() {\r\n    return {\r\n      width: isClient ? window.innerWidth : undefined,\r\n      height: isClient ? window.innerHeight : undefined\r\n    };\r\n  }\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return false;\r\n    }\r\n\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n}","import React, { useEffect, useState } from \"react\"\nimport ReactToExcel from 'react-html-table-to-excel'\nimport { useHistory } from \"react-router\"\nimport useWindowSize from \"../services/customHooks\"\n\nexport const TreesTable = ({ trees }) => {\n\n    const [isMobile, setIsMobile] = useState(false)\n    const history = useHistory()\n\n    useEffect(() => {\n        console.log(trees);\n    }, [trees])\n\n    const windowSize = useWindowSize()\n\n    useEffect(() => {\n        windowSize.width < 500 ? setIsMobile(true) : setIsMobile(false)\n    }, [windowSize])\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateTreeValue = (tree) => {\n        const sum = (((tree.location * +tree.type.typeValue * tree.health) / 5) * (Math.pow((tree.diameter / 2), 2) * 3.14) / 5) * 20\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const calculatePalmTreeValue = (tree) => {\n        const sum = (tree.height * ((tree.location / 5 * +tree.type.typeValue / 5 * +tree.health / 5))) * 1500\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'yellow'\n        else if (sum > 6 && 14 > sum) return 'grey'\n        else if (sum > 13 && 17 > sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table \">\n             <table id=\"main-table\">\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type.label}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.type.typeValue}</td>\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                {!tree.isPalmTree && <td>{calculateTreeValue(tree)}</td>}\n                                {tree.isPalmTree && <td>{calculatePalmTreeValue(tree)}</td>}\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>{tree.recommendation}</td>\n                                <td>{tree.movingReason}</td>\n                                <div\n                                    onClick={() => { history.push(`tree_update/${tree._id}`) }}\n                                    className=\"edit-btn btn\">עריכה</div >\n                            </tr>\n                        )\n                    })}\n                </tbody>\n                <ReactToExcel\n                className=\"download-table \"\n                table=\"main-table\"\n                filename=\"טבלת סקר עצים\"\n                sheet=\"טבלת סקר עצים\"\n                buttonText=\"הורדה\"\n            />\n            </table>\n\n             <section className=\"mobile-table\">\n                {trees?.map((tree) => {\n                    return (\n                        <div className=\"mobile-tree-card\" key={tree._id}>\n                            <div className=\"flex\">\n                                <p>אינדקס</p>\n                                <p>{tree.idx}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>סוג עץ</p>\n                                <p>{tree.type.label}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p> כמות</p>\n                                <p>{tree.quantity}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>גובה</p>\n                                <p>{tree.height}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>קוטר</p>\n                                <p>{tree.diameter}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>מצב בריאותי</p>\n                                <p>{tree.health}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>מיקום</p>\n                                <p>{tree.location}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ערך עץ</p>\n                                <p>{tree.type.typeValue}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ניקוד חופת עץ</p>\n                                <p>{tree.canopy}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ערך עץ</p>\n                                <p className={ValueColor(tree)}>{calculateValue(tree)}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>קוטר שורשרים</p>\n                                <p>{tree.rootsDiameter}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>שווי כספי</p>\n                                {!tree.isPalmTree && <p>{calculateTreeValue(tree)}</p>}\n                                {tree.isPalmTree && <p>{calculatePalmTreeValue(tree)}</p>}\n                            </div>\n                            <div className=\"flex\">\n                                <p>אפשרות העתקה</p>\n                                <p>{tree.movingPossibility}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>תיאור</p>\n                                <p aria-multiline=\"true\">{tree.description}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>המלצה</p>\n                                <p>{tree.recommendation}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>סיבת העברה</p>\n                                <p>{tree.movingReason}</p>\n                            </div>\n                            <div\n                                onClick={() => { history.push(`tree_update/${tree._id}`) }}\n                                className=\"edit-btn btn\">עריכה</div >\n                        </div>\n                    )\n                })\n                \n            }\n           {isMobile&& <ReactToExcel\n                className=\"download-table \"\n                table=\"main-table\"\n                filename=\"טבלת סקר עצים\"\n                sheet=\"טבלת סקר עצים\"\n                buttonText=\"הורדה\"\n            />}\n            </section>\n        </section>\n    )\n\n\n}\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","import { httpService } from \"./httpService\"\n\n\nasync function save(tree) {\n    await httpService.put(`tree/save`, tree)\n        .then((res) => {\n            console.log(res);\n        })\n\n}\nasync function queryTrees(tableId) {\n    let trees = await httpService.get(`tree/`,tableId)\n    return trees\n}\nasync function getTreeById(treeId) {\n    let tree = await httpService.get(`tree/${treeId}`)\n    return tree\n}\nasync function removeTree(treeId) {\n    console.log(\"🚀 ~ file: treeService.js ~ line 16 ~ removeTree ~ treeId\", treeId)\n    let removedTree = await httpService.delete(`tree/${treeId}`)\n    return removedTree\n}\n\nasync function querySurveyIdList() {\n    let trees = await httpService.get(`tree/survey_id_list`)\n    return trees\n}\nasync function querySurveyTrees(surveyId) {\n    let trees = await httpService.get(`tree/survey_trees`,surveyId)\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    queryTrees,\n    querySurveyIdList,\n    querySurveyTrees,\n    removeTree,\n    getTreeById\n}","import { keys } from \"@material-ui/core/styles/createBreakpoints\"\nimport React, { useEffect, useState } from \"react\"\nimport { utilService } from \"../services/utilService\"\n\n\n\n\nexport const TreesTypesTable = ({ trees }) => {\n\n\n    const [treeTypeObj, setTreeTypeObj] = useState([])\n    const [treeTypeKeysArr, setTreeTypeKeysArr] = useState([])\n    const [totalvaluesArr, setTotalvaluesArr] = useState({})\n\n    useEffect(() => {\n        mapTreeValue(trees)\n    }, [trees])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    // const calculateMonetaryValue = (tree) => {\n    //     let sum = (calculateValue(tree) / 5) * 20\n    //     return sum\n    // }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'lowPriority'\n        else if (sum > 6 && 14 > sum) return 'mediumPriority'\n        else if (sum > 13 && 17 > sum) return 'highPriority'\n        else return 'veryHighPriority'\n    }\n\n\n    const getTotalvaluesArr = () => {\n        return (\n            {\n                lowPriority: 0,\n                mediumPriority: 0,\n                highPriority: 0,\n                veryHighPriority: 0\n            }\n        )\n    }\n\n\n    const mapTreeValue = (trees) => { // improve the code!\n        let localTotalvaluesArr = getTotalvaluesArr()\n        let typeObj = {}\n        for (let i = 0; i < trees.length; i++) {\n            let NTL = trees[i].type.label\n            let value = ValueColor(trees[i])\n            if (!typeObj.hasOwnProperty(NTL)) {\n                let NTL = trees[i].type.label\n                typeObj[NTL] = {\n                    'highPriority': 0,\n                    'lowPriority': 0,\n                    'mediumPriority': 0,\n                    'veryHighPriority': 0,\n                    'total': 0\n                }\n            }\n            ++localTotalvaluesArr[value]\n            ++typeObj[NTL][value]\n            ++typeObj[NTL]['total']\n        }\n\n        // console.log(\"🚀 ~ file: TreesTypesTable.jsx ~ line 54 ~ mapTreeValue ~ localTotalvaluesArr\", localTotalvaluesArr)\n        const treeKeys = Object.keys(typeObj)\n        const objToArr = Object.values(typeObj)\n        setTreeTypeObj(objToArr)\n        setTreeTypeKeysArr(treeKeys)\n        setTotalvaluesArr(localTotalvaluesArr)\n    }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th className=\"red\">ערכיות גבוהה מאוד **</th>\n                    <th className=\"green\">ערכיות גבוהה **</th>\n                    <th className=\"grey\">ערכיות בינונית **</th>\n                    <th className=\"yellow\">ערכיות נמוכה **</th>\n                    <th className=\"\">סה״כ</th>\n                </tr>\n                <tbody>\n                    {treeTypeKeysArr && treeTypeObj?.map((tree, idx) => {\n                        return (\n                            <tr key={tree._id}>\n                                {<td>{treeTypeKeysArr[idx]}</td>}\n                                {<td>{tree['veryHighPriority']}</td>}\n                                {<td>{tree['highPriority']}</td>}\n                                {<td>{tree['mediumPriority']}</td>}\n                                {<td>{tree['lowPriority']}</td>}\n                                {<td>{tree['total']}</td>}\n                            </tr>\n                        )\n                    })}\n                    <tr key='total-values'>\n                        {<td>סה״ב</td>}\n                        {<td>{totalvaluesArr['veryHighPriority']}</td>}\n                        {<td>{totalvaluesArr['highPriority']}</td>}\n                        {<td>{totalvaluesArr['mediumPriority']}</td>}\n                        {<td>{totalvaluesArr['lowPriority']}</td>}\n                        {<td>{Object.values(totalvaluesArr).reduce((a, b) => a + b, 0)}</td>}\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\n","import React, { useEffect } from \"react\"\n\nexport function TreeRecommendationTable({ trees }) {\n\n\n  useEffect(() => {\n    console.log('trees', trees);\n  }, [])\n  const calculateValue = (tree) => {\n    const { canopy, location, health } = tree\n    const { typeValue } = tree.type\n    return (+canopy + +typeValue + +location + +health)\n  }\n\n  // const calculateMonetaryValue = (tree) => {\n  //     let sum = (calculateValue(tree) / 5) * 20\n  //     return sum\n  // }\n\n  // const ValueColor = (tree) => {\n  //   let sum = calculateValue(tree)\n  //   if (sum <= 6) return 'lowPriority'\n  //   else if (sum > 6 && 14 > sum) return 'mediumPriority'\n  //   else if (sum > 13 && 17 > sum) return 'highPriority'\n  //   else return 'veryHighPriority'\n  // }\n\n\n  const getTotalvaluesArr = () => {\n    return (\n      {\n        preserve: 0,\n        relocation: 0,\n        amputation: 0,\n        notDefined: 0,\n        total: 0\n      }\n    )\n  }\n\n  const mapTreeValue = (trees) => { // improve the code!\n    let localTotalvaluesArr = getTotalvaluesArr()\n    let typeObj = {}\n    for (let i = 0; i < trees.length; i++) {\n      const { recommendation } = trees[i]\n      // let value = ValueColor(trees[i])\n      if (!typeObj.hasOwnProperty(recommendation)) {\n        const { recommendation } = trees[i]\n        // let NTL = trees[i].type.label\n        typeObj[recommendation] = {\n          'preserve': 0,\n          'relocation': 0,\n          'amputation': 0,\n          'notDefined': 0,\n          'total': 0\n        }\n      }\n      ++localTotalvaluesArr[i]\n      ++typeObj[recommendation][i]\n      ++typeObj[recommendation]['total']\n    }\n  }\n\n  return (\n    <section className=''>\n\n    </section>\n  )\n}","import React, { useEffect, useState } from 'react'\nimport html2pdf from 'html2pdf.js'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\nimport { TreesTypesTable } from '../cmps/TreesTypesTable';\nimport TreeMap from '../cmps/TreeMap';\nimport { TreeRecommendationTable } from '../cmps/table/TreeRecommendationTable';\n\nexport const TreesSurvey = () => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    let [trees, setTrees] = useState([])\n    // let [currentTableId, setCurrentTableId] = useState('')\n    let [tableIdList, setTableIdList] = useState([''])\n    const [localSurveyId, setLocalSurveyId] = useState('')\n\n    useEffect(() => {\n\n        async function queryTrees() {\n            setTableIdList(await treeService.querySurveyIdList())\n            setTrees(await treeService.queryTrees(currentSurvey?.surveyTitle))\n            if (Object.keys(currentSurvey).length === 0) {\n                let storageId = await storageService.loadFromStorage('surveyId')\n                if (storageId) {\n                    setTrees(await treeService.queryTrees(storageId?.surveyTitle))\n                    setLocalSurveyId(storageId)\n                }\n            }\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n        async function queryTrees() {\n            if (Object.keys(currentSurvey).length === 0) {\n                setTrees(await treeService.queryTrees(localSurveyId?.surveyTitle))\n            }\n        }\n        queryTrees()\n    }, [localSurveyId])\n\n\n    // const downloadAsPdf = () => {\n    //     let el = document.querySelector('#main-survey')\n    //     html2pdf(el);\n    // }\n\n    return (\n        <section id=\"main-survey\" className=\"main-container trees-survey flex\">\n            <h1>טבלה סקר <span>{currentSurvey?.surveyTitle || localSurveyId?.surveyTitle}</span></h1>\n\n            <TreesTable trees={trees} />\n            <TreesImages trees={trees} />\n            <TreesTypesTable trees={trees} />\n            <TreeRecommendationTable trees={trees} />\n            {/* <TreeMap text=\"mapmap\" /> */}\n        </section>\n    )\n}","import treeTypes from '../data/treeTypes.json';\nimport palmstreeTypes from '../data/palmstreeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n    ,\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notDefined',\n        label: 'לא מוגדר',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    palmstreeTypes,\n    recomandationOptions: recommendationOptions\n}\n","import React, { useCallback, useEffect, useState } from 'react'\n\n\nexport const FormAutocomplete = ({ onSetTreeType, options }) => {\n\n    const [display, setDisplay] = useState(false)\n    // const [options, setOptions] = useState([])\n    const [search, setSearch] = useState('')\n    const [treeObj, setTreeObj] = useState('')\n\n\n    useEffect(() => {\n        // setOptions(formService.treeTypes)\n    }, [options])\n\n\n    const debounce = (func) => {\n        let timer\n        return function (...args) {\n            const context = this\n            if (timer) clearTimeout(timer)\n            timer = setTimeout(() => {\n                timer = null\n                func.apply(context, args)\n            }, 1000)\n        }\n    }\n\n\n    useEffect(() => {\n        onSetTreeType(treeObj)\n        setDisplay(false)\n    }, [treeObj])\n\n\n\n    const onSetSearch = useCallback(debounce(setSearch))\n\n    const setTree = (tree) => {\n        setTreeObj(tree)\n        setSearch(tree.label)\n    }\n\n    return (\n        <section className=\"autocomplete-form\">\n            <input onChange={(ev) => { onSetSearch(ev.target.value) }} name=\"type\" value={search} type=\"text\" placeholder=\" מין העץ\" onClick={() => { setDisplay(!display) }} />\n            {display &&\n                <div className=\"autocomplete-container\">\n                    {options.filter((option) => option?.label?.includes(search)).map((v, i) => {\n                        return (\n                            <div onClick={() => { setTree(v) }} className=\"tree-option\" key={v.label}>\n                                <span>{v.label}</span>\n                            </div>\n                        )\n                    })\n                    }\n                </div>\n            }\n        </section>\n    )\n}","import React from 'react'\nimport { TextField } from '@material-ui/core';\n\nexport default function Input(props) {\n\n    const { name, label, value, error = null, onChange, InputProps, id, multiline, rows, placeholder } = props;\n    return (\n        <TextField\n            variant=\"standard\"\n            name={name}\n            // value={value}\n            onChange={onChange}\n            InputProps={InputProps}\n            id={id}\n            color=\"primary\"\n            type=\"number\"\n            {...(error && { error: true, helperText: error })}\n            {...multiline &&\n            {\n                rows: rows,\n                multiline\n            }}\n            // {...placeholder && { placeholder: placeholder }}\n            placeholder={placeholder}\n        />\n    )\n}","import React from 'react'\n\nexport default function FormModal({ HandleiIsModalShown, modal, imgSrc }) {\n    return (\n        <div\n            onClick={() => HandleiIsModalShown(modal.type, !modal.isShowen)}\n            className=\"form-modal health-modal\" >\n            <div className=\"modal-container \">\n                <img src={imgSrc} alt=\"מקרא\" />\n            </div>\n        </div>\n    )\n}","function uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n    const formData = new FormData();\n    // formData.append('file', files[0])\n    formData.append('file', files)\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","// REACT IMAGE UPLOAD WRAPPER\nimport React, { useEffect, useState } from \"react\";\nimport ImageUploading from \"react-images-uploading\";\nimport { cloudinaryService } from \"../services/cloudinaryService\";\n\nexport const ImgUpload = ({ onGetImgUrl }) => {\n\n    const [images, setImages] = useState([]);\n    const maxNumber = 1;\n\n    useEffect(() => {\n        (async () => {\n            if (images.length !== 0) {\n                // console.log(\"🚀 ~ file: ImgUpload.jsx ~ line 15 ~ imgUrl\", images[0].file)\n                const imgUrl = await cloudinaryService.uploadImg(images[0].file)\n                console.log(\"🚀 ~ file: ImgUpload.jsx ~ line 16 ~ imgUrl\", imgUrl)\n                onGetImgUrl(imgUrl.secure_url)\n            }\n        })()\n    }, [images])\n\n\n    const onChange = (imageList, addUpdateIndex) => {\n        // data for submit\n        console.log(imageList, addUpdateIndex);\n        setImages(imageList);\n    };\n\n\n    return (\n        <ImageUploading\n            // multiple\n            value={images}\n            onChange={onChange}\n            maxNumber={maxNumber}\n            dataURLKey=\"data_url\"\n        >\n            {({\n                imageList,\n                onImageUpload,\n                onImageRemoveAll,\n                onImageUpdate,\n                onImageRemove,\n                isDragging,\n                dragProps\n            }) => (\n                // write your building UI\n                <div className=\"upload__image-wrapper \">\n                    <button\n                        className=\"upload-btn btn\"\n                        style={isDragging ? { color: \"red\" } : null}\n                        onClick={onImageUpload}\n                        {...dragProps}\n                    >\n                        הוסף תמונה\n                    </button>\n                    &nbsp;\n                    {/* <button\n                        className=\"btn\"\n                        onClick={onImageRemoveAll}>Remove all images</button> */}\n                    {imageList.map((image, index) => (\n                        <div key={index} className=\"image-item\">\n                            <img src={image.data_url} alt=\"\" width=\"100\" />\n                            <div className=\"image-item__btn-wrapper\">\n                                <button onClick={() => onImageUpdate(index)}>Update</button>\n                                <button onClick={() => onImageRemove(index)}>Remove</button>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </ImageUploading>)\n}","import React, { useEffect, useState } from 'react'\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from './FormAutocomplete';\nimport Input from './form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from './form/FormModal';\nimport { ImgUpload } from './ImgUpload';\n\nexport const TreesForm = ({ querySurveyTrees }) => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n\n    const initialFValues = {\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: '',\n        isPalmTree: false\n    }\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n            temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n            temp.recommendation = isEmptyInput(fieldValues.recommendation)\n\n        setErrors({\n            ...temp\n        })\n\n        if (fieldValues === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate);\n\n    const [isModalShown, HandleIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: '',\n        isAddingTree: ''\n    })\n\n    useEffect(() => {\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        if (!surveyId || Object.keys(surveyId).length === 0) {\n            let storageId = storageService.loadFromStorage('surveyId')\n            if (storageId) {\n                setSurveyId(storageId)\n            }\n        }\n    }, [surveyId])\n\n    const onResetForm = () => {\n        resetForm()\n        const inputsRef = document.querySelectorAll('input')\n        const textareaRef = document.querySelectorAll('textarea')\n        inputsRef.forEach(input => {\n            input.value = ''\n        })\n        textareaRef.forEach(textarea => {\n            textarea.value = ''\n        })\n    }\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        const treeCopy = { ...values }\n        treeCopy.type = treeType\n        treeCopy.surveyId = surveyId\n        treeCopy.imgUrl = imgUrl\n        if (validate()) {\n            console.log('SUBMIT');\n            treeService.save(treeCopy)\n            HandleIsModalShown(!isModalShown.isAddingTree)\n            querySurveyTrees()\n            onResetForm()\n        }\n        window.scrollTo(0, 0)\n    }\n    return (\n        <div className=\"form-container\">\n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                <div className=\"trees-form flex column\">\n                    <div className=\"type-form \">\n                        <label htmlFor=\"isPalmTree rtl\">\n                            <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                            עץ דקל\n                        </label>\n                        <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>מספר עץ</p>\n                        <Input\n                            error={errors.idx}\n                            name=\"idx\"\n                            value={values.idx}\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>כמות עצים</p>\n                        <Input\n                            error={errors.quantity}\n                            value={values.quantity}\n                            name=\"quantity\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>קוטר הגזע</p>\n                        <Input\n                            error={errors.diameter}\n                            value={values.diameter}\n                            placeholder=\"קוטר בס״מ של הגזע\"\n                            name=\"diameter\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                    </div>\n\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                        <Input\n                            error={errors.health}\n                            value={values.health}\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            placeholder=\"0-5\"\n                            id=\"health\"\n                            name=\"health\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                        {isModalShown.health &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'health',\n                                    isShowen: isModalShown.health\n                                }}\n                                imgSrc=\"/imgs/modal/healthModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>גובה העץ</p>\n                        <Input\n                            error={errors.height}\n                            name=\"height\"\n                            variant=\"standard\"\n                            placeholder=\"גובה העץ במטרים\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                        <Input\n                            error={errors.location}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"location\"\n                            name=\"location\"\n                            onChange={handleInputChange} />\n\n                        {isModalShown.location &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'location',\n                                    isShowen: isModalShown.location\n                                }}\n                                imgSrc=\"/imgs/modal/locationModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                        <Input\n                            error={errors.canopy}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"canopy\"\n                            name=\"canopy\"\n                            onChange={handleInputChange} />\n                        {isModalShown.canopy &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'canopy',\n                                    isShowen: isModalShown.canopy\n                                }}\n                                imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>אזור שורשים מוגן</p>\n                        <Input\n                            error={errors.rootsDiameter}\n                            placeholder=\"אזור שורשים מוגן במטרים\"\n                            id=\"rootsDiameter\"\n                            name=\"rootsDiameter\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>היתכנות העתקה</p>\n                        <FormControl>\n                            <Select\n                                // error={errors.movingPossibility}\n                                type=\"text\"\n                                id=\"movingPossibility\"\n                                name=\"movingPossibility\"\n                                value={values.movingPossibility}\n                                onChange={handleInputChange}>\n                                {formService.movingPossibility.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>המלצה</p>\n                        <FormControl >\n                            <Select\n                                // error={errors.recommendation}\n                                type=\"text\"\n                                id=\"recommendation\"\n                                name=\"recommendation\"\n                                value={values.recommendation}\n                                onChange={handleInputChange}>\n                                {formService.recomandationOptions.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>סיבת כריתה או\n                            העתקת\n                            העץ</p>\n                        <Input\n                            error={errors.movingReason}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"movingReason\"\n                            name=\"movingReason\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>הערות</p>\n                        <Input\n                            error={errors.description}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"description\"\n                            name=\"description\"\n                            onChange={handleInputChange} />\n                    </div>\n                </div>\n                <ImgUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">הוסף עץ </Button>\n                {isModalShown.isAddingTree &&\n                    <div\n                        onClick={() => { HandleIsModalShown(!isModalShown.health) }}\n                        className=\"adding-modal\">\n                        <div className=\"background\"></div>\n                        <h1>העץ נוסף בהצלחה!</h1>\n                    </div>}\n            </form>\n        </div>\n    )\n}\n","\r\n// Dispatchers\r\nconst _setFilter = (filterBy) => ({ type: 'SET_FILTER', filterBy });\r\nconst _toggleDark = () => ({ type: 'TOGGLE_DARK' });\r\nconst _toggleIsTreePreviewShowen = () => ({ type: 'TOGGLE_IS_PREVIEW_TREE' });\r\nconst _setCurrentSurvey = (survey) => ({ type: 'SET_CURRENT_SURVEY', survey });\r\n\r\n// THUNK\r\n\r\nexport function setFilter(filterBy) {\r\n    return async (dispatch) => dispatch(_setFilter(filterBy))\r\n}\r\nexport function setCurrentSurvey(survey) {\r\n    return async (dispatch) => dispatch(_setCurrentSurvey(survey))\r\n}\r\nexport function toggleDark() {\r\n    return (dispatch) => dispatch(_toggleDark())\r\n}\r\nexport function toggleIsTreePreviewShowen() {\r\n    return (dispatch) => dispatch(_toggleIsTreePreviewShowen())\r\n}\r\n\r\n// export function saveCar(car) {\r\n//     return async (dispatch, getState) => {\r\n//         const type = car._id ? 'UPDATE_CAR' : 'ADD_CAR';\r\n//         const savedCar = await carService.save(car)\r\n//         dispatch({ type, car: savedCar })\r\n//     }\r\n// }\r\n","import { Link, useHistory } from 'react-router-dom'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSurvey } from '../actions/TreeActions';\nimport { storageService } from '../services/storageService';\n\n\n\nexport const ChooseSurvey = () => {\n\n    let dispatch = useDispatch()\n    const history = useHistory();\n    let [surveyIdList, setSurveyIdList] = useState([''])\n    let [currentSurveyId, setCurrentSurveyId] = useState('kfar saba')\n    const handleOnClickNext = useCallback(() => history.push('/survey_editor'), [history]);\n    const handleOnClickBack = useCallback(() => history.push('/'), [history]);\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n\n    useEffect(() => {\n        (async () => {\n            const resp = await treeService.querySurveyIdList()\n            setSurveyIdList(resp)\n        })()\n    }, [])\n\n    useEffect(() => {\n        let filterdList = surveyIdList.filter(tree => { return tree.surveyTitle === currentSurveyId })\n        if(filterdList[0]){\n            storageService.saveToStorage('surveyId', filterdList[0])\n            dispatch(setCurrentSurvey(filterdList[0]))\n        }\n      \n    }, [currentSurveyId])\n\n\n\n\n    return (\n        <section className=\"choose-section flex\">\n            <h1>בחר סקר</h1>\n            <FormControl>\n                <InputLabel required id=\"movingPossibility\">בחר</InputLabel>\n                <Select\n                    required\n                    type=\"text\"\n                    id=\"currentTableId\"\n                    name=\"currentTableId\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                    value={currentSurveyId}\n                    label=\"לחץ כאן\"\n                    placeholder=\"לחץ כאן\"\n                    onChange={(ev) => { setCurrentSurveyId(ev.target.value) }} >\n                    {\n                        surveyIdList?.map((id) => (\n                            <MenuItem\n\n                                key={id.surveyTitle}\n                                value={id.surveyTitle}>\n                                {id.surveyTitle}\n                            </MenuItem>\n                        ))\n                    }\n                </Select>\n            </FormControl>\n            <div className=\"next-btn button\"\n                onClick={() => { handleOnClickNext() }} >\n                <p>המשך</p>\n            </div>\n            <div className=\"back-btn button\"\n                onClick={() => { handleOnClickBack() }} >\n                <p>חזור</p>\n            </div>\n        </section>\n    )\n}","import React, { useCallback } from 'react'\nimport { useFormCreateSurvey } from '../services/customHooks'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentSurvey } from '../actions/TreeActions'\nimport { storageService } from '../services/storageService';\n\n\nexport const CreateSurvey = () => {\n\n\n    const history = useHistory();\n    const handleOnClick = useCallback(() => history.push('/survey_editor'), [history]);\n    const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    const [survey, handleChange] = useFormCreateSurvey({\n        surveyTitle: '',\n        surveyDate: '',\n        surveySummary: ''\n    })\n\n    const addNewSurvey = async () => {\n        await dispatch(setCurrentSurvey(survey))\n        storageService.saveToStorage('surveyId', survey)\n\n        handleOnClick()\n    }\n\n    return (\n        <section className=\"new-survey rtl\">\n            <form action=\"\">\n                <label htmlFor=\"surveyTitle\" onSubmit={(ev) => { ev.preventDefault() }}>\n                    כותרת סקר:\n                    <input\n                        id=\"surveyTitle\"\n                        name=\"surveyTitle\"\n                        type=\"text\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyTitle} />\n                </label>\n                <label htmlFor=\"surveyTitle\">\n                    תאריך סקר:\n                    <input\n                        id=\"surveyDate\"\n                        name=\"surveyDate\"\n                        type=\"date\"\n                        placeholder=\"dd-mm-yyyy\"\n                        min=\"1997-01-01\"\n                        max=\"2030-12-31\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyDate} />\n                </label>\n                <div className=\"add-btn button\" onClick={() => { addNewSurvey() }}>הוסף סקר</div>\n\n                <Link to=\"/choose_survey\" >\n                    <div className=\"existing-survey\">חזרה</div>\n                </Link>\n\n            </form>\n        </section>\n\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\nimport { treeService } from '../services/treeService'\n\nexport const TreePreview = ({ tree, querySurveyTrees }) => {\n\n    const dispatch = useDispatch()\n    const [isRemove, setIsRemove] = useState(false)\n    const history = useHistory()\n\n    useEffect(() => {\n    })\n\n    const onRemoveTree = () => {\n        treeService.removeTree(tree._id)\n        querySurveyTrees()\n    }\n\n    return (\n        <section className=\"main-container tree-preview\">\n            <div className=\"preview-info\">\n                <p>מספר עץ: {tree?.idx}</p>\n                <p> סוג עץ: {tree?.type.typeValue}</p>\n                <p>קוטר גזע: {tree?.diameter}</p>\n                <p>מצב בריאותי: {tree?.health}</p>\n                <p>גובה העץ: {tree?.height}</p>\n                <p>מיקום העץ: {tree?.location}</p>\n                <p>ניקוד חופת העץ: {tree?.canopy}</p>\n                <p>היתכנות העתקה: {tree?.movingPossibility}</p>\n                <p>המלצה: {tree?.recommendation}</p>\n            </div>\n            {tree.imgUrl !== '' && <img src={tree?.imgUrl} alt=\"tree image\" />}\n            {tree.imgUrl === '' && <img src='imgs/tree_silhouette.png' alt=\"tree image\" />}\n            <div className=\"options\">\n                <div\n                    className=\"remove-btn btn\"\n                    onClick={() => { setIsRemove(true) }}>\n                    <span>מחק</span>\n                </div>\n                <div\n                    className=\"update-btn btn\"\n                    onClick={() => {\n                        history.push(`/tree_update/${tree._id}`)\n                    }}>\n                    <span>עדכן</span>\n                </div>\n\n            </div>\n            {isRemove && <div className=\"remove-modal \">\n                <p>האם למחוק ?</p>\n                <div className=\"\">\n                    <p className=\"btn\" onClick={() => { onRemoveTree() }}>מחק</p>\n                    <p className=\"btn\" onClick={() => { setIsRemove(false) }}>חזור</p>\n                </div>\n            </div>}\n            <div\n                className=\"close-preview\"\n                onClick={(ev) => {\n                    ev.preventDefault()\n                    dispatch(toggleIsTreePreviewShowen())\n                }}\n            ><span>X</span></div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TreesForm } from '../cmps/TreesForm'\nimport { treeService } from '../services/treeService'\nimport { storageService } from '../services/storageService';\nimport { TreePreview } from '../cmps/TreePreview';\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions';\n\nexport const SurveyEditor = () => {\n\n    const dispatch = useDispatch()\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const [isAddingTree, setIsAddingTree] = useState(true)\n    // const [isAddingTree, setIsAddingTree] = useState(false)\n    const [currentSurveyTrees, setCurrentSurveyTrees] = useState([])\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n    const [localCurrentSurvey, setLocalCurrentSurvey] = useState('')\n\n\n    useEffect(() => {\n        querySurveyTrees()\n    }, [])\n\n    // useEffect(() => {\n    //     console.log('currentSurveyTrees', currentSurveyTrees);\n\n    // }, [currentSurveyTrees])\n\n    const querySurveyTrees = async () => {\n        console.log('query()');\n        let trees = await treeService.querySurveyTrees(currentSurvey.surveyTitle)\n        setCurrentSurveyTrees(trees)\n        if (Object.keys(currentSurvey).length === 0) {\n            const storageTreeId = storageService.loadFromStorage('surveyId')\n            if (storageTreeId) {\n                let trees = await treeService.querySurveyTrees(storageTreeId.surveyTitle)\n                setLocalCurrentSurvey(storageTreeId)\n                setCurrentSurveyTrees(trees)\n            }\n        }\n    }\n\n    return (\n        <section className=\"main-container rtl\">\n            {/* <h1><span>{currentSurvey.surveyTitle}</span> טופס סקר עצים </h1> */}\n            <h1>טופס סקר עצים <span>{localCurrentSurvey.surveyTitle}</span>  </h1>\n            <div className=\"add-tree\">\n                {<p onClick={(ev) => {\n                    ev.preventDefault()\n                    setIsAddingTree(true)\n                }}>הוסף עץ</p> && !isAddingTree}\n                {isAddingTree && <TreesForm querySurveyTrees={querySurveyTrees} />}\n            </div>\n            <div className=\"other-trees\">\n                <h3>עצים נוספים</h3>\n                {currentSurveyTrees && <div className=\"current-trees pointer flex\">\n                    {currentSurveyTrees.map((tree) => {\n                        return <div\n                            key={tree._id}\n                            className=\"tree-index\"\n                            onClick={() => {\n                                setCurrentPreviewTree(tree)\n                                dispatch(toggleIsTreePreviewShowen())\n                            }} >\n                            <p>{tree.idx}</p>\n                            <img src=\"imgs/treeLogo.png\" alt=\"index\" />\n                        </div>\n                    })}\n                    {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} querySurveyTrees={querySurveyTrees} />}\n                </div>}\n            </div>\n        </section>\n    )\n}","import React, { useEffect, useState } from \"react\"\nimport { useParams, useHistory } from \"react-router\"\nimport { treeService } from \"../services/treeService\"\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\n// import { CloudinaryUpload } from './CloudinaryUpload';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from '../cmps/FormAutocomplete';\nimport Input from '../cmps/form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from '../cmps/form/FormModal';\n\nexport const TreeUpdate = () => {\n\n    const [tree, setTree] = useState({})\n    const params = useParams()\n    let history = useHistory()\n\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n            temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n            temp.recommendation = isEmptyInput(fieldValues.recommendation)\n\n        setErrors({\n            ...temp\n        })\n\n        if (tree === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        errors,\n        setErrors,\n        handleInputChange,\n    } = useForm(tree, true, validate);\n\n    const [isModalShown, HandleIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: '',\n        isAddingTree: ''\n    })\n\n    useEffect(() => {\n        (async () => {\n            const treeById = await treeService.getTreeById(params.treeId)\n            setTree(treeById)\n        })()\n    }, [])\n\n    useEffect(() => {\n        setInputRef()\n        setTextAreaRef()\n    }, [tree])\n    const setInputRef = () => {\n\n        const inputsRef = document.querySelectorAll('input')\n        inputsRef.forEach(input => {\n            const name = input.name\n            input.value = (name==='type')?  tree.type?.label :  tree[name]\n        })\n    }\n    const setTextAreaRef = () => {\n        const textareasRef = document.querySelectorAll('textarea')\n        textareasRef.forEach(textarea => {\n            const name = textarea.name\n            textarea.value = tree[name]\n        })\n    }\n\n    useEffect(() => {\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        if (Object.keys(surveyId).length === 0) {\n            let storageId = storageService.loadFromStorage('surveyId')\n            if (storageId) {\n                setSurveyId(storageId)\n            }\n        }\n    }, [surveyId])\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        const mergeTree = { ...tree, type:treeType, ...values }\n        console.log(\"🚀 ~ file: TreeUpdate.jsx ~ line 170 ~ submitForm ~ mergeTree\", mergeTree)\n        // if (validate()) {\n        console.log('UPDATE');\n        treeService.save(mergeTree)\n        history.push('/survey_editor')\n        // }\n    }\n\n    return (\n        <div className=\"main-container\">\n            <h1>עדכן עץ</h1>\n            <div className=\"form-container\">\n                <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                    <div className=\"trees-form flex column\">\n                        <div className=\"type-form \">\n                            <label htmlFor=\"isPalmTree rtl\">\n                                <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                                עץ דקל\n                            </label>\n                            <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>מספר עץ</p>\n                            <Input\n                                error={errors.idx}\n                                name=\"idx\"\n                                value={values.idx}\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>כמות עצים</p>\n                            <Input\n                                error={errors.quantity}\n                                value={values.quantity}\n                                name=\"quantity\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>קוטר הגזע</p>\n                            <Input\n                                error={errors.diameter}\n                                value={values.diameter}\n                                placeholder=\"קוטר בס״מ של הגזע\"\n                                name=\"diameter\"\n                                variant=\"standard\"\n                                onChange={handleInputChange} />\n                        </div>\n\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                            <Input\n                                error={errors.health}\n                                value={values.health}\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                placeholder=\"0-5\"\n                                id=\"health\"\n                                name=\"health\"\n                                variant=\"standard\"\n                                onChange={handleInputChange} />\n                            {isModalShown.health &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'health',\n                                        isShowen: isModalShown.health\n                                    }}\n                                    imgSrc=\"/imgs/modal/healthModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p>גובה העץ</p>\n                            <Input\n                                error={errors.height}\n                                name=\"height\"\n                                variant=\"standard\"\n                                placeholder=\"גובה העץ במטרים\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                            <Input\n                                error={errors.location}\n                                placeholder=\"0-5\"\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                id=\"location\"\n                                name=\"location\"\n                                onChange={handleInputChange} />\n\n                            {isModalShown.location &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'location',\n                                        isShowen: isModalShown.location\n                                    }}\n                                    imgSrc=\"/imgs/modal/locationModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                            <Input\n                                error={errors.canopy}\n                                placeholder=\"0-5\"\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                id=\"canopy\"\n                                name=\"canopy\"\n                                onChange={handleInputChange} />\n                            {isModalShown.canopy &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'canopy',\n                                        isShowen: isModalShown.canopy\n                                    }}\n                                    imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p>אזור שורשים מוגן</p>\n                            <Input\n                                error={errors.rootsDiameter}\n                                placeholder=\"אזור שורשים מוגן במטרים\"\n                                id=\"rootsDiameter\"\n                                name=\"rootsDiameter\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>היתכנות העתקה</p>\n                            <FormControl>\n                                <Select\n                                    // error={errors.movingPossibility}\n                                    type=\"text\"\n                                    id=\"movingPossibility\"\n                                    name=\"movingPossibility\"\n                                    value={values.movingPossibility}\n                                    onChange={handleInputChange}>\n                                    {formService.movingPossibility.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <div className=\"input-container\">\n                            <p>המלצה</p>\n                            <FormControl >\n                                <Select\n                                    // error={errors.recommendation}\n                                    type=\"text\"\n                                    id=\"recommendation\"\n                                    name=\"recommendation\"\n                                    value={values.recommendation}\n                                    onChange={handleInputChange}>\n                                    {formService.recomandationOptions.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <div className=\"input-container\">\n                            <p>סיבת כריתה או\n                                העתקת\n                                העץ</p>\n                            <Input\n                                error={errors.movingReason}\n                                multiline\n                                rows={2}\n                                type=\"text\"\n                                id=\"movingReason\"\n                                name=\"movingReason\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>הערות</p>\n                            <Input\n                                error={errors.description}\n                                multiline\n                                rows={2}\n                                type=\"text\"\n                                id=\"description\"\n                                name=\"description\"\n                                onChange={handleInputChange} />\n                        </div>\n                    </div>\n                    {/* <CloudinaryUpload onGetImgUrl={onGetImgUrl} /> */}\n                    <Button style={{ marginBottom: '20px' }} onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">עדכן עץ</Button>\n                    {isModalShown.isAddingTree &&\n                        <div\n                            onClick={() => { HandleIsModalShown(!isModalShown.health) }}\n                            className=\"adding-modal\">\n                            <div className=\"background\"></div>\n                            <h1>העץ נוסף בהצלחה!</h1>\n                        </div>}\n                </form>\n            </div>\n        </div>\n    )\n\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\n    return (\n        <section className=\"home-container flex \">\n        <Link to=\"/create_survey\" >\n            <div className=\"new-survey\">סקר חדש</div>\n        </Link>\n\n        <Link to=\"/choose_survey\" >\n        <div className=\"existing-survey\">בחר סקר</div>\n        </Link>\n    </section>\n\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { TreesForm } from './cmps/TreesForm';\nimport { ChooseSurvey } from './pages/ChooseSurvey';\nimport { CreateSurvey } from './pages/CreateSurvey';\nimport { SurveyEditor } from './pages/SurveyEditor';\nimport { TreeUpdate } from './pages/TreeUpdate';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/about\" component={ About } />\n        <Route path=\"/trees\" component={ TreesSurvey } />\n        <Route path=\"/tree_update/:treeId\" component={ TreeUpdate } />\n        <Route path=\"/survey_editor\" component={ SurveyEditor } />\n        <Route path=\"/choose_survey\" component={ ChooseSurvey } />\n        <Route path=\"/create_survey\" component={ CreateSurvey } />\n        <Route path=\"/\" component={ Home } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport TreeReducer from './reducers/TreeReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    TreeModule: TreeReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}