{"version":3,"sources":["serviceWorker.js","reducers/CarReducer.js","assets/svg/menu_black_24dp.svg","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","cmps/TreesTable.jsx","services/httpService.js","services/treeService.js","pages/TreesSurvey.jsx","services/formService.js","services/cloudinaryService.js","cmps/CloudinaryUpload.jsx","services/storageService.js","cmps/TreesForm.jsx","services/customHooks.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","cars","filterBy","isDark","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","fill","_ref3","_ref","svgRef","title","props","height","viewBox","width","ref","ForwardRef","forwardRef","AppHeader","useState","isMobile","setIsMobile","changeMobile","prev","className","to","onClick","src","alt","About","TreesImages","trees","map","tree","imgUrl","idx","TreesTable","useEffect","console","log","calculateValue","canopy","monetaryValue","health","calculateMonetaryValue","ValueColor","sum","_id","type","quantity","diameter","rootsDiameter","movingPossibility","description","movingReason","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","then","tableId","treeService","save","query","queryTableIdList","TreesSurvey","setTrees","currentTableId","setCurrentTableId","tableIdList","setTableIdList","queryTrees","FormControl","InputLabel","required","id","Select","name","variant","color","value","onChange","ev","MenuItem","formService","label","treeTypes","recomandationOptions","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","error","CloudinaryUpload","file","setFile","setIsUpload","sendFile","preventDefault","imgUrlRes","onGetImgUrl","fileHandler","action","htmlFor","multiple","storageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","TreesForm","surveyId","setSurveyId","newSurveyId","setNewTableIdList","survyIdList","setSurvyIdList","treeType","setType","setImgUrl","cb","fields","setFields","field","prevFields","useForm","comments","totalValue","recommendation","form","handleChange","submitForm","treeCopy","onSubmit","dir","TextField","ran","Autocomplete","inputValue","options","newValue","BinomialNomenclature","getOptionLabel","option","String","fullWidth","PaperComponent","children","Paper","style","background","renderInput","backgroundColor","InputProps","inputProps","max","min","placeholder","startAdornment","InputAdornment","position","multiline","rows","img","Button","App","path","component","rootReducer","combineReducers","carModule","state","car","filter","carId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCjBAC,EAAe,CACjBC,KAAM,GACNC,SAAU,KACVC,QAAQ,G,oBCJZ,SAASC,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxMgB,CAA8BZ,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,IAAIoB,EAEJ,IAAMC,cAAc,OAAQ,CAC1BC,EAAG,kBACHC,KAAM,SAGJC,EAEJ,IAAMH,cAAc,OAAQ,CAC1BC,EAAG,kDAGD,EAAmB,SAA0BG,GAC/C,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQjB,EAAyBc,EAAM,CAAC,SAAU,UAEtD,OAAO,IAAMJ,cAAc,MAAOxB,EAAS,CACzCgC,OAAQ,OACRC,QAAS,YACTC,MAAO,OACPR,KAAM,UACNS,IAAKN,GACJE,GAAQD,EAAQ,IAAMN,cAAc,QAAS,KAAMM,GAAS,KAAMP,EAAOI,IAG1ES,EAAa,IAAMC,YAAW,SAAUN,EAAOI,GACjD,OAAO,IAAMX,cAAc,EAAkBxB,EAAS,CACpD6B,OAAQM,GACPJ,OAEU,ICnCR,SAASO,IAAa,IAAD,EACQC,oBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,KAElBC,EAAe,WACjBD,GAAY,SAAAE,GAAI,OAAYA,MAGhC,OACI,4BAAQC,UAAU,cACd,yBAAKA,UAAU,cACTJ,GAAY,yBAAKI,UAAU,YACzB,kBAAC,IAAD,CAAMC,GAAG,UAAS,+CAClB,kBAAC,IAAD,CAAMA,GAAG,SAAQ,4DAEpBL,GAAY,yBAAKM,QAASJ,EAAcE,UAAU,cAC/C,kBAAC,IAAD,CAAMC,GAAG,QAAO,sCAChB,kBAAC,IAAD,CAAMA,GAAG,UAAS,yCAErBL,GAAY,yBAAKI,UAAU,kBAAkBE,QAASJ,IACvD,kBAAC,EAAD,CAAMI,QAASJ,EAAcE,UAAU,aACvC,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMC,GAAG,KAAT,IAAc,yBAAKE,IAAI,gBAAgBC,IAAI,S,gBCvBlDC,EAAQ,WAEjB,OACI,6BAASL,UAAU,mBACf,uC,yBCFCM,EAAc,WAAe,IAAD,0CAI7BC,EAJ6B,EAI7BA,MACR,OACI,6BAASP,UAAU,qBACdO,EAAMC,KAAI,SAACC,GACR,OACI,oCACKA,EAAKC,QAAU,yBAAKV,UAAU,cAC3B,2BAAIS,EAAKE,KACT,yBAAKR,IAAKM,EAAKC,OAAQN,IAAI,gBCX1CQ,EAAa,WAAc,IAAC,IAAD,qBAAVzB,EAAU,yBAAVA,EAAU,gBAEpC0B,qBAAU,WACNC,QAAQC,IAAI,QAAS5B,KACtB,CAACA,IAGJ,IAAM6B,EAAiB,SAACP,GAEpB,OADoDA,EAA5CQ,OAA4CR,EAApCS,cAAoCT,EAArB5D,SAAqB4D,EAAXU,QAIvCC,EAAyB,SAACX,GAG5B,OAFoDA,EAA5CQ,OAA4CR,EAApCS,cAAoCT,EAArB5D,SAAqB4D,EAAXU,QACiB,EAAK,IAI7DE,EAAa,SAACZ,GAChB,IAAIa,EAAMN,EAAeP,GACzB,OAAIa,EAAM,EAAU,SACXA,EAAM,GAAK,GAAKA,EAAY,OAC5BA,EAAM,IAAM,GAAKA,EAAY,QAC1B,OAGhB,OACI,6BAAStB,UAAU,oBACf,+BACI,4BACI,uHAEA,+IAEA,iFACA,uFAGA,4FAGA,mGAGA,uFAGA,8FAIA,gHAIA,sJAGA,sKAKA,qGAGA,0GACA,8DACA,oEACA,uJAEJ,yCACKb,EAAM,GAAGoB,aADd,aACK,EAAgBC,KAAI,SAACC,GAClB,OACI,wBAAI7C,IAAK6C,EAAKc,KACTd,EAAKE,KAAO,4BAAKF,EAAKE,KACvB,4BAAKF,EAAKe,MACV,4BAAKf,EAAKgB,UACV,4BAAKhB,EAAKrB,QACV,4BAAKqB,EAAKiB,UACV,4BAAKjB,EAAKU,QACV,4BAAKV,EAAK5D,UACV,4BAAK4D,EAAKS,eACV,4BAAKT,EAAKQ,QACV,wBAAIjB,UAAWqB,EAAWZ,IAAQO,EAAeP,IACjD,4BAAKA,EAAKkB,eACV,4BAAKP,EAAuBX,IAC5B,4BAAKA,EAAKmB,mBACV,4BAAKnB,EAAKoB,aACV,8DACA,4BAAKpB,EAAKqB,sB,QC1FtCC,E,OAAQC,EAAMC,OAAO,CACrBC,iBAAiB,IAGRC,EAAc,SACnBC,EAAUC,GACV,OAAOC,EAAKF,EAAU,MAAOC,IAFxBF,EAAc,SAOnBC,EAAUC,GACV,OAAOC,EAAKF,EAAU,MAAOC,I,SAOtBC,E,8EAAf,WAAoBF,GAApB,+BAAAG,EAAA,6DAA8BC,EAA9B,+BAAuC,MAAOH,EAA9C,+BAAqD,KAArD,kBAE0BN,EAAM,CACpBU,IAAI,GAAD,OAzB4C,SAyB5C,OAAgBL,GACnBI,SACAH,OACAK,OAAoB,QAAXF,EAAoBH,EAAO,OANhD,cAEcM,EAFd,yBAQeA,EAAIN,MARnB,sCAYY,KAAIO,UAAoC,MAAxB,KAAIA,SAASC,QAC7BjG,OAAOC,SAASS,OAAO,YAbnC,+D,kECrBA,WAAoBmD,GAApB,SAAA8B,EAAA,sEACUJ,EAAA,YAA6B1B,GAC9BqC,MAAK,SAACH,GACH7B,QAAQC,IAAI4B,MAHxB,4C,kEAYA,WAAqBI,GAArB,eAAAR,EAAA,sEACsBJ,EAAA,QAAwBY,GAD9C,cACQxC,EADR,OAEIO,QAAQC,IAAI,gEAAuDR,GAFvE,kBAGWA,GAHX,4C,kEAMA,4BAAAgC,EAAA,sEACsBJ,EAAA,gBADtB,cACQ5B,EADR,OAEIO,QAAQC,IAAI,eAAMR,GAFtB,kBAGWA,GAHX,4C,sBAWO,IAAMyC,EAAc,CACvBC,K,4CACAC,M,4CACAC,iB,gFC3BSC,EAAc,WAAO,IAAD,EAELzD,mBAAS,IAFJ,mBAExBY,EAFwB,KAEjB8C,EAFiB,OAGa1D,mBAAS,aAHtB,mBAGxB2D,EAHwB,KAGRC,EAHQ,OAIO5D,mBAAS,CAAC,KAJjB,mBAIxB6D,EAJwB,KAIXC,EAJW,KAuB7B,OAhBA5C,qBAAU,WAAM,4CACZ,sBAAA0B,EAAA,kEACIkB,EADJ,SACyBT,EAAYG,mBADrC,8CAEIE,EAFJ,SAEmBL,EAAYE,MAAMI,GAFrC,+EADY,uBAAC,WAAD,wBAKZI,KACD,IAEH7C,qBAAU,WAAM,4CACZ,sBAAA0B,EAAA,6DACAzB,QAAQC,IAAI,iBAAiBuC,GAD7B,KAEAD,EAFA,SAEeL,EAAYE,MAAMI,GAFjC,8EADY,uBAAC,WAAD,wBAKZI,KACD,CAACJ,IAIA,6BAAStD,UAAU,oCACf,yBAAKA,UAAU,gBACX,4EACA,kBAAC2D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,UAAQ,EAACC,GAAG,qBAAxB,iDACA,kBAACC,EAAA,EAAD,CACIF,UAAQ,EACRrC,KAAK,OACLsC,GAAG,iBACHE,KAAK,iBACLC,QAAQ,SACRC,MAAM,UACNC,MAAOb,EACPc,SAAU,SAACC,GAASd,EAAkBc,EAAG9G,OAAO4G,SAE5CX,EAAYhD,KAAI,SAACsD,GAAD,OACZ,kBAACQ,EAAA,EAAD,CACI1G,IAAKkG,EACLK,MAAOL,GACNA,SAOzB,kBAAC,EAAD,CAAYvD,MAAOA,IACnB,kBAAC,EAAD,CAAaA,MAAOA,M,qDCTnBgE,EAAc,CACvB3C,kBApC6B,CAC7B,CACIuC,MAAO,OACPK,MAAO,kCAEX,CACIL,MAAO,SACPK,MAAO,8CAEX,CACIL,MAAO,MACPK,MAAO,mCA0BXC,U,MACAC,qBAvB0B,CAC1B,CACIP,MAAO,WACPK,MAAO,kCAEX,CACIL,MAAO,aACPK,MAAO,kCAEX,CACIL,MAAO,aACPK,MAAO,kCAEX,CACIL,MAAO,cACPK,MAAO,2CCxBR,IAAMG,EAAoB,CAC7BC,UAtBJ,SAAmBC,GACf,IACMC,EAAU,0CADG,YACH,iBAEVC,EAAW,IAAIC,SAKrB,OAJAD,EAASE,OAAO,OAAQJ,EAAM,IAC9B/D,QAAQC,IAAI,uBAAwB8D,EAAM,IAC1CE,EAASE,OAAO,gBAAiB,YAE1BC,MAAMJ,EAAY,CACrBtC,OAAQ,OACR2C,KAAMJ,IAELjC,MAAK,SAAAH,GAAG,OAAIA,EAAIyC,UAChBtC,MAAK,SAAAH,GAEF,OADA7B,QAAQC,IAAI4B,GACLA,KAEV0C,OAAM,SAAAC,GAAG,OAAIxE,QAAQyE,MAAMD,QChBvBE,EAAmB,WAAe,IAAD,uBAAVrG,EAAU,yBAAVA,EAAU,sBAGlBQ,mBAAS,MAHS,mBAGnC8F,EAHmC,KAG7BC,EAH6B,OAIV/F,oBAAS,GAJC,mBAIzBgG,GAJyB,WAMpCC,EAAQ,uCAAG,WAAMvB,GAAN,eAAA9B,EAAA,6DACb8B,EAAGwB,iBADU,SAESlB,EAAkBC,UAAUa,GAFrC,OAETK,EAFS,OAGbH,GAAY,GACZD,EAAQI,EAAUrD,KAClBtD,EAAM,GAAG4G,YAAYD,EAAUrD,KALlB,2CAAH,sDAQRuD,EAAc,SAAA3B,GAChBqB,EAAQrB,EAAG9G,OAAOsH,QAQtB,OACI,6BAAS7E,UAAU,oBACf,0BAAMiG,OAAO,KACT,6BACI,2BAAOC,QAAQ,SACf,2BACIrC,UAAQ,EACRsC,UAAQ,EACRnC,KAAK,QACLxC,KAAK,OACLsC,GAAG,OACHM,SAAU,SAACC,GAAS2B,EAAY3B,OAExC,4BAAQnE,QAAS,SAACmE,GAAD,OAAQuB,EAASvB,KAAlC,WAEHoB,GACG,yBAAKzF,UAAU,iBACX,sCACA,yBAAKG,IAAKsF,EAAMrF,IAAI,aClCjC,IAAMgG,EAAiB,CAC1BC,gBAXJ,SAAyBzI,GACrB,IAAI0I,EAAMC,aAAaC,QAAQ5I,GAC/B,OAAQ0I,EAAOG,KAAKC,MAAMJ,GAAO,MAUjCK,cAPJ,SAAuB/I,EAAK0I,GACxBC,aAAa3I,GAAO6I,KAAKG,UAAUN,KCK1BO,GAAY,WAAe,IAAD,EAEHlH,mBAAS,IAFN,mBAE5BmH,EAF4B,KAElBC,EAFkB,OAGMpH,mBAAS,IAHf,mBAG5BqH,EAH4B,KAGfC,EAHe,OAIGtH,mBAAS,CAAC,KAJb,mBAI5BuH,EAJ4B,KAIfC,EAJe,OAOPxH,mBAAS,IAPF,mBAO5ByH,EAP4B,KAOlBC,EAPkB,OAQP1H,mBAAS,IARF,mBAQ5Be,EAR4B,KAQpB4G,EARoB,OCThB,SAACtK,GAAkC,IAApBuK,EAAmB,uDAAd,aAAc,EAC3B5H,mBAAS3C,GADkB,mBAChDwK,EADgD,KACxCC,EADwC,KAOvD,OAJA5G,qBAAU,WACR0G,EAAGC,KACF,CAACA,IAEG,CACLA,EACA,SAAUnD,GAER,IAAMqD,EAAQrD,EAAG9G,OAAOyG,KAClBG,EAA4B,WAAnBE,EAAG9G,OAAOiE,MAAsB6C,EAAG9G,OAAO4G,MAAQE,EAAG9G,OAAO4G,MAC3EsD,GAAU,SAAAE,GAAU,sBAAUA,EAAV,eAAuBD,EAAQvD,QAErDsD,GDG6BG,CAAQ,CACjCnG,SAAU,GACVD,KAAM,GACNpC,OAAQ,GACRsC,SAAU,GACVP,OAAQ,GACRtE,SAAU,GACVoE,OAAQ,GACRY,YAAa,GACbgG,SAAU,GACVC,WAAY,GACZ5G,cAAe,GACfU,kBAAmB,GACnBE,aAAc,GACdnB,IAAK,GACLgB,cAAe,GACfoG,eAAgB,KAzBe,mBAS5BC,EAT4B,KAStBC,EATsB,KA4BnCpH,qBAAU,WACNkG,EAAYX,EAAeC,gBAAgB,eAC5C,IAEHxF,qBAAU,WAAM,4CACZ,sBAAA0B,EAAA,kEACI4E,EADJ,SACyBnE,EAAYG,mBADrC,8EADY,uBAAC,WAAD,wBAIZO,KACD,CAACoD,IAGJjG,qBAAU,WACNC,QAAQC,IAAI,YAAaqG,KAC1B,CAACA,IAEJ,IAKMc,EAAa,SAAC7D,GAChBA,EAAGwB,iBACH,IAAIsC,EAAQ,eAAQH,GACpBG,EAAS3G,KAAO4F,EAChBe,EAASrB,SAAWA,EACpBqB,EAASzH,OAASA,EAClBI,QAAQC,IAAI,OAAQoH,GACpBnF,EAAYC,KAAKkF,IAIrB,OACI,yBAAKnI,UAAU,kBACX,qGAEA,yBAAKA,UAAU,kBACX,kBAAC2D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,UAAQ,EAACC,GAAG,qBAAxB,iDACA,kBAACC,EAAA,EAAD,CACIF,UAAQ,EACRrC,KAAK,OACLsC,GAAG,iBACHE,KAAK,iBACLC,QAAQ,SACRC,MAAM,UACNC,MAAO2C,EACP1C,SAAU,SAACC,GAAS0C,EAAY1C,EAAG9G,OAAO4G,SAEtC+C,EAAY1G,KAAI,SAACsD,GAAD,OACZ,kBAACQ,EAAA,EAAD,CACI1G,IAAKkG,EACLK,MAAOL,GACNA,QAMrB,yBAAK9D,UAAU,kBACX,wFACA,2BAAI8G,IAER,yBAAK9G,UAAU,cACX,0EACA,0BAAMiG,OAAO,GAAGmC,SAAU,SAAC/D,GACvBA,EAAGwB,eAAexB,GAClB+B,EAAeO,cAAc,WAAYK,GACzCD,EAAYC,IAEZhH,UAAU,QACV,2BAAOmE,MAAO6C,EAAa5C,SAAU,SAACC,GAAD,OAAQ4C,EAAkB5C,EAAG9G,OAAO4G,QAAQ3C,KAAK,SACtF,uDAEJ,yBAAKxB,UAAU,iBAtCvB,uBAuC8B,0BAAMiG,OAAO,IACnC,2BAAOC,QAAQ,cAAf,2CACA,2BAAOpC,GAAG,aAAatC,KAAK,WAGpC,0BAAM6G,IAAI,MAAMpC,OAAO,IAAImC,SAAU,SAAC/D,GAAD,OAAQ6D,EAAW7D,KAGpD,yBAAKrE,UAAU,0BACX,kBAACsI,EAAA,EAAD,CACIC,KAAG,EACH1E,UAAQ,EACRW,MAAM,uCACNhD,KAAK,SACLsC,GAAG,MACHE,KAAK,MACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACmE,EAAA,EAAD,CACI1E,GAAG,OACHK,MAAOiD,EACPqB,WAAYrB,EACZsB,QAASnE,EAAYE,UACrBL,SAAU,SAACC,EAAIsE,GAAetB,EAAQsB,EAASC,uBAE/CC,eAAgB,SAACC,GAAD,MAA8B,kBAAXA,GAC5BA,aAAkBC,OAASD,EAAOF,qBAAuB,IAChEI,WAAS,EACTC,eAAgB,gBAAGC,EAAH,EAAGA,SAAH,OACZ,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,WAAY,KAAOH,IAGvCI,YAAa,SAAC5G,GAAD,OACT,kBAAC4F,EAAA,EAAD,iBACQ5F,EADR,CAEI8B,MAAM,wCACNP,QAAQ,WACRmF,MAAO,CAAEG,gBAAiB,uBAIlC1F,UAAQ,IAgBZ,kBAACyE,EAAA,EAAD,CACIzE,UAAQ,EACRW,MAAM,2BACNhD,KAAK,SACLsC,GAAG,WACHE,KAAK,WACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACRW,MAAM,2BACNhD,KAAK,SACLsC,GAAG,WACHE,KAAK,WACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACR2F,WAAY,CACRC,WAAY,CACRC,IAAK,EACLC,IAAK,IAGbnF,MAAM,gEACNoF,YAAY,MACZpI,KAAK,SACLsC,GAAG,SACHE,KAAK,SACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACRW,MAAM,2BACNhD,KAAK,SACLsC,GAAG,SACHE,KAAK,SACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACR2F,WAAY,CACRC,WAAY,CACRC,IAAK,EACLC,IAAK,IAGbnF,MAAM,iCACNhD,KAAK,SACLsC,GAAG,WACHE,KAAK,WACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACR2F,WAAY,CACRC,WAAY,CACRC,IAAK,EACLC,IAAK,IAGbnF,MAAM,2DACNhD,KAAK,SACLsC,GAAG,WACHE,KAAK,WACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACR2F,WAAY,CACRC,WAAY,CACRC,IAAK,EACLC,IAAK,IAGbnF,MAAM,uEACNhD,KAAK,SACLsC,GAAG,SACHE,KAAK,SACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MAErC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACRW,MAAM,oDACNhD,KAAK,SACLsC,GAAG,gBACHE,KAAK,gBACLC,QAAQ,SACRC,MAAM,UACNsF,WAAY,CAERK,eAAgB,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OAAzB,WAEpB3F,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACRW,MAAM,iEACNhD,KAAK,SACLsC,GAAG,gBACHE,KAAK,gBACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACV,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,UAAQ,EAACC,GAAG,qBAAxB,6EACA,kBAACC,EAAA,EAAD,CACIF,UAAQ,EACRW,MAAM,4EACNhD,KAAK,OACLsC,GAAG,oBACHE,KAAK,oBACLC,QAAQ,SACRC,MAAM,UACNC,MAAO6D,EAAKpG,kBACZwC,SAAU,SAACC,GAAS4D,EAAa5D,KAE7BE,EAAY3C,kBAAkBpB,KAAI,SAACsI,GAAD,OAC9B,kBAACxE,EAAA,EAAD,CACI1G,IAAKkL,EAAO3E,MACZA,MAAO2E,EAAO3E,OACb2E,EAAOtE,YAM5B,kBAAC8D,EAAA,EAAD,CACI0B,WAAS,EACTnG,UAAQ,EACRoG,KAAM,EACNzF,MAAM,iCACNhD,KAAK,OACLsC,GAAG,cACHE,KAAK,cACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACiE,EAAA,EAAD,CACIzE,UAAQ,EACRmG,WAAS,EACTC,KAAM,EACNzF,MAAM,0HAINhD,KAAK,OACLsC,GAAG,eACHE,KAAK,eACLC,QAAQ,SACRC,MAAM,UACNE,SAAU,SAACC,GAAS4D,EAAa5D,MACrC,kBAACV,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,UAAQ,EAACC,GAAG,kBAAxB,kCACA,kBAACC,EAAA,EAAD,CACIF,UAAQ,EACRrC,KAAK,OACLsC,GAAG,iBACHE,KAAK,iBACLC,QAAQ,SACRC,MAAM,UACNC,MAAO6D,EAAKD,eACZ3D,SAAU,SAACC,GAAS4D,EAAa5D,KAE7BE,EAAYG,qBAAqBlE,KAAI,SAACsI,GAAD,OACjC,kBAACxE,EAAA,EAAD,CACI1G,IAAKkL,EAAO3E,MACZA,MAAO2E,EAAO3E,OACb2E,EAAOtE,aAOhC,kBAAC,EAAD,CAAkBuB,YA3SV,SAACmE,GACjBpJ,QAAQC,IAAImJ,GACZ5C,EAAU4C,MA0SF,kBAACC,EAAA,EAAD,CAAQjK,QAAS,SAACmE,GAAD,OAAQ6D,EAAW7D,IAAKH,MAAM,WAA/C,gCE5UDkG,OAdf,WACE,OACE,yBAAKpK,UAAU,mBACb,kBAACN,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2K,KAAK,SAASC,UAAYjK,IACjC,kBAAC,IAAD,CAAOgK,KAAK,SAASC,UAAYlH,IACjC,kBAAC,IAAD,CAAOiH,KAAK,QAAQC,UAAYzD,QCJlC0D,GAAcC,YAAgB,CAChCC,UhBNW,WAAmD,IAA/BC,EAA8B,uDAAtB1N,EAAciJ,EAAQ,uCAC7D,OAAQA,EAAOzE,MACX,IAAK,WACD,OAAO,eACAkJ,EADP,CAEIzN,KAAMgJ,EAAOhJ,OAErB,IAAK,cAED,OADA6D,QAAQC,IAAI,UACL,eACA2J,EADP,CAEIvN,QAASuN,EAAMvN,SAEvB,IAAK,aACD,OAAO,eACAuN,EADP,CAEIxN,SAAU+I,EAAO/I,WAEzB,IAAK,UACD,OAAO,eACAwN,EADP,CAEIzN,KAAK,GAAD,mBAAMyN,EAAMzN,MAAZ,CAAkBgJ,EAAO0E,QAErC,IAAK,aACD,OAAO,eACAD,EADP,CAEIzN,KAAMyN,EAAMzN,KAAKuD,KAAI,SAAAmK,GACjB,OAAIA,EAAIpJ,MAAQ0E,EAAO0E,IAAIpJ,IAAY0E,EAAO0E,IACvCA,OAGnB,IAAK,aACD,OAAO,eACAD,EADP,CAEIzN,KAAMyN,EAAMzN,KAAK2N,QAAO,SAAAD,GAAG,OAAIA,EAAIpJ,MAAQ0E,EAAO4E,WAE1D,QACI,OAAOH,MgB3BbI,GAAmBlO,OAAOmO,sCAAwCC,IAClEC,GAAQC,YAAYX,GAAaO,GAAiBK,YAAgBC,OAExEC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,GAAD,QAGRM,SAASC,eAAe,SjByGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7I,MAAK,SAAA8I,GACjCA,EAAaC,iB","file":"static/js/main.aac5ab19.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n    cars: [],\r\n    filterBy: null,\r\n    isDark: false\r\n}\r\n\r\nexport default function CarReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CARS':\r\n            return {\r\n                ...state,\r\n                cars: action.cars\r\n            }\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filterBy: action.filterBy\r\n            }\r\n        case 'ADD_CAR':\r\n            return {\r\n                ...state,\r\n                cars: [...state.cars, action.car]\r\n            }\r\n        case 'UPDATE_CAR':\r\n            return {\r\n                ...state,\r\n                cars: state.cars.map(car => {\r\n                    if (car._id === action.car._id) return action.car;\r\n                    return car;\r\n                })\r\n            }\r\n        case 'REMOVE_CAR':\r\n            return {\r\n                ...state,\r\n                cars: state.cars.filter(car => car._id !== action.carId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n});\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav className=\"main-nav \">\r\n                {!isMobile && <div className=\"left-nav\">\r\n                    <Link to='/trees'><span>Trees Survey</span></Link>\r\n                    <Link to='/form'><span>טופס</span></Link>\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <Link to='/car'><span>Car</span></Link>\r\n                    <Link to='/about'><span>About</span></Link>\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                    <Link to='/'> <img src=\"imgs/logo.png\" alt=\"\" /></Link>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\n\n\nexport const TreesImages = (...props) => {\n\n\n\n    const { trees } = props[0]\n    return (\n        <section className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    <>\n                        {tree.imgUrl && <div className=\"image-card\">\n                            <p>{tree.idx}</p>\n                            <img src={tree.imgUrl} alt=\"tree\" />\n                        </div>}\n                    </>\n                )\n            })}\n        </section>\n\n    )\n}","import React, { useEffect } from \"react\"\n\n\n\n\nexport const TreesTable = (...props) => {\n\n    useEffect(() => {\n        console.log('PROPS', props);\n    }, [props])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, monetaryValue, location, health } = tree\n        return (canopy + monetaryValue + location + health)\n    }\n\n    const calculateMonetaryValue = (tree) => {\n        const { canopy, monetaryValue, location, health } = tree\n        let sum = ((canopy + monetaryValue + location + health) / 5) * 20\n        return sum\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum < 6) return 'yellow'\n        else if (sum > 6 && 12 < sum) return 'grey'\n        else if (sum > 13 && 17 < sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {props[0].trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.monetaryValue}</td>\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                <td>{calculateMonetaryValue(tree)}</td>\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>כריתה</td>\n                                <td>{tree.movingReason}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n\n            </table>\n\n\n        </section>\n    )\n\n\n}\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","import { httpService } from \"./httpService\"\n\n\nasync function save(tree) {\n    await httpService.put(`tree/save`, tree)\n        .then((res) => {\n            console.log(res);\n        })\n\n    // if (tree._id) {\n\n    // }\n    // // let addPet = await storageService.post(STORAGE_KEY, pet)\n    // return addPet\n}\nasync function query(tableId) {\n    let trees = await httpService.get(`tree/`,tableId)\n    console.log(\"🚀 ~ file: treeService.js ~ line 19 ~ query ~ trees\", trees)\n    return trees\n}\n\nasync function queryTableIdList() {\n    let trees = await httpService.get(`tree/tableid`)\n    console.log(\"🥳\", trees)\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    query,\n    queryTableIdList\n}","import React, { useEffect, useState } from 'react'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport {  MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\n\n\n\nexport const TreesSurvey = () => {\n\n    let [trees, setTrees] = useState([])\n    let [currentTableId, setCurrentTableId] = useState('kfar saba')\n    let [tableIdList, setTableIdList] = useState([''])\n\n\n    useEffect(() => {\n        async function queryTrees() {\n            setTableIdList(await treeService.queryTableIdList())\n            setTrees(await treeService.query(currentTableId))\n        }\n        queryTrees()\n    }, [])\n    \n    useEffect(() => {\n        async function queryTrees() {\n        console.log('currentTableId',currentTableId);\n        setTrees(await treeService.query(currentTableId))\n        }\n        queryTrees()\n    }, [currentTableId])\n\n    return (\n\n        <section className=\"main-container trees-survey flex\">\n            <div className=\"select-table\">\n                <p>בחר טבלה: </p>\n                <FormControl>\n                    <InputLabel required id=\"movingPossibility\">בחר טבלה: </InputLabel>\n                    <Select\n                        required\n                        type=\"text\"\n                        id=\"currentTableId\"\n                        name=\"currentTableId\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        value={currentTableId}\n                        onChange={(ev) => { setCurrentTableId(ev.target.value) }}>\n                        {\n                            tableIdList.map((id) => (\n                                <MenuItem\n                                    key={id}\n                                    value={id}>\n                                    {id}\n                                </MenuItem>\n                            ))\n                        }\n                    </Select>\n                </FormControl>\n            </div>\n            <TreesTable trees={trees} />\n            <TreesImages trees={trees} />\n        </section>\n\n\n    )\n\n}","import treeTypes from '../data/treeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    recomandationOptions: recommendationOptions\n}\n","\nfunction uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n\n    const formData = new FormData();\n    formData.append('file', files[0])\n    console.log('ev.target.files[0]):', files[0])\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            console.log(res)\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","import React, {  useState } from \"react\"\nimport { cloudinaryService } from \"../services/cloudinaryService\"\n\nexport const CloudinaryUpload = (...props) => {\n\n    // const [name, setName] = useState('')\n    const [file, setFile] = useState(null)\n    const [isUpload, setIsUpload] = useState(false)\n\n    const sendFile = async ev => {\n        ev.preventDefault()\n        let imgUrlRes = await cloudinaryService.uploadImg(file)\n        setIsUpload(true)\n        setFile(imgUrlRes.url)\n        props[0].onGetImgUrl(imgUrlRes.url)\n    }\n\n    const fileHandler = ev => {\n        setFile(ev.target.files)\n    }\n\n    // const nameHandler = ev => {\n    //     const { value } = ev.target\n    //     setName(value)\n    // }\n\n    return (\n        <section className=\"upload-container\">\n            <form action=\"#\">\n                <div>\n                    <label htmlFor=\"file\"></label>\n                    <input\n                        required\n                        multiple\n                        name=\"file1\"\n                        type=\"file\"\n                        id=\"file\"\n                        onChange={(ev) => { fileHandler(ev) }} />\n                </div>\n                <button onClick={(ev) => sendFile(ev)} >Upload</button>\n            </form>\n            {file &&\n                <div className=\"image-preview\">\n                    <p>Preview</p>\n                    <img src={file} alt=\"image\" />\n                </div>\n            }\n        </section>\n    )\n}\n\n\n\n","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect, useState } from 'react'\nimport { useForm } from '../services/customHooks'\nimport { TextField, Button, MenuItem, InputAdornment, Select, FormControl, Paper, InputLabel } from '@material-ui/core';\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { CloudinaryUpload } from './CloudinaryUpload';\nimport { storageService } from '../services/storageService';\n\n//specious\n\nexport const TreesForm = (...props) => {\n\n    const [surveyId, setSurveyId] = useState('')\n    const [newSurveyId, setNewTableIdList] = useState('')\n    const [survyIdList, setSurvyIdList] = useState([''])\n\n    // const [CurrentSurveyId, setCurrentSurveyId] = useState('')\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n    const [form, handleChange] = useForm({\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        comments: '',\n        totalValue: '',\n        monetaryValue: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: ''\n    })\n\n    useEffect(() => {\n        setSurveyId(storageService.loadFromStorage('surveyId'))\n    }, [])\n\n    useEffect(() => {\n        async function queryTrees() {\n            setSurvyIdList(await treeService.queryTableIdList())\n        }\n        queryTrees()\n    }, [surveyId])\n\n\n    useEffect(() => {\n        console.log('tree type', treeType);\n    }, [treeType])\n\n    const onGetImgUrl = (img) => {\n        console.log(img);\n        setImgUrl(img)\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        let treeCopy = { ...form }\n        treeCopy.type = treeType\n        treeCopy.surveyId = surveyId\n        treeCopy.imgUrl = imgUrl\n        console.log('form', treeCopy);\n        treeService.save(treeCopy)\n    }\n\n\n    return (\n        <div className=\"form-container\">\n            <h1>טופס סקר עצים </h1>\n\n            <div className=\"survey-control\">\n                <FormControl>\n                    <InputLabel required id=\"movingPossibility\">בחר טופס: </InputLabel>\n                    <Select\n                        required\n                        type=\"text\"\n                        id=\"currentTableId\"\n                        name=\"currentTableId\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        value={surveyId}\n                        onChange={(ev) => { setSurveyId(ev.target.value) }}>\n                        {\n                            survyIdList.map((id) => (\n                                <MenuItem\n                                    key={id}\n                                    value={id}>\n                                    {id}\n                                </MenuItem>\n                            ))\n                        }\n                    </Select>\n                </FormControl>\n                <div className=\"current-survey\">\n                    <p>טופס נוכחי: </p>\n                    <p>{surveyId}</p>\n                </div>\n                <div className=\"new-survey\">\n                    <p>טופס חדש</p>\n                    <form action=\"\" onSubmit={(ev) => {\n                        ev.preventDefault(ev)\n                        storageService.saveToStorage('surveyId', newSurveyId)\n                        setSurveyId(newSurveyId)\n                    }}\n                        className=\"flex\">\n                        <input value={newSurveyId} onChange={(ev) => setNewTableIdList(ev.target.value)} type=\"text\" />\n                        <button>בחר</button>\n                    </form>\n                    <div className=\"survey-list\"></div>\n                </div>                    <form action=\"\">\n                    <label htmlFor=\"new-survey\">שם טופס: </label>\n                    <input id=\"new-survey\" type=\"text\" />\n                </form>\n            </div>\n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n\n\n                <div className=\"trees-form flex column\">\n                    <TextField\n                        ran\n                        required\n                        label=\"אינדקס\"\n                        type=\"number\"\n                        id=\"idx\"\n                        name=\"idx\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <Autocomplete\n                        id=\"type\"\n                        value={treeType}\n                        inputValue={treeType}\n                        options={formService.treeTypes}\n                        onChange={(ev, newValue) => { setType(newValue.BinomialNomenclature) }} // TRY DOC \n                        // getOptionLabel={(option) => option.BinomialNomenclature}\n                        getOptionLabel={(option) => typeof option === 'string'\n                            || option instanceof String ? option.BinomialNomenclature : \"\"}\n                        fullWidth\n                        PaperComponent={({ children }) => (\n                            <Paper style={{ background: \"\" }}>{children}</Paper>\n                        )}\n                        // style={{ width: 200, marginTop: 20 }}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                label=\"מין העץ\"\n                                variant=\"outlined\"\n                                style={{ backgroundColor: \"pink !important\" }}\n                            // name={params.}\n                            />\n                        )}\n                        required\n                    />\n                    {/* <Autocomplete\n                        value={treeType}\n                        onChange={(ev, newValue) => {\n                             setType(newValue.BinomialNomenclature) }} // TRY DOC \n                        inputValue={inputValue}\n                        onInputChange={(event, newInputValue) => {\n                            setInputValue(newInputValue);\n                        }}\n                        id=\"controllable-states-demo\"\n                        options={formService.treeTypes}\n                        sx={{ width: 300 }}\n                        renderInput={(params) => <TextField {...params} label=\"Controllable\" />}\n                    /> */}\n\n                    <TextField\n                        required\n                        label=\"כמות\"\n                        type=\"number\"\n                        id=\"quantity\"\n                        name=\"quantity\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        label=\"קוטר\"\n                        type=\"number\"\n                        id=\"diameter\"\n                        name=\"diameter\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        InputProps={{\n                            inputProps: {\n                                max: 5,\n                                min: 0\n                            }\n                        }}\n                        label=\"מצב בריאותי\"\n                        placeholder=\"0-5\"\n                        type=\"number\"\n                        id=\"health\"\n                        name=\"health\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        label=\"גובה\"\n                        type=\"number\"\n                        id=\"height\"\n                        name=\"height\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        InputProps={{\n                            inputProps: {\n                                max: 5,\n                                min: 0\n                            }\n                        }}\n                        label=\"מיקום\"\n                        type=\"number\"\n                        id=\"location\"\n                        name=\"location\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        InputProps={{\n                            inputProps: {\n                                max: 5,\n                                min: 0\n                            }\n                        }}\n                        label=\"ערך מין העץ\"\n                        type=\"number\"\n                        id=\"location\"\n                        name=\"location\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        InputProps={{\n                            inputProps: {\n                                max: 5,\n                                min: 0\n                            }\n                        }}\n                        label=\"ניקוד חופץ עץ\"\n                        type=\"number\"\n                        id=\"canopy\"\n                        name=\"canopy\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n\n                    <TextField\n                        required\n                        label=\"שווי כספי\"\n                        type=\"number\"\n                        id=\"monetaryValue\"\n                        name=\"monetaryValue\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        InputProps={{\n                            // endAdornment: <InputAdornment position=\"start\">₪</InputAdornment>,\n                            startAdornment: <InputAdornment position=\"end\">₪</InputAdornment>,\n                        }}\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        label=\"קוטר שורשים \"\n                        type=\"number\"\n                        id=\"rootsDiameter\"\n                        name=\"rootsDiameter\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <FormControl>\n                        <InputLabel required id=\"movingPossibility\">היתכנות העתקה</InputLabel>\n                        <Select\n                            required\n                            label=\"היתכנות העתקה\"\n                            type=\"text\"\n                            id=\"movingPossibility\"\n                            name=\"movingPossibility\"\n                            variant=\"filled\"\n                            color=\"primary\"\n                            value={form.movingPossibility}\n                            onChange={(ev) => { handleChange(ev) }}>\n                            {\n                                formService.movingPossibility.map((option) => (\n                                    <MenuItem\n                                        key={option.value}\n                                        value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        multiline\n                        required\n                        rows={4}\n                        label=\"תיאור\"\n                        type=\"text\"\n                        id=\"description\"\n                        name=\"description\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        multiline\n                        rows={2}\n                        label=\"סיבת\n                        כריתה או\n                        העתקת\n                        העץ \"\n                        type=\"text\"\n                        id=\"movingReason\"\n                        name=\"movingReason\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <FormControl >\n                        <InputLabel required id=\"recommendation\">המלצה</InputLabel>\n                        <Select\n                            required\n                            type=\"text\"\n                            id=\"recommendation\"\n                            name=\"recommendation\"\n                            variant=\"filled\"\n                            color=\"primary\"\n                            value={form.recommendation}\n                            onChange={(ev) => { handleChange(ev) }}>\n                            {\n                                formService.recomandationOptions.map((option) => (\n                                    <MenuItem\n                                        key={option.value}\n                                        value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))\n                            }\n                        </Select>\n                    </FormControl>\n                </div>\n                <CloudinaryUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\">סיום </Button>\n            </form>\n            {/* <Sheet data={form} /> */}\n        </div>\n    )\n}\n","import { useEffect, useState } from 'react'\r\n\r\nexport const useForm = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      const value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { TreesForm } from './cmps/TreesForm';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/about\" component={ About } />\n        <Route path=\"/trees\" component={ TreesSurvey } />\n        <Route path=\"/form\" component={ TreesForm } />\n        {/* <Route path=\"/\" component={ Home } /> */}\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport CarReducer from './reducers/CarReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    carModule: CarReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}