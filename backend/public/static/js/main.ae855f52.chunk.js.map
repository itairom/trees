{"version":3,"sources":["serviceWorker.js","reducers/TreeReducer.js","assets/svg/menu_black_24dp.svg","services/storageService.js","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","cmps/TreesTable.jsx","services/httpService.js","services/treeService.js","cmps/TreesTypesTable.jsx","pages/TreesSurvey.jsx","services/customHooks.js","services/formService.js","services/cloudinaryService.js","cmps/CloudinaryUpload.jsx","cmps/FormAutocomplete.jsx","cmps/form/input.jsx","cmps/form/FormModal.jsx","cmps/TreesForm.jsx","actions/TreeActions.js","pages/ChooseSurvey.jsx","pages/CreateSurvey.jsx","cmps/TreePreview.jsx","pages/SurveyEditor.jsx","pages/Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","filterBy","isDark","currentSurvey","isTreePreviewShowen","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","_ref3","_ref","svgRef","title","props","height","viewBox","width","ref","ForwardRef","forwardRef","storageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","AppHeader","useState","isMobile","setIsMobile","localSurveyId","setLocalSurveyId","useEffect","storageId","console","log","surveyTitle","changeMobile","prev","className","to","onClick","About","TreesImages","trees","map","tree","imgUrl","_id","idx","src","alt","TreesTable","calculateValue","canopy","health","type","typeValue","calculateMonetaryValue","ValueColor","sum","id","label","quantity","diameter","rootsDiameter","movingPossibility","description","recommendation","movingReason","table","filename","sheet","buttonText","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","then","tableId","surveyId","treeService","save","queryTrees","querySurveyIdList","querySurveyTrees","TreesTypesTable","mapTreeValue","reduceTrees","reduce","obj","name","field","TreesSurvey","useSelector","state","TreeModule","setTrees","setTableIdList","formService","value","treeTypes","palmstreeTypes","recomandationOptions","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","error","CloudinaryUpload","file","setFile","isUpload","setIsUpload","sendFile","img","imgUrlRes","onGetImgUrl","fileHandler","ev","htmlFor","required","multiple","onChange","FormAutocomplete","onSetTreeType","options","display","setDisplay","search","setSearch","treeObj","setTreeObj","placeholder","filter","option","includes","v","Input","InputProps","multiline","rows","TextField","variant","color","helperText","FormModal","HandleiIsModalShown","modal","imgSrc","isShowen","TreesForm","setSurveyId","treeTypeOptions","setTreeTypeOptions","treeType","setType","setImgUrl","validate","fieldValues","values","temp","errors","isLessThenFiveInput","isEmptyInput","mobile","setErrors","every","x","initialFValues","validateOnChange","setValues","handleInputChange","checked","resetForm","useForm","isPalmTree","cb","fields","setFields","prevFields","useHandleModal","isModalShown","submitForm","preventDefault","alert","treeCopy","dir","action","onSubmit","setIsPalmTree","treeTypeObj","inputProps","max","min","FormControl","Select","MenuItem","Button","_setCurrentSurvey","survey","setCurrentSurvey","dispatch","ChooseSurvey","useDispatch","history","useHistory","surveyIdList","setSurveyIdList","currentSurveyId","setCurrentSurveyId","handleOnClickNext","useCallback","push","handleOnClickBack","filterdList","InputLabel","CreateSurvey","handleOnClick","useFormCreateSurvey","surveyDate","surveySummary","handleChange","addNewSurvey","TreePreview","SurveyEditor","isAddingTree","setIsAddingTree","currentSurveyTrees","setCurrentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","localCurrentSurvey","setLocalCurrentSurvey","storageTreeId","Home","App","path","component","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae855f52.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n    filterBy: null,\r\n    isDark: false,\r\n    currentSurvey:{},\r\n    isTreePreviewShowen:false\r\n}\r\n\r\nexport default function TreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_SURVEY':\r\n            return {\r\n                ...state,\r\n                currentSurvey: action.survey\r\n            }\r\n\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'TOGGLE_IS_PREVIEW_TREE':\r\n            return {\r\n                ...state,\r\n                isTreePreviewShowen: !state.isTreePreviewShowen\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n});\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\nimport { storageService } from '../services/storageService'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    const [localSurveyId, setLocalSurveyId] = useState('')\r\n\r\n    useEffect(() => {\r\n        let storageId = storageService.loadFromStorage('surveyId')\r\n        console.log(storageId);\r\n        if(storageId){\r\n            setLocalSurveyId(storageId.surveyTitle)\r\n        }\r\n    }, [])\r\n\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav className=\"main-nav \">\r\n                {!isMobile && <div className=\"left-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                    <a className=\"current-survey\"><span>סקר </span>{localSurveyId}</a>\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <p>סקר <span>{localSurveyId}</span></p>\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\n\n\nexport const TreesImages = (...props) => {\n\n\n\n    const { trees } = props[0]\n    return (\n        <section  className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    < >\n                        {tree.imgUrl && <div key={tree._id} className=\"image-card\">\n                            <p >{tree.idx}</p>\n                            <img src={tree.imgUrl} alt=\"tree\" />\n                        </div>}\n                    </>\n                )\n            })}\n        </section>\n\n    )\n}","import React, { useEffect } from \"react\"\nimport ReactToExcel from 'react-html-table-to-excel'\n\nexport const TreesTable = (...props) => {\n\n    useEffect(() => {\n    }, [props])\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateMonetaryValue = (tree) => {\n        let sum = (calculateValue(tree) / 5) * 20\n        return sum\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'yellow'\n        else if (sum > 6 && 14 > sum) return 'grey'\n        else if (sum > 13 && 17 > sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table \">\n\n            <table id=\"main-table\">\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {props[0].trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type.label}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.type.typeValue}</td>\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                <td>{calculateMonetaryValue(tree)}</td>\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>{tree.recommendation}</td>\n                                <td>{tree.movingReason}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <ReactToExcel\n                className=\"download-table \"\n                table=\"main-table\"\n                filename=\"טבלת סקר עצים\"\n                sheet=\"טבלת סקר עצים\"\n                buttonText=\"הורדה\"\n            />\n        </section>\n    )\n\n\n}\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","import { httpService } from \"./httpService\"\n\n\nasync function save(tree) {\n    await httpService.put(`tree/save`, tree)\n        .then((res) => {\n            console.log(res);\n        })\n\n}\nasync function queryTrees(tableId) {\n    let trees = await httpService.get(`tree/`,tableId)\n    console.log(\"🌲 queryTrees\", trees)\n    return trees\n}\n\nasync function querySurveyIdList() {\n    let trees = await httpService.get(`tree/survey_id_list`)\n    return trees\n}\nasync function querySurveyTrees(surveyId) {\n    let trees = await httpService.get(`tree/survey_trees`,surveyId)\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    queryTrees,\n    querySurveyIdList,\n    querySurveyTrees\n}","import React, { useEffect } from \"react\"\n\n\n\n\nexport const TreesTypesTable = ({ trees }) => {\n\n    useEffect(() => {\n        console.log('PROPS trees', trees);\n        mapTreeValue(trees)\n    }, [trees])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateMonetaryValue = (tree) => {\n        let sum = (calculateValue(tree) / 5) * 20\n        return sum\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum < 6) return 'ערכיות נמוכה'\n        else if (sum > 6 && 12 < sum) return 'ערכיות בינונית'\n        else if (sum > 13 && 17 < sum) return 'ערכיות גבוהה'\n        else return 'גבוהה מאוד'\n    }\n\n\n\n    const mapTreeValue = (trees) => { // work on it\n        let reduceTrees = trees.reduce(function (obj, name) {\n            obj[name.type.label] = {}\n            // obj[name.type.label] = {\n            //     גבוהה מאוד:0,\n            //     בערכיות גבוהה:0,\n            //     grey:0,\n            //     ערכיות נמוכה:0\n            // }\n\n            let field = ValueColor(name)\n            obj[name.type.label][field] = obj[name.type.label][field] ? obj[name.type.label][field]++ : 1;\n\n            // obj[name.type.label][field]++\n            return obj;\n        }, {});\n        console.log('reduceTrees', reduceTrees);\n    }\n\n    // const mapTreeValue = (trees) => { // work on it\n    //     let reduceTrees = trees.reduce(function (obj, name) {\n    //         obj[name.type.BinomialNomenclature] = obj[name.type.BinomialNomenclature] ? ++obj[name.type.BinomialNomenclature] : 1;\n    //         return obj;\n    //     }, {});\n    //     console.log('reduceTrees', reduceTrees);\n    // }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>גבוהה מאוד *ערכיות</th>\n                    <th>**ערכיות גבוהה </th>\n                    <th>בינונית ***ערכיות</th>\n                    <th>נמוכה ****ערכיות</th>\n                    <th>סה״כ</th>\n                </tr>\n                <tbody>\n                    {trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                {/* <td>{tree.monetaryValue}</td> */}\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{calculateMonetaryValue(tree)}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\n","import React, { useEffect, useState } from 'react'\nimport html2pdf from 'html2pdf.js'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\nimport { TreesTypesTable } from '../cmps/TreesTypesTable';\n\nexport const TreesSurvey = () => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    let [trees, setTrees] = useState([])\n    // let [currentTableId, setCurrentTableId] = useState('')\n    let [tableIdList, setTableIdList] = useState([''])\n    const [localSurveyId, setLocalSurveyId] = useState('')\n\n    useEffect(() => {\n\n        async function queryTrees() {\n            setTableIdList(await treeService.querySurveyIdList())\n            setTrees(await treeService.queryTrees(currentSurvey?.surveyTitle))\n            if (Object.keys(currentSurvey).length === 0) {\n                let storageId = storageService.loadFromStorage('surveyId')\n                setTrees(await treeService.queryTrees(storageId?.surveyTitle))\n                setLocalSurveyId(storageId)\n            }\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n        async function queryTrees() {\n            if (Object.keys(currentSurvey).length === 0) {\n                setTrees(await treeService.queryTrees(localSurveyId?.surveyTitle))\n            }\n        }\n        queryTrees()\n    }, [localSurveyId])\n\n\n    // const downloadAsPdf = () => {\n    //     let el = document.querySelector('#main-survey')\n    //     html2pdf(el);\n    // }\n\n    return (\n        <section id=\"main-survey\" className=\"main-container trees-survey flex\">\n            <h1>טבלה סקר <span>{currentSurvey?.surveyTitle||localSurveyId?.surveyTitle}</span></h1>\n\n            <TreesTable trees={trees} />\n            <TreesImages trees={trees} />\n            <TreesTypesTable trees={trees} />\n        </section>\n    )\n}","import { useEffect, useState } from 'react'\r\n\r\nexport function useForm(initialFValues, validateOnChange = false, validate) {\r\n\r\n  const [values, setValues] = useState(initialFValues);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = ev => {\r\n    const { name } = ev.target\r\n    let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n    value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    })\r\n    if (validateOnChange)\r\n      validate({ [name]: value })\r\n  }\r\n\r\n  const resetForm = () => {\r\n    setValues(initialFValues);\r\n    setErrors({})\r\n  }\r\n\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n\r\n  }\r\n}\r\nexport const useFormCreateSurvey = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useError = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: '' }))\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      if (value > 5 || value < 0) {\r\n        setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n      }\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useHandleModal = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (field, value) {\r\n\r\n      console.log('(field,value)', field, value);\r\n      // const field = ev.target.name\r\n      // const value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n","import treeTypes from '../data/treeTypes.json';\nimport palmstreeTypes from '../data/palmstreeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n    ,\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notDefined',\n        label: 'לא מוגדר',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    palmstreeTypes,\n    recomandationOptions: recommendationOptions\n}\n","function uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n    const formData = new FormData();\n    formData.append('file', files[0])\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","import React, { useState } from \"react\"\nimport { cloudinaryService } from \"../services/cloudinaryService\"\n\nexport const CloudinaryUpload = (...props) => {\n\n    // const [name, setName] = useState('')\n    const [file, setFile] = useState(null)\n    const [isUpload, setIsUpload] = useState(false)\n\n    const sendFile = async img => {\n        setIsUpload(true)\n        let imgUrlRes = await cloudinaryService.uploadImg(img)\n        setIsUpload(false)\n        setFile(imgUrlRes.url)\n        props[0].onGetImgUrl(imgUrlRes.url)\n    }\n\n    const fileHandler = ev => {\n        // setFile(ev.target.files)\n        sendFile(ev.target.files)\n    }\n\n    // const nameHandler = ev => {\n    //     const { value } = ev.target\n    //     setName(value)\n    // }\n\n    return (\n        <section className=\"upload-container\">\n            <label htmlFor=\"file\">בחר תמונה</label>\n            <input\n                required\n                multiple\n                name=\"file1\"\n                type=\"file\"\n                id=\"file\"\n                className=\"upload-btn\"\n                onChange={(ev) => { fileHandler(ev) }} />\n            {isUpload &&\n                <img src=\"/imgs/circle_loader.gif\" alt=\"loader\" />\n            }\n            {file &&\n\n                <div className=\"image-preview\">\n                    <p>Preview</p>\n                    <img src={file} alt=\"image\" />\n                </div>\n            }\n        </section>\n    )\n}\n\n\n\n","import React, { useEffect, useState } from 'react'\nimport { formService } from '../services/formService'\n\nexport const FormAutocomplete = ({ onSetTreeType, options }) => {\n\n    const [display, setDisplay] = useState(false)\n    // const [options, setOptions] = useState([])\n    const [search, setSearch] = useState('')\n    const [treeObj, setTreeObj] = useState('')\n\n\n    useEffect(() => {\n        // setOptions(formService.treeTypes)\n    }, [options])\n\n\n\n    useEffect(() => {\n        onSetTreeType(treeObj)\n        setDisplay(false)\n    }, [treeObj])\n\n\n\n    const setTree = (tree) => {\n        setTreeObj(tree)\n        setSearch(tree.label)\n    }\n\n    return (\n        <section className=\"autocomplete-form\">\n            <input onChange={(ev) => { setSearch(ev.target.value) }} value={search} type=\"text\" placeholder=\" מין העץ\" onClick={() => { setDisplay(!display) }} />\n            {display &&\n                <div className=\"autocomplete-container\">\n                    {options.filter((option) => option?.label?.includes(search)).map((v, i) => {\n                        return (\n                            <div onClick={() => { setTree(v) }} className=\"tree-option\" key={v.label}>\n                                <span>{v.label}</span>\n                            </div>\n                        )\n                    })\n                    }\n                </div>\n            }\n        </section>\n    )\n}","import React from 'react'\nimport { TextField } from '@material-ui/core';\n\nexport default function Input(props) {\n\n    const { name, label, value, error = null, onChange, InputProps, id, multiline, rows, placeholder } = props;\n    return (\n        <TextField\n            variant=\"standard\"\n            name={name}\n            // value={value}\n            onChange={onChange}\n            InputProps={InputProps}\n            id={id}\n            color=\"primary\"\n            type=\"number\"\n            {...(error && { error: true, helperText: error })}\n            {...multiline &&\n            {\n                rows: rows,\n                multiline\n            }}\n            // {...placeholder && { placeholder: placeholder }}\n            placeholder={placeholder}\n        />\n    )\n}","import React from 'react'\n\nexport default function FormModal({ HandleiIsModalShown, modal, imgSrc }) {\n    return (\n        <div\n            onClick={() => HandleiIsModalShown(modal.type, !modal.isShowen)}\n            className=\"form-modal health-modal\" >\n            <div className=\"modal-container \">\n                <img src={imgSrc} alt=\"מקרא\" />\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { CloudinaryUpload } from './CloudinaryUpload';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from './FormAutocomplete';\nimport Input from './form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from './form/FormModal';\n\nexport const TreesForm = () => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n\n    const initialFValues = {\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: '',\n        isPalmTree: false\n    }\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n            temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n            temp.recommendation = isEmptyInput(fieldValues.recommendation)\n\n        setErrors({\n            ...temp\n        })\n\n        if (fieldValues === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate);\n\n    const [isModalShown, HandleiIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: ''\n    })\n\n    useEffect(() => {\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n        console.log(currentSurvey);\n    }, [])\n\n    useEffect(() => {\n        console.log('surveyId', surveyId);\n        if (Object.keys(surveyId).length === 0) {\n            let storageId = storageService.loadFromStorage('surveyId')\n            setSurveyId(storageId)\n        }\n    }, [surveyId])\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        if (!imgUrl) alert('יש לבחור תמונה')\n        let treeCopy = { ...values }\n        treeCopy.type = treeType\n        treeCopy.surveyId = surveyId\n        treeCopy.imgUrl = imgUrl\n        if (validate()) {\n            console.log('SUBMIT');\n            treeService.save(treeCopy)\n            resetForm()\n        }\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n    return (\n        <div className=\"form-container\">\n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                <div className=\"trees-form flex column\">\n                    <div className=\"type-form \">\n                        <label htmlFor=\"isPalmTree rtl\">\n                            <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                            עץ דקל\n                        </label>\n                        <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>מספר עץ</p>\n                        <Input\n                            error={errors.idx}\n                            name=\"idx\"\n                            value={values.idx}\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>כמות עצים</p>\n                        <Input\n                            error={errors.quantity}\n                            value={values.quantity}\n                            name=\"quantity\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>קוטר הגזע</p>\n                        <Input\n                            error={errors.diameter}\n                            value={values.diameter}\n                            placeholder=\"קוטר בס״מ של הגזע\"\n                            name=\"diameter\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                    </div>\n\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleiIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                        <Input\n                            error={errors.health}\n                            value={values.health}\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            placeholder=\"0-5\"\n                            id=\"health\"\n                            name=\"health\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                        {isModalShown.health &&\n                            <FormModal\n                                HandleiIsModalShown={HandleiIsModalShown}\n                                modal={{\n                                    type: 'health',\n                                    isShowen: isModalShown.health\n                                }}\n                                imgSrc=\"/imgs/modal/healthModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>גובה העץ</p>\n                        <Input\n                            error={errors.height}\n                            id=\"height\"\n                            name=\"height\"\n                            variant=\"standard\"\n                            placeholder=\"גובה העץ במטרים\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleiIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                        <Input\n                            error={errors.location}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"location\"\n                            name=\"location\"\n                            onChange={handleInputChange} />\n\n                        {isModalShown.location &&\n                            <FormModal\n                                HandleiIsModalShown={HandleiIsModalShown}\n                                modal={{\n                                    type: 'location',\n                                    isShowen: isModalShown.location\n                                }}\n                                imgSrc=\"/imgs/modal/locationModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleiIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                        <Input\n                            error={errors.canopy}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"canopy\"\n                            name=\"canopy\"\n                            onChange={handleInputChange} />\n                        {isModalShown.canopy &&\n                            <FormModal\n                                HandleiIsModalShown={HandleiIsModalShown}\n                                modal={{\n                                    type: 'canopy',\n                                    isShowen: isModalShown.canopy\n                                }}\n                                imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>אזור שורשים מוגן</p>\n                        <Input\n                            error={errors.rootsDiameter}\n                            placeholder=\"אזור שורשים מוגן במטרים\"\n                            id=\"rootsDiameter\"\n                            name=\"rootsDiameter\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>היתכנות העתקה</p>\n                        <FormControl>\n                            <Select\n                                // error={errors.movingPossibility}\n                                type=\"text\"\n                                id=\"movingPossibility\"\n                                name=\"movingPossibility\"\n                                value={values.movingPossibility}\n                                onChange={handleInputChange}>\n                                {formService.movingPossibility.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>המלצה</p>\n                        <FormControl >\n                            <Select\n                                // error={errors.recommendation}\n                                type=\"text\"\n                                id=\"recommendation\"\n                                name=\"recommendation\"\n                                value={values.recommendation}\n                                onChange={handleInputChange}>\n                                {formService.recomandationOptions.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>סיבת כריתה או\n                            העתקת\n                            העץ</p>\n                        <Input\n                            error={errors.movingReason}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"movingReason\"\n                            name=\"movingReason\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>הערות</p>\n                        <Input\n                            error={errors.description}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"description\"\n                            name=\"description\"\n                            onChange={handleInputChange} />\n                    </div>\n                </div>\n                <CloudinaryUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">הוסף עץ </Button>\n            </form>\n        </div>\n    )\n}\n","\r\n// Dispatchers\r\nconst _setFilter = (filterBy) => ({ type: 'SET_FILTER', filterBy });\r\nconst _toggleDark = () => ({ type: 'TOGGLE_DARK' });\r\nconst _toggleIsTreePreviewShowen = () => ({ type: 'TOGGLE_IS_PREVIEW_TREE' });\r\nconst _setCurrentSurvey = (survey) => ({ type: 'SET_CURRENT_SURVEY', survey });\r\n\r\n// THUNK\r\n\r\nexport function setFilter(filterBy) {\r\n    return async (dispatch) => dispatch(_setFilter(filterBy))\r\n}\r\nexport function setCurrentSurvey(survey) {\r\n    return async (dispatch) => dispatch(_setCurrentSurvey(survey))\r\n}\r\nexport function toggleDark() {\r\n    return (dispatch) => dispatch(_toggleDark())\r\n}\r\nexport function toggleIsTreePreviewShowen() {\r\n    return (dispatch) => dispatch(_toggleIsTreePreviewShowen())\r\n}\r\n\r\n// export function saveCar(car) {\r\n//     return async (dispatch, getState) => {\r\n//         const type = car._id ? 'UPDATE_CAR' : 'ADD_CAR';\r\n//         const savedCar = await carService.save(car)\r\n//         dispatch({ type, car: savedCar })\r\n//     }\r\n// }\r\n","import { Link, useHistory } from 'react-router-dom'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSurvey } from '../actions/TreeActions';\nimport { storageService } from '../services/storageService';\n\n\n\nexport const ChooseSurvey = () => {\n\n    let dispatch = useDispatch()\n    const history = useHistory();\n    // let [trees, setTrees] = useState([])\n    let [surveyIdList, setSurveyIdList] = useState([''])\n    let [currentSurveyId, setCurrentSurveyId] = useState('kfar saba')\n    const handleOnClickNext = useCallback(() => history.push('/survey_editor'), [history]);\n    const handleOnClickBack = useCallback(() => history.push('/'), [history]);\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n \n\n    useEffect(() => {\n        async function queryTrees() {\n            setSurveyIdList(await treeService.querySurveyIdList())\n            // setTrees(await treeService.query(currentSurveyId))\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n\n        let filterdList = surveyIdList.filter(tree => { return tree.surveyTitle === currentSurveyId })\n        storageService.saveToStorage('surveyId',filterdList[0])\n        dispatch(setCurrentSurvey(filterdList[0]))\n    }, [currentSurveyId])\n\n\n\n\n    return (\n        <section className=\"choose-section flex\">\n            <h1>בחר סקר</h1>\n            <FormControl>\n                <InputLabel required id=\"movingPossibility\">בחר</InputLabel>\n                <Select\n                    required\n                    type=\"text\"\n                    id=\"currentTableId\"\n                    name=\"currentTableId\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                    value={currentSurveyId}\n                    // defaultValue=\"בחר סקר\"\n                    label=\"לחץ כאן\"\n                    placeholder=\"לחץ כאן\"\n                    onChange={(ev) => { setCurrentSurveyId(ev.target.value) }} >\n                    {\n                        surveyIdList.map((id) => (\n                            <MenuItem\n                                \n                                key={id.surveyTitle}\n                                value={id.surveyTitle}>\n                                {id.surveyTitle}\n                            </MenuItem>\n                        ))\n                    }\n                </Select>\n            </FormControl>\n            <div className=\"next-btn button\"\n                onClick={() => { handleOnClickNext() }} >\n                <p>המשך</p>\n            </div>\n            <div className=\"back-btn button\"\n                onClick={() => { handleOnClickBack() }} >\n                <p>חזור</p>\n            </div>\n        </section>\n    )\n}","import React, { useCallback } from 'react'\nimport { useFormCreateSurvey } from '../services/customHooks'\nimport { Link,useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentSurvey } from '../actions/TreeActions'\nimport { storageService } from '../services/storageService';\n\n\nexport const CreateSurvey = () => {\n\n    \n    const history = useHistory();\n    const handleOnClick = useCallback(() => history.push('/survey_editor'), [history]);\n    const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    const [survey, handleChange] = useFormCreateSurvey({\n        surveyTitle: '',\n        surveyDate: '',\n        surveySummary: ''\n    })\n\n    const addNewSurvey = async () => {\n        await dispatch(setCurrentSurvey(survey))\n        storageService.saveToStorage('surveyId', survey)\n\n        handleOnClick()\n    }\n\n    return (\n        <section className=\"new-survey rtl\">\n            <form action=\"\">\n                <label htmlFor=\"surveyTitle\" onSubmit={(ev) => { ev.preventDefault() }}>\n                    כותרת סקר:\n                    <input\n                        id=\"surveyTitle\"\n                        name=\"surveyTitle\"\n                        type=\"text\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyTitle} />\n                </label>\n                <label htmlFor=\"surveyTitle\">\n                    תאריך סקר:\n                    <input\n                        id=\"surveyDate\"\n                        name=\"surveyDate\"\n                        type=\"date\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyDate} />\n                </label>\n                <div className=\"add-btn button\" onClick={() => { addNewSurvey() }}>הוסף סקר</div>\n\n                <Link to=\"/choose_survey\" >\n                    <div className=\"existing-survey\">חזרה</div>\n                </Link>\n\n            </form>\n        </section>\n\n    )\n}","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\n\nexport const TreePreview = ({ tree }) => {\n\n    const dispatch = useDispatch()\n    // const { currentSurvey,isTreePreviewShowen } = useSelector(state => state.TreeModule)\n\n\n    useEffect(() => {\n    })\n\n    return (\n        <section className=\"main-container tree-preview\">\n            <div className=\"preview-info\">\n                <p>מספר עץ: {tree.idx}</p>\n                <p> סוג עץ: {tree.type.typeValue}</p>\n                <p>קוטר גזע: {tree.diameter}</p>\n                <p>מצב בריאותי: {tree.health}</p>\n                <p>גובה העץ: {tree.height}</p>\n                <p>מיקום העץ: {tree.location}</p>\n                <p>ניקוד חופת העץ: {tree.canopy}</p>\n                <p>היתכנות העתקה: {tree.movingPossibility}</p>\n                <p>המלצה: {tree.recommendation}</p>\n            </div>\n            <img src={tree.imgUrl} alt=\"tree image\" />\n            <div\n                className=\"close-preview\"\n                onClick={(ev) => {\n                    ev.preventDefault()\n                    dispatch(toggleIsTreePreviewShowen())\n                }}\n            ><span>X</span></div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TreesForm } from '../cmps/TreesForm'\nimport { treeService } from '../services/treeService'\nimport { storageService } from '../services/storageService';\nimport { TreePreview } from '../cmps/TreePreview';\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions';\n\nexport const SurveyEditor = () => {\n\n    const dispatch = useDispatch()\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const [isAddingTree, setIsAddingTree] = useState(true)\n    // const [isAddingTree, setIsAddingTree] = useState(false)\n    const [currentSurveyTrees, setCurrentSurveyTrees] = useState([])\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n    const [localCurrentSurvey, setLocalCurrentSurvey] = useState('')\n\n    useEffect(() => {\n        const querySurveyTrees = async () => {\n\n            let trees = await treeService.querySurveyTrees(currentSurvey.surveyTitle)\n            setCurrentSurveyTrees(trees)\n\n            if (Object.keys(currentSurvey).length === 0) {\n                const storageTreeId = storageService.loadFromStorage('surveyId')\n                let trees = await treeService.querySurveyTrees(storageTreeId.surveyTitle)\n                setLocalCurrentSurvey(storageTreeId)\n                setCurrentSurveyTrees(trees)\n            }\n        }\n        querySurveyTrees()\n    }, [])\n\n    return (\n        <section className=\"main-container rtl\">\n            {/* <h1><span>{currentSurvey.surveyTitle}</span> טופס סקר עצים </h1> */}\n            <h1>טופס סקר עצים <span>{localCurrentSurvey.surveyTitle}</span>  </h1>\n            <div className=\"add-tree\">\n                {<p onClick={(ev) => {\n                    ev.preventDefault()\n                    setIsAddingTree(true)\n                }}>הוסף עץ</p> && !isAddingTree}\n                {isAddingTree && <TreesForm />}\n            </div>\n            <div className=\"other-trees\">\n                <h3>עצים נוספים</h3>\n                {currentSurveyTrees && <div className=\"current-trees flex\">\n                    {currentSurveyTrees.map((tree) => {\n                        return <div\n                            key={tree._id}\n                            className=\"tree-index\"\n                            onClick={() => {\n                                setCurrentPreviewTree(tree)\n                                dispatch(toggleIsTreePreviewShowen())\n                            }} >\n                            <p>{tree.idx}</p>\n                            <img src=\"imgs/treeLogo.png\" alt=\"index\" />\n                        </div>\n                    })}\n                    {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} />}\n                </div>}\n            </div>\n        </section>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\n    return (\n        <section className=\"home-container flex \">\n        <Link to=\"/create_survey\" >\n            <div className=\"new-survey\">סקר חדש</div>\n        </Link>\n\n        <Link to=\"/choose_survey\" >\n        <div className=\"existing-survey\">בחר סקר</div>\n        </Link>\n    </section>\n\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { TreesForm } from './cmps/TreesForm';\nimport { ChooseSurvey } from './pages/ChooseSurvey';\nimport { CreateSurvey } from './pages/CreateSurvey';\nimport { SurveyEditor } from './pages/SurveyEditor';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/about\" component={ About } />\n        <Route path=\"/trees\" component={ TreesSurvey } />\n        {/* <Route path=\"/form\" component={ TreesForm } /> */}\n        <Route path=\"/survey_editor\" component={ SurveyEditor } />\n        <Route path=\"/choose_survey\" component={ ChooseSurvey } />\n        <Route path=\"/create_survey\" component={ CreateSurvey } />\n        <Route path=\"/\" component={ Home } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport TreeReducer from './reducers/TreeReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    TreeModule: TreeReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}