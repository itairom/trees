{"version":3,"sources":["serviceWorker.js","reducers/TreeReducer.js","services/httpService.js","services/userService.js","reducers/AppReducer.js","assets/svg/menu_black_24dp.svg","services/storageService.js","cmps/UserInfo.jsx","actions/appActions.js","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","services/customHooks.js","cmps/TreesTable.jsx","services/treeService.js","cmps/TreesTypesTable.jsx","cmps/table/TreeRecommendationTable.jsx","pages/TreesSurvey.jsx","actions/TreeActions.js","pages/CreateSurvey.jsx","pages/ChooseSurvey.jsx","services/formService.js","cmps/FormAutocomplete.jsx","cmps/form/input.jsx","cmps/form/FormModal.jsx","services/cloudinaryService.js","cmps/ImgUpload.jsx","cmps/TreesForm.jsx","cmps/TreePreview.jsx","pages/SurveyEditor.jsx","pages/TreeUpdate.jsx","pages/Home.jsx","cmps/Login.jsx","cmps/Signup.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","filterBy","isDark","currentSurvey","isTreePreviewShowen","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","assign","userService","login","logout","signup","updateUser","getLoggedinUser","JSON","parse","sessionStorage","getItem","getOnlineUsers","getUsers","getById","googleLogin","credentials","user","_saveLocalUser","tokenId","userInfo","clear","id","setItem","stringify","users","onlineUsers","reduce","acc","isOnline","push","_id","console","log","userId","workspace","loggedInUser","loginErr","currPopover","elPos","name","props","isOverlayOpen","_path","_path2","_excluded","_extends","Object","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref","svgRef","title","createElement","height","viewBox","width","fill","ref","d","ForwardRef","forwardRef","storageService","loadFromStorage","val","localStorage","saveToStorage","UserInfo","useState","isShowUserInfo","setIsShowUserInfo","useSelector","state","appModule","dispatch","useDispatch","useEffect","type","onClick","className","username","href","to","src","alt","AppHeader","isMobile","setIsMobile","localSurveyId","setLocalSurveyId","TreeModule","headerRef","useRef","storageId","changeMobile","prev","surveyTitle","About","TreesImages","trees","map","tree","idx","imgUrl","useForm","initialFValues","validateOnChange","validate","values","setValues","errors","setErrors","handleInputChange","ev","value","checked","resetForm","useHandleModal","cb","fields","setFields","field","prevFields","TreesTable","history","useHistory","windowSize","isClient","getSize","innerWidth","undefined","innerHeight","setWindowSize","handleResize","addEventListener","removeEventListener","useWindowSize","calculateValue","canopy","health","typeValue","calculateTreeValue","sum","Math","pow","diameter","quantity","toFixed","calculatePalmTreeValue","ValueColor","label","rootsDiameter","isPalmTree","movingPossibility","description","recommendation","movingReason","table","filename","sheet","buttonText","aria-multiline","then","tableId","treeId","removedTree","surveyId","treeService","save","queryTrees","querySurveyIdList","querySurveyTrees","removeTree","getTreeById","TreesTypesTable","treeTypeObj","setTreeTypeObj","treeTypeKeysArr","setTreeTypeKeysArr","totalvaluesArr","setTotalvaluesArr","mapTreeValue","localTotalvaluesArr","lowPriority","mediumPriority","highPriority","veryHighPriority","typeObj","NTL","treeKeys","objToArr","b","TreeRecommendationTable","TreesSurvey","setTrees","setTableIdList","loggedinUser","_setCurrentSurvey","survey","setCurrentSurvey","CreateSurvey","handleOnClick","useCallback","useFormCreateSurvey","surveyDate","surveySummary","handleChange","addNewSurvey","action","htmlFor","onSubmit","preventDefault","onChange","placeholder","min","max","ChooseSurvey","surveyIdList","setSurveyIdList","currentSurveyId","setCurrentSurveyId","handleOnClickNext","handleOnClickBack","handleOnClickCreate","resp","filterdList","filter","FormControl","InputLabel","required","Select","variant","color","MenuItem","formService","treeTypes","palmstreeTypes","recomandationOptions","FormAutocomplete","onSetTreeType","options","useImperativeHandle","onResetAutocomplete","setTreeObj","setSearch","display","setDisplay","search","treeObj","autoComplete","option","includes","v","Input","error","InputProps","multiline","rows","TextField","helperText","FormModal","HandleiIsModalShown","modal","imgSrc","isShowen","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","ImgUpload","onGetImgUrl","images","setImages","file","secure_url","imageList","addUpdateIndex","maxNumber","dataURLKey","stopPropagation","onImageUpload","isDragging","onImageRemoveAll","onImageUpdate","onImageRemove","dragProps","style","image","index","data_url","TreesForm","setSurveyId","treeTypeOptions","setTreeTypeOptions","treeType","setType","setImgUrl","childRef","fieldValues","temp","isLessThenFiveInput","isEmptyInput","mobile","every","x","isAddingTree","isModalShown","HandleIsModalShown","submitForm","alert","treeCopy","current","inputsRef","document","querySelectorAll","textareaRef","forEach","input","textarea","onResetForm","scrollTo","dir","setIsPalmTree","inputProps","img","Button","TreePreview","isRemove","setIsRemove","SurveyEditor","setIsAddingTree","currentSurveyTrees","setCurrentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","localCurrentSurvey","setLocalCurrentSurvey","storageTreeId","TreeUpdate","useParams","setTree","treeById","setInputRef","setTextAreaRef","mergeTree","goBack","marginBottom","Home","Login","storageLocalUser","onLogin","Yup","password","initialValues","validationSchema","component","autoFocus","Signup","fullname","onSignup","App","path","rootReducer","combineReducers","popoverName","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21b40221.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","\r\nconst initialState = {\r\n    filterBy: null,\r\n    isDark: false,\r\n    currentSurvey:null,\r\n    isTreePreviewShowen:false\r\n}\r\n\r\nexport default function TreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_SURVEY':\r\n            return {\r\n                ...state,\r\n                currentSurvey: action.survey\r\n            }\r\n\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'TOGGLE_IS_PREVIEW_TREE':\r\n            return {\r\n                ...state,\r\n                isTreePreviewShowen: !state.isTreePreviewShowen\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","\nimport { httpService } from './httpService'\n\nexport const userService = {\n    login,\n    logout,\n    signup,\n    updateUser,\n    getLoggedinUser,\n    getOnlineUsers,\n    getUsers,\n    getById,\n    googleLogin\n}\n\nasync function login(credentials) {\n    try {\n        const user = await httpService.post('auth/login', credentials)\n        if (user) return _saveLocalUser(user)\n    } catch (err) {\n        throw err\n    }\n}\n\nasync function googleLogin(tokenId) {\n    try {\n        const user = await httpService.post('auth/googlelogin', { tokenId })\n        if (user) return _saveLocalUser(user)\n    } catch (err) {\n        throw err\n    }\n}\n\nasync function signup(userInfo) {\n    try {\n        const user = await httpService.post('auth/signup', userInfo)\n        return _saveLocalUser(user)\n    } catch (err) {\n        throw err\n    }\n}\n\nasync function logout(user) {\n    try {\n        sessionStorage.clear()\n        return await httpService.post('auth/logout', user)\n    } catch (err) {\n        throw err\n    }\n}\n\nasync function updateUser(user) {\n    try {\n        await httpService.put(`user/${user.id}`, user)\n    } catch (err) {\n        throw err\n    }\n}\n\nfunction _saveLocalUser(user) {\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\n    return user\n}\n\nfunction getLoggedinUser() {\n    let user = JSON.parse(sessionStorage.getItem('loggedinUser' || null));\n    return user\n}\n\nasync function getOnlineUsers() {\n    try {\n        const users = await getUsers()\n        const onlineUsers = users.reduce((acc, user) => {\n            if (user.isOnline) {\n                acc.push(user._id)\n            }\n            return acc\n        }, [])\n        return onlineUsers\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nasync function getUsers() {\n    try {\n        return await httpService.get(`user`)\n    } catch (err) {\n        throw err\n    }\n}\n\nasync function getById(userId) {\n    try {\n        return httpService.get(`user/${userId}`)\n    } catch (err) {\n        throw err\n    }\n}\n\n\n","import { userService } from '../services/userService'\n\nconst initialState = {\n    workspace: [],\n    // loggedInUser: userService.getLoggedinUser(),\n    loggedInUser: {\"username\":\"itairom\"},\n    onlineUsers: [],\n    loginErr: null,\n    currPopover: {\n        elPos: null,\n        name: '',\n        props: null\n    },\n    isOverlayOpen: false,\n}\n\nexport function AppReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'SET_USER':\n            return { ...state, loggedInUser: action.user, loginErr: null }\n        case 'SET_ONLINE_USERS':\n            return { ...state, onlineUsers: [...action.onlineUsers] }\n        case 'LOGIN_ERR':\n            return { ...state, loginErr: action.err }\n        case 'SET_POPOVER':\n            return { ...state, currPopover: { name: action.popoverName, elPos: action.elPos, props: action.props }, isOverlayOpen: true }\n        case 'CLOSE_POPOVER':\n            return { ...state, currPopover: { name: '', elPos: null, props: null }, isOverlayOpen: false }\n        default:\n            return state\n    }\n}","var _path, _path2;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0V0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { onLogout } from \"../actions/appActions\";\nimport { storageService } from \"../services/storageService\";\n\n\nexport function UserInfo() {\n\n    const [isShowUserInfo, setIsShowUserInfo] = useState(false)\n\n    const { loggedInUser, loginErr } = useSelector(state => state.appModule)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        console.log('loginErr', loginErr);\n    }, [loginErr])\n\n    const logout = () => {\n        storageService.saveToStorage('surveyId', null) // Reset current survey\n        dispatch(onLogout(loggedInUser))\n    }\n\n    return (\n        <div onClick={() => { setIsShowUserInfo(!isShowUserInfo) }} className=\"login-profile\">\n            {isShowUserInfo &&\n                <div className=\"user-dropdown\">\n                    <div className=\"dropdown-list\">\n                        <p>{loggedInUser?.username}</p>\n                        {(loggedInUser) &&\n                            <div className=\"\">\n                                {/* <Link to='/profile' >\n                                    <span>Profile</span>\n                                </Link> */}\n                            </div>\n                        }\n                        {(loggedInUser) &&\n                            <a href=\"\" onClick={() => logout()}>Logout</a>\n                        }\n                        {(!loggedInUser) && <Link to='/login' >\n                            <span>Login</span>\n                        </Link>}\n                    </div>\n                </div>}\n            <img className=\"profile-icon\" src=\"./imgs/header/user.svg\" alt=\"icon\" />\n        </div>\n        // <div className=\"user-info flex column grey\">\n        //     <p>{loggedInUser?.username}</p>\n        //     {!loggedInUser && <NavLink to=\"/login\">התחבר</NavLink>}\n        //     {loggedInUser && <button onClick={() => { logout() }}>Logout</button>}\n        // </div>\n    )\n}\n","import { userService } from '../services/userService.js'\n// import { socketService } from '../../services/socket.service.js'\n\nexport function onGoogleLogin(tokenId) {\n    return async dispatch => {\n        try {\n            const user = await userService.googleLogin(tokenId)\n            dispatch({ type: 'SET_USER', user })\n            // socketService.emit('user-watch', user._id)\n        } catch (err) {\n            console.log('UserActions: err in login', err)\n        }\n    }\n}\n\nexport function onLogin(credentials) {\n    \n    return async dispatch => {\n        try {\n            const user = await userService.login(credentials)\n            dispatch({ type: 'SET_USER', user })\n            // socketService.emit('user-watch', user._id)\n        } catch (error) {\n            console.log(error.response)\n            const { err } = error.response.data\n            dispatch({ type: 'LOGIN_ERR', err })\n        }\n    }\n}\n\nexport function onSignup(userInfo) {\n    return async dispatch => {\n        try {\n            const user = await userService.signup(userInfo)\n            dispatch({ type: 'SET_USER', user })\n        } catch (err) {\n            console.log('UserActions: err in signup', err)\n        }\n    }\n}\n\nexport function onLogout(user) {\n    return async dispatch => {\n        try {\n            // socketService.emit('user endSession', user._id)\n            await userService.logout(user)\n            // dispatch({ type: 'UPDATE_ONLINE_USERS', userId })\n            dispatch({ type: 'SET_USER', user: null })\n        } catch (err) {\n            console.log('UserActions: err in logout', err)\n        }\n    }\n}\n\nexport function openPopover(popoverName, elPos, props) {\n    return dispatch => {\n        const action = {\n            type: 'SET_POPOVER',\n            popoverName,\n            elPos,\n            props\n        }\n        dispatch(action)\n    }\n}\n\nexport function closePopover() {\n    return dispatch => {\n        const action = {\n            type: 'CLOSE_POPOVER',\n        }\n        dispatch(action)\n    }\n}\n\nexport function updateOnlineUsers(onlineUsers) {\n    return async dispatch => {\n        try {\n            dispatch({ type: 'SET_ONLINE_USERS', onlineUsers })\n        } catch (err) {\n            console.log('UserActions: err in login', err)\n        }\n    }\n}\n","import React, { useEffect, useState } from 'react'\r\nimport { useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\nimport { storageService } from '../services/storageService'\r\nimport { UserInfo } from './UserInfo'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    // const [isShowUserInfo, setIsShowUserInfo] = useState(false)\r\n    const [localSurveyId, setLocalSurveyId] = useState(null)\r\n    const { currentSurvey } = useSelector(state => state.TreeModule)\r\n    const { loggedInUser } = useSelector(state => state.appModule)\r\n    const headerRef = useRef()\r\n\r\n    useEffect(() => {\r\n        // window.addEventListener('scroll', handleScroll)\r\n        let storageId = storageService.loadFromStorage('surveyId')\r\n        if (storageId) {\r\n            setLocalSurveyId(storageId)\r\n        }\r\n\r\n        return () => {\r\n            // window.removeEventListener('scroll', handleScroll)\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currentSurvey) {\r\n            setLocalSurveyId(currentSurvey)\r\n        }\r\n    }, [currentSurvey])\r\n\r\n    const handleScroll = () => {\r\n        if (window.pageYOffset > 40) {\r\n            headerRef.current.className = 'main-nav fixed'\r\n        } else {\r\n            headerRef.current.className = 'main-nav'\r\n        }\r\n    }\r\n\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav ref={headerRef} className=\"main-nav\">\r\n                { !isMobile && <div className=\"left-nav \">\r\n                {/* {loggedInUser && !isMobile && <div className=\"left-nav \"> */}\r\n                    <p className=\"current-survey\"><span>סקר</span> {localSurveyId?.surveyTitle}</p>\r\n                    <Link to='/trees'><span>סקר סופי</span></Link>\r\n                    <Link to='/'><span>בחר סקר</span></Link>\r\n                    {localSurveyId && <Link to='/survey_editor'><span>הוספת עץ</span></Link>}\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <p>סקר <span>{localSurveyId?.surveyTitle}</span></p>\r\n                    <Link to='/trees'><span>סקר סופי</span></Link>\r\n                    <Link to='/'><span>בחר סקר</span></Link>\r\n                    {localSurveyId && <Link to='/survey_editor'><span>הוספת עץ</span></Link>}\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                    <UserInfo />\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\nexport const TreesImages = (...props) => {\n\n    const { trees } = props[0]\n    return (\n        <section className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    <div key={tree._id} className=\"image-card pointer\">\n                        <p >{tree.idx}</p>\n                        {tree.imgUrl !== '' && <img key={tree._id} src={tree.imgUrl} alt=\"tree\" />}\n                        {tree.imgUrl === '' && <img key={tree._id} src=\"imgs/tree_silhouette.png\" alt=\"tree\" />}\n                    </div>\n                )\n            })}\n        </section>\n\n    )\n}","import { useEffect, useState } from 'react'\r\n\r\nexport function useForm(initialFValues, validateOnChange = false, validate) {\r\n  const [values, setValues] = useState(initialFValues);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = ev => {\r\n    const { name } = ev.target\r\n    let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n    value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    })\r\n    if (validateOnChange)\r\n      validate({ [name]: value })\r\n  }\r\n\r\n  const resetForm = () => {\r\n    setValues(initialFValues);\r\n    setErrors({})\r\n  }\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n  }\r\n}\r\n\r\nexport const useFormCreateSurvey = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n  // const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n\r\n  }, [fields,cb])\r\n\r\n  return [\r\n\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useError = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields,cb])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: '' }))\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      if (value > 5 || value < 0) {\r\n        setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n      }\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useHandleModal = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields,cb])\r\n\r\n  return [\r\n    fields,\r\n    function (field, value) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n\r\nexport const useGeolocation = () => {\r\n\r\n  const [location, setLocation] = useState({\r\n    isReady: false,\r\n    coordinates: {\r\n      lng: '', lat: ''\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    \r\n    navigator.geolocation.getCurrentPosition(onSucsess, onError)\r\n  }, [])\r\n\r\n  const onSucsess = (position) => {\r\n    setLocation({\r\n      isReady: true,\r\n      coordinates: {\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude\r\n      }\r\n    })\r\n  }\r\n\r\n  const onError = (err) => {\r\n    setLocation({\r\n      isReady: true,\r\n      err\r\n    })\r\n\r\n  };\r\n\r\n  return location\r\n}\r\n\r\nexport default function useWindowSize() {\r\n  const isClient = typeof window === 'object';\r\n\r\n  function getSize() {\r\n    return {\r\n      width: isClient ? window.innerWidth : undefined,\r\n      height: isClient ? window.innerHeight : undefined\r\n    };\r\n  }\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return false;\r\n    }\r\n\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n}","import React, { useEffect, useState } from \"react\"\nimport ReactToExcel from 'react-html-table-to-excel'\nimport { useHistory } from \"react-router\"\nimport useWindowSize from \"../services/customHooks\"\n\nexport const TreesTable = ({ trees }) => {\n\n    const [isMobile, setIsMobile] = useState(false)\n    const history = useHistory()\n\n    useEffect(() => {\n        console.log(trees);\n    }, [trees])\n\n    const windowSize = useWindowSize()\n\n    useEffect(() => {\n        windowSize.width < 500 ? setIsMobile(true) : setIsMobile(false)\n    }, [windowSize])\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateTreeValue = (tree) => {\n        const sum = (((tree.location * +tree.type.typeValue * tree.health) / 5) * (Math.pow((tree.diameter / 2), 2) * 3.14) / 5) * 20\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const calculatePalmTreeValue = (tree) => {\n        const sum = (tree.height * ((tree.location / 5 * +tree.type.typeValue / 5 * +tree.health / 5))) * 1500\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'yellow'\n        else if (sum > 6 && 14 > sum) return 'grey'\n        else if (sum > 13 && 17 > sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table \">\n             <table id=\"main-table\">\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type.label}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.type.typeValue}</td>\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                {!tree.isPalmTree && <td>{calculateTreeValue(tree)}</td>}\n                                {tree.isPalmTree && <td>{calculatePalmTreeValue(tree)}</td>}\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>{tree.recommendation}</td>\n                                <td>{tree.movingReason}</td>\n                                <div\n                                    onClick={() => { history.push(`tree_update/${tree._id}`) }}\n                                    className=\"edit-btn btn\">עריכה</div >\n                            </tr>\n                        )\n                    })}\n                </tbody>\n                <ReactToExcel\n                className=\"download-table \"\n                table=\"main-table\"\n                filename=\"טבלת סקר עצים\"\n                sheet=\"טבלת סקר עצים\"\n                buttonText=\"הורדה\"\n            />\n            </table>\n\n             <section className=\"mobile-table\">\n                {trees?.map((tree) => {\n                    return (\n                        <div className=\"mobile-tree-card\" key={tree._id}>\n                            <div className=\"flex\">\n                                <p>אינדקס</p>\n                                <p>{tree.idx}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>סוג עץ</p>\n                                <p>{tree.type.label}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p> כמות</p>\n                                <p>{tree.quantity}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>גובה</p>\n                                <p>{tree.height}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>קוטר</p>\n                                <p>{tree.diameter}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>מצב בריאותי</p>\n                                <p>{tree.health}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>מיקום</p>\n                                <p>{tree.location}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ערך עץ</p>\n                                <p>{tree.type.typeValue}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ניקוד חופת עץ</p>\n                                <p>{tree.canopy}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ערך עץ</p>\n                                <p className={ValueColor(tree)}>{calculateValue(tree)}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>קוטר שורשרים</p>\n                                <p>{tree.rootsDiameter}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>שווי כספי</p>\n                                {!tree.isPalmTree && <p>{calculateTreeValue(tree)}</p>}\n                                {tree.isPalmTree && <p>{calculatePalmTreeValue(tree)}</p>}\n                            </div>\n                            <div className=\"flex\">\n                                <p>אפשרות העתקה</p>\n                                <p>{tree.movingPossibility}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>תיאור</p>\n                                <p aria-multiline=\"true\">{tree.description}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>המלצה</p>\n                                <p>{tree.recommendation}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>סיבת העברה</p>\n                                <p>{tree.movingReason}</p>\n                            </div>\n                            <div\n                                onClick={() => { history.push(`tree_update/${tree._id}`) }}\n                                className=\"edit-btn btn\">עריכה</div >\n                        </div>\n                    )\n                })\n                \n            }\n           {isMobile&& <ReactToExcel\n                className=\"download-table \"\n                table=\"main-table\"\n                filename=\"טבלת סקר עצים\"\n                sheet=\"טבלת סקר עצים\"\n                buttonText=\"הורדה\"\n            />}\n            </section>\n        </section>\n    )\n\n\n}\n","import { httpService } from \"./httpService\"\n\n\nasync function save(tree, user) {\n    await httpService.put(`tree/save`, [tree, user])\n        .then((res) => {\n            console.log(res);\n        })\n\n}\nasync function queryTrees(tableId, username) {\n    let trees = await httpService.get(`tree/`, [tableId, username])\n    return trees\n}\nasync function getTreeById(treeId,username) {\n    let tree = await httpService.get(`tree/${treeId}&${username}`)\n    return tree\n}\nasync function removeTree(treeId, username) {\n    let removedTree = await httpService.delete(`tree/${treeId}&${username}`)\n    return removedTree\n}\n\nasync function querySurveyIdList(loggedInUser) {\n    let trees = await httpService.get(`tree/survey_id_list`, loggedInUser)\n    return trees\n}\nasync function querySurveyTrees(surveyId, username) {\n    let trees = await httpService.get(`tree/survey_trees`, [surveyId, username])\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    queryTrees,\n    querySurveyIdList,\n    querySurveyTrees,\n    removeTree,\n    getTreeById\n}","import React, { useEffect, useState } from \"react\"\n\nexport const TreesTypesTable = ({ trees }) => {\n\n    const [treeTypeObj, setTreeTypeObj] = useState([])\n    const [treeTypeKeysArr, setTreeTypeKeysArr] = useState([])\n    const [totalvaluesArr, setTotalvaluesArr] = useState({})\n\n    useEffect(() => {\n        mapTreeValue(trees)\n    }, [trees])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'lowPriority'\n        else if (sum > 6 && 14 > sum) return 'mediumPriority'\n        else if (sum > 13 && 17 > sum) return 'highPriority'\n        else return 'veryHighPriority'\n    }\n\n\n    const getTotalvaluesArr = () => {\n        return (\n            {\n                lowPriority: 0,\n                mediumPriority: 0,\n                highPriority: 0,\n                veryHighPriority: 0\n            }\n        )\n    }\n\n\n    const mapTreeValue = (trees) => { // improve the code!\n        let localTotalvaluesArr = getTotalvaluesArr()\n        let typeObj = {}\n        for (let i = 0; i < trees.length; i++) {\n            let NTL = trees[i].type.label\n            let value = ValueColor(trees[i])\n            if (!typeObj.hasOwnProperty(NTL)) {\n                let NTL = trees[i].type.label\n                typeObj[NTL] = {\n                    'highPriority': 0,\n                    'lowPriority': 0,\n                    'mediumPriority': 0,\n                    'veryHighPriority': 0,\n                    'total': 0\n                }\n            }\n            ++localTotalvaluesArr[value]\n            ++typeObj[NTL][value]\n            ++typeObj[NTL]['total']\n        }\n\n        // console.log(\"🚀 ~ file: TreesTypesTable.jsx ~ line 54 ~ mapTreeValue ~ localTotalvaluesArr\", localTotalvaluesArr)\n        const treeKeys = Object.keys(typeObj)\n        const objToArr = Object.values(typeObj)\n        setTreeTypeObj(objToArr)\n        setTreeTypeKeysArr(treeKeys)\n        setTotalvaluesArr(localTotalvaluesArr)\n    }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th className=\"red\">ערכיות גבוהה מאוד **</th>\n                    <th className=\"green\">ערכיות גבוהה **</th>\n                    <th className=\"grey\">ערכיות בינונית **</th>\n                    <th className=\"yellow\">ערכיות נמוכה **</th>\n                    <th className=\"\">סה״כ</th>\n                </tr>\n                <tbody>\n                    {treeTypeKeysArr && treeTypeObj?.map((tree, idx) => {\n                        return (\n                            <tr key={tree._id}>\n                                {<td>{treeTypeKeysArr[idx]}</td>}\n                                {<td>{tree['veryHighPriority']}</td>}\n                                {<td>{tree['highPriority']}</td>}\n                                {<td>{tree['mediumPriority']}</td>}\n                                {<td>{tree['lowPriority']}</td>}\n                                {<td>{tree['total']}</td>}\n                            </tr>\n                        )\n                    })}\n                    <tr key='total-values'>\n                        {<td>סה״ב</td>}\n                        {<td>{totalvaluesArr['veryHighPriority']}</td>}\n                        {<td>{totalvaluesArr['highPriority']}</td>}\n                        {<td>{totalvaluesArr['mediumPriority']}</td>}\n                        {<td>{totalvaluesArr['lowPriority']}</td>}\n                        {<td>{Object.values(totalvaluesArr).reduce((a, b) => a + b, 0)}</td>}\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\n","import React, { useEffect } from \"react\"\n\nexport function TreeRecommendationTable({ trees }) {\n\n\n  useEffect(() => {\n    console.log('trees', trees);\n  }, [])\n  const calculateValue = (tree) => {\n    const { canopy, location, health } = tree\n    const { typeValue } = tree.type\n    return (+canopy + +typeValue + +location + +health)\n  }\n\n  // const calculateMonetaryValue = (tree) => {\n  //     let sum = (calculateValue(tree) / 5) * 20\n  //     return sum\n  // }\n\n  // const ValueColor = (tree) => {\n  //   let sum = calculateValue(tree)\n  //   if (sum <= 6) return 'lowPriority'\n  //   else if (sum > 6 && 14 > sum) return 'mediumPriority'\n  //   else if (sum > 13 && 17 > sum) return 'highPriority'\n  //   else return 'veryHighPriority'\n  // }\n\n\n  const getTotalvaluesArr = () => {\n    return (\n      {\n        preserve: 0,\n        relocation: 0,\n        amputation: 0,\n        notDefined: 0,\n        total: 0\n      }\n    )\n  }\n\n  const mapTreeValue = (trees) => { // improve the code!\n    let localTotalvaluesArr = getTotalvaluesArr()\n    let typeObj = {}\n    for (let i = 0; i < trees.length; i++) {\n      const { recommendation } = trees[i]\n      // let value = ValueColor(trees[i])\n      if (!typeObj.hasOwnProperty(recommendation)) {\n        const { recommendation } = trees[i]\n        // let NTL = trees[i].type.label\n        typeObj[recommendation] = {\n          'preserve': 0,\n          'relocation': 0,\n          'amputation': 0,\n          'notDefined': 0,\n          'total': 0\n        }\n      }\n      ++localTotalvaluesArr[i]\n      ++typeObj[recommendation][i]\n      ++typeObj[recommendation]['total']\n    }\n  }\n\n  return (\n    <section className=''>\n\n    </section>\n  )\n}","\nimport React, {  useEffect, useState } from 'react'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\nimport { TreesTypesTable } from '../cmps/TreesTypesTable';\nimport { TreeRecommendationTable } from '../cmps/table/TreeRecommendationTable';\n// const TreesTypesTable = lazy(() => import('../cmps/TreesTypesTable'))\n\nexport const TreesSurvey = () => {\n    \n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const { loggedInUser } = useSelector(state => state.appModule)\n    let [trees, setTrees] = useState([])\n    let [tableIdList, setTableIdList] = useState([''])\n    const [localSurveyId, setLocalSurveyId] = useState('')\n    \n    useEffect(() => {\n        \n        async function queryTrees() {\n            console.log(loggedInUser,'loggedInUser');\n            setTableIdList(await treeService.querySurveyIdList(loggedInUser))\n            setTrees(await treeService.queryTrees(currentSurvey?.surveyTitle,loggedInUser?.username))\n            if (!currentSurvey) {\n                let storageId = await storageService.loadFromStorage('surveyId')\n                let loggedinUser = await storageService.loadFromStorage('loggedinUser')\n                if (storageId) {\n                    setTrees(await treeService.queryTrees(storageId.surveyTitle,loggedinUser.username))\n                    setLocalSurveyId(storageId)\n                }\n            }\n        }\n        queryTrees()\n    }, [])\n    \n    useEffect(() => {\n        async function queryTrees() {\n            if (currentSurvey){\n                setTrees(await treeService.queryTrees(localSurveyId?.surveyTitle))\n            }\n        }\n        queryTrees()\n    }, [localSurveyId])\n    \n    useEffect(() => {\n        \n    },[currentSurvey,loggedInUser])\n\nuseEffect(()=>{\n    console.log('trees',trees);\n},[trees])\n\n    return (\n        <section id=\"main-survey\" className=\"main-container   flex\">\n            <h1>טבלה סקר <span>{currentSurvey?.surveyTitle || localSurveyId?.surveyTitle}</span></h1>\n            <TreesTable trees={trees} />\n            <TreesImages trees={trees} />\n            {/* <Suspense fallback={<h1>Loading</h1>} > */}\n                <TreesTypesTable trees={trees} />\n            {/* </Suspense> */}\n            <TreeRecommendationTable trees={trees} />\n            {/* <TreeMap text=\"mapmap\" /> */}\n        </section>\n    )\n}","\r\n// Dispatchers\r\nconst _setFilter = (filterBy) => ({ type: 'SET_FILTER', filterBy });\r\nconst _toggleDark = () => ({ type: 'TOGGLE_DARK' });\r\nconst _toggleIsTreePreviewShowen = () => ({ type: 'TOGGLE_IS_PREVIEW_TREE' });\r\nconst _setCurrentSurvey = (survey) => ({ type: 'SET_CURRENT_SURVEY', survey });\r\n\r\n// THUNK\r\n\r\nexport function setFilter(filterBy) {\r\n    return async (dispatch) => dispatch(_setFilter(filterBy))\r\n}\r\nexport function setCurrentSurvey(survey) {\r\n    return async (dispatch) => dispatch(_setCurrentSurvey(survey))\r\n}\r\nexport function toggleDark() {\r\n    return (dispatch) => dispatch(_toggleDark())\r\n}\r\nexport function toggleIsTreePreviewShowen() {\r\n    return (dispatch) => dispatch(_toggleIsTreePreviewShowen())\r\n}\r\n\r\n// export function saveCar(car) {\r\n//     return async (dispatch, getState) => {\r\n//         const type = car._id ? 'UPDATE_CAR' : 'ADD_CAR';\r\n//         const savedCar = await carService.save(car)\r\n//         dispatch({ type, car: savedCar })\r\n//     }\r\n// }\r\n","import React, { useCallback } from 'react'\nimport { useFormCreateSurvey } from '../services/customHooks'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentSurvey } from '../actions/TreeActions'\nimport { storageService } from '../services/storageService';\n\n\nexport function CreateSurvey () {\n\n\n    const history = useHistory();\n    const handleOnClick = useCallback(() => history.push('/survey_editor'), [history]);\n    const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    const [survey, handleChange] = useFormCreateSurvey({\n        surveyTitle: '',\n        surveyDate: '',\n        surveySummary: ''\n    })\n\n    const addNewSurvey = async () => {\n        await dispatch(setCurrentSurvey(survey))\n        storageService.saveToStorage('surveyId', survey)\n        handleOnClick()\n    }\n\n    return (\n        <section className=\"new-survey rtl\">\n            <form action=\"\">\n                <label htmlFor=\"surveyTitle\" onSubmit={(ev) => { ev.preventDefault() }}>\n                    כותרת סקר:\n                    <input\n                        id=\"surveyTitle\"\n                        name=\"surveyTitle\"\n                        type=\"text\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyTitle} />\n                </label>\n                <label htmlFor=\"surveyTitle\">\n                    תאריך סקר:\n                    <input\n                        id=\"surveyDate\"\n                        name=\"surveyDate\"\n                        type=\"date\"\n                        placeholder=\"dd-mm-yyyy\"\n                        min=\"1997-01-01\"\n                        max=\"2030-12-31\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyDate} />\n                </label>\n                <div className=\"add-btn button\" onClick={() => { addNewSurvey() }}>הוסף סקר</div>\n\n                <Link to=\"/choose_survey\" >\n                    <div className=\"existing-survey\">חזרה</div>\n                </Link>\n\n            </form>\n        </section>\n\n    )\n}","import { useHistory } from 'react-router-dom'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSurvey } from '../actions/TreeActions';\nimport { storageService } from '../services/storageService';\nimport { CreateSurvey } from '../pages/CreateSurvey';\n\n\n\nexport const ChooseSurvey = () => {\n\n    let dispatch = useDispatch()\n    const history = useHistory();\n    let [surveyIdList, setSurveyIdList] = useState([])\n    let [currentSurveyId, setCurrentSurveyId] = useState({})\n    const handleOnClickNext = useCallback(() => history.push('/survey_editor'), [history]);\n    const handleOnClickBack = useCallback(() => history.push('/'), [history]);\n    const handleOnClickCreate = useCallback(() => history.push('/create_survey'), [history]);\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const { loggedInUser, loginErr } = useSelector(state => state.appModule)\n\n\n    useEffect(() => {\n        (async () => {\n            if (loggedInUser) {\n                const resp = await treeService.querySurveyIdList(loggedInUser)\n                console.log(\"🚀 ~ file: ChooseSurvey.jsx ~ line 29 ~ resp\", resp)\n                setSurveyIdList(resp)\n            }\n        })()\n    }, [])\n\n    useEffect(() => {\n        let filterdList = surveyIdList.filter(tree => { return tree.surveyTitle === currentSurveyId })\n        if (filterdList.length) {\n            console.log(\"🚀 ~ file: ChooseSurvey.jsx ~ line 46 ~ useEffect ~ filterdList\", filterdList)\n            storageService.saveToStorage('surveyId', filterdList[0])\n            dispatch(setCurrentSurvey(filterdList[0]))\n        }\n    }, [currentSurveyId])\n\n\n\n\n    return (\n        <section className=\"choose-section flex\">\n            {(surveyIdList.length !== 0) && <>\n                <h1>בחר סקר</h1>\n                <FormControl>\n                    <InputLabel required id=\"movingPossibility\">בחר</InputLabel>\n                    <Select\n                        required\n                        type=\"text\"\n                        id=\"currentTableId\"\n                        name=\"currentTableId\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        value={currentSurveyId}\n                        label=\"לחץ כאן\"\n                        placeholder=\"לחץ כאן\"\n                        onChange={(ev) => { setCurrentSurveyId(ev.target.value) }} >\n                        {\n                            surveyIdList?.map((id) => (\n                                <MenuItem\n                                    key={id.surveyTitle}\n                                    value={id.surveyTitle}>\n                                    {id.surveyTitle}\n                                </MenuItem>\n                            ))\n                        }\n                    </Select>\n                </FormControl>\n                <div className=\"next-btn button\"\n                    onClick={() => { handleOnClickNext() }} >\n                    <p>המשך</p>\n                </div>\n                <div className=\"back-btn button\"\n                    onClick={() => { handleOnClickBack() }} >\n                    <p>חזור</p>\n                </div>\n            </>}\n            {(surveyIdList.length === 0)&&<> \n                <h1>הוסף סקר ראשון</h1>\n                <div className=\"next-btn button\"\n                    onClick={() => { handleOnClickCreate() }} >\n                        <p>הוסף סקר</p>\n                </div>\n                <CreateSurvey />\n            </>}\n        </section>\n    )\n}","import treeTypes from '../data/treeTypes.json';\nimport palmstreeTypes from '../data/palmstreeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n    ,\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notDefined',\n        label: 'לא מוגדר',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    palmstreeTypes,\n    recomandationOptions: recommendationOptions\n}\n","import React, {  useEffect, useState, useImperativeHandle, forwardRef } from 'react'\n\nexport const FormAutocomplete = forwardRef(({ onSetTreeType, options }, ref) => {\n    useImperativeHandle(\n        ref, () => ({\n            onResetAutocomplete() {\n                setTreeObj({})\n                setSearch('')\n            }\n        })\n    )\n    const [display, setDisplay] = useState(false)\n    const [search, setSearch] = useState('')\n    const [treeObj, setTreeObj] = useState({})\n\n    useEffect(() => {\n        onSetTreeType(treeObj)\n        setDisplay(false)\n    }, [treeObj, onSetTreeType])\n\n    const setTree = (tree) => {\n        setTreeObj(tree)\n        setSearch(tree.label)\n    }\n\n    return (\n        <section className=\"autocomplete-form\">\n            <input\n                onChange={(ev) => { setSearch(ev.target.value) }}\n                className=\"autocomplete-input\"\n                name=\"type\"\n                value={search}\n                type=\"text\"\n                placeholder=\" מין העץ\"\n                autoComplete=\"off\"\n                onClick={() => { setDisplay(!display) }} />\n            {display &&\n                <div className=\"autocomplete-container\">\n                    {options.filter((option) => option?.label?.includes(search)).map((v, i) => {\n                        return (\n                            <div onClick={() => { setTree(v) }} className=\"tree-option\" key={v.label}>\n                                <span>{v.label}</span>\n                            </div>\n                        )\n                    })\n                    }\n                </div>\n            }\n        </section>\n    )\n})","import React from 'react'\nimport { TextField } from '@material-ui/core';\n\nexport default function Input(props) {\n\n    const { name, value, error = null, onChange, InputProps, id, multiline, rows, placeholder, type } = props;\n    return (\n        <TextField\n            autoComplete=\"off\"\n            variant=\"standard\"\n            name={name}\n            // value={value}\n            onChange={onChange}\n            InputProps={InputProps}\n            id={id}\n            color=\"primary\"\n            {...(type && { type: \"text\" })}\n            {...(!type && { type: \"number\" })}\n            {...(error && { error: true, helperText: error })}\n            {...multiline &&\n            {\n                rows: rows,\n                multiline\n            }}\n            // {...placeholder && { placeholder: placeholder }}\n            placeholder={placeholder}\n        />\n    )\n}","import React from 'react'\n\nexport default function FormModal({ HandleiIsModalShown, modal, imgSrc }) {\n    return (\n        <div\n            onClick={() => HandleiIsModalShown(modal.type, !modal.isShowen)}\n            className=\"form-modal health-modal\" >\n            <div className=\"modal-container \">\n                <img src={imgSrc} alt=\"מקרא\" />\n            </div>\n        </div>\n    )\n}","function uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n    const formData = new FormData();\n    // formData.append('file', files[0])\n    formData.append('file', files)\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","// REACT IMAGE UPLOAD WRAPPER\nimport React, { useEffect, useState } from \"react\";\nimport ImageUploading from \"react-images-uploading\";\nimport { cloudinaryService } from \"../services/cloudinaryService\";\n\nexport const ImgUpload = ({ onGetImgUrl }) => {\n\n    const [images, setImages] = useState([]);\n    const maxNumber = 1;\n\n    useEffect(() => {\n        (async () => {\n            if (images.length !== 0) {\n                // console.log(\"🚀 ~ file: ImgUpload.jsx ~ line 15 ~ imgUrl\", images[0].file)\n                const imgUrl = await cloudinaryService.uploadImg(images[0].file)\n                console.log(\"🚀 ~ file: ImgUpload.jsx ~ line 16 ~ imgUrl\", imgUrl)\n                onGetImgUrl(imgUrl.secure_url)\n            }\n        })()\n    }, [images,onGetImgUrl])\n\n\n    const onChange = (imageList, addUpdateIndex) => {\n        // data for submit\n        console.log(imageList, addUpdateIndex);\n        setImages(imageList);\n    };\n\n\n    return (\n        <ImageUploading\n            // multiple\n            value={images}\n            onChange={onChange}\n            maxNumber={maxNumber}\n            dataURLKey=\"data_url\"\n            onClick={(ev) => { ev.stopPropagation() }}\n        >\n            {({\n                imageList,\n                onImageUpload,\n                onImageRemoveAll,\n                onImageUpdate,\n                onImageRemove,\n                isDragging,\n                dragProps\n            }) => (\n                // write your building UI\n                <div\n                    onClick={(ev) => {\n                        ev.stopPropagation()\n                        ev.preventDefault()\n                    }}\n                    className=\"upload__image-wrapper \">\n                    <button\n                        className=\"upload-btn btn\"\n                        style={isDragging ? { color: \"red\" } : null}\n                        onClick={(ev) => {\n                            ev.preventDefault()\n                            ev.stopPropagation()\n                            onImageUpload()\n                        }}\n                        {...dragProps}\n                    >\n                        הוסף תמונה\n                    </button>\n                    &nbsp;\n                    {/* <button\n                        className=\"btn\"\n                        onClick={onImageRemoveAll}>Remove all images</button> */}\n                    {imageList.map((image, index) => (\n                        <div key={index} className=\"image-item\">\n                            <img src={image.data_url} alt=\"\" width=\"100\" />\n                            {/* <div className=\"image-item__btn-wrapper\">\n                                <button onClick={() => onImageUpdate(index)}>Update</button>\n                                <button onClick={() => onImageRemove(index)}>Remove</button>\n                            </div> */}\n                        </div>\n                    ))}\n                </div>\n            )}\n        </ImageUploading>)\n}","import React, { useEffect, useState } from 'react'\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from './FormAutocomplete';\nimport Input from './form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from './form/FormModal';\nimport { ImgUpload } from './ImgUpload';\nimport { useRef } from 'react';\n\nexport const TreesForm = ({ querySurveyTrees }) => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const { loggedInUser } = useSelector(state => state.appModule)\n\n    const [surveyId, setSurveyId] = useState('')\n    const [isImgReady, setIsImgReady] = useState(false)\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState(null)\n    const [imgUrl, setImgUrl] = useState('')\n    const childRef = useRef();\n\n\n    const initialFValues = {\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: '',\n        isPalmTree: false\n    }\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n            temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n            temp.recommendation = isEmptyInput(fieldValues.recommendation)\n\n        setErrors({\n            ...temp\n        })\n\n        if (fieldValues === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        // setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate);\n\n    const [isModalShown, HandleIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: '',\n        isAddingTree: ''\n    })\n\n    useEffect(() => {\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        if (!surveyId || Object.keys(surveyId).length === 0) {\n            let storageId = storageService.loadFromStorage('surveyId')\n            if (storageId) {\n                setSurveyId(storageId)\n            }\n        }\n    }, [surveyId])\n\n    const onResetForm = () => {\n        resetForm()\n        childRef.current.onResetAutocomplete()\n        const inputsRef = document.querySelectorAll('input')\n        const textareaRef = document.querySelectorAll('textarea')\n        inputsRef.forEach(input => {\n            input.value = ''\n        })\n        textareaRef.forEach(textarea => {\n            textarea.value = ''\n        })\n    }\n\n    const onGetImgUrl = (img) => {\n        // setIsImgReady(true)\n        setImgUrl(img)\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        if (!treeType) return alert('בחר מין עץ')\n        const treeCopy = { ...values }\n        treeCopy.type = treeType\n        treeCopy.surveyId = surveyId\n        treeCopy.imgUrl = imgUrl\n        if (validate()) {\n            console.log('SUBMIT');\n            treeService.save(treeCopy, loggedInUser)\n            HandleIsModalShown(!isModalShown.isAddingTree)\n            querySurveyTrees()\n            onResetForm()\n        }\n        window.scrollTo(0, 0)\n    }\n    return (\n        <div className=\"form-container\">\n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                <div className=\"trees-form flex column\">\n                    <div className=\"type-form \">\n                        <label htmlFor=\"isPalmTree rtl\">\n                            <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                            עץ דקל\n                        </label>\n                        <FormAutocomplete ref={childRef} options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>מספר עץ</p>\n                        <Input\n                            error={errors.idx}\n                            name=\"idx\"\n                            value={values.idx}\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>כמות עצים</p>\n                        <Input\n                            error={errors.quantity}\n                            value={values.quantity}\n                            name=\"quantity\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>קוטר הגזע</p>\n                        <Input\n                            error={errors.diameter}\n                            value={values.diameter}\n                            placeholder=\"קוטר בס״מ של הגזע\"\n                            name=\"diameter\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                    </div>\n\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                        <Input\n                            error={errors.health}\n                            value={values.health}\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            placeholder=\"0-5\"\n                            id=\"health\"\n                            name=\"health\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                        {isModalShown.health &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'health',\n                                    isShowen: isModalShown.health\n                                }}\n                                imgSrc=\"/imgs/modal/healthModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>גובה העץ</p>\n                        <Input\n                            error={errors.height}\n                            name=\"height\"\n                            variant=\"standard\"\n                            placeholder=\"גובה העץ במטרים\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                        <Input\n                            error={errors.location}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"location\"\n                            name=\"location\"\n                            onChange={handleInputChange} />\n\n                        {isModalShown.location &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'location',\n                                    isShowen: isModalShown.location\n                                }}\n                                imgSrc=\"/imgs/modal/locationModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                        <Input\n                            error={errors.canopy}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"canopy\"\n                            name=\"canopy\"\n                            onChange={handleInputChange} />\n                        {isModalShown.canopy &&\n                            <FormModal\n                                HandleiIsModalShown={HandleIsModalShown}\n                                modal={{\n                                    type: 'canopy',\n                                    isShowen: isModalShown.canopy\n                                }}\n                                imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>אזור שורשים מוגן</p>\n                        <Input\n                            error={errors.rootsDiameter}\n                            placeholder=\"אזור שורשים מוגן במטרים\"\n                            id=\"rootsDiameter\"\n                            name=\"rootsDiameter\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>היתכנות העתקה</p>\n                        <FormControl>\n                            <Select\n                                // error={errors.movingPossibility}\n                                type=\"text\"\n                                id=\"movingPossibility\"\n                                name=\"movingPossibility\"\n                                value={values.movingPossibility}\n                                onChange={handleInputChange}>\n                                {formService.movingPossibility.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>המלצה</p>\n                        <FormControl >\n                            <Select\n                                // error={errors.recommendation}\n                                type=\"text\"\n                                id=\"recommendation\"\n                                name=\"recommendation\"\n                                value={values.recommendation}\n                                onChange={handleInputChange}>\n                                {formService.recomandationOptions.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>סיבת כריתה או\n                            העתקת\n                            העץ</p>\n                        <Input\n                            error={errors.movingReason}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"movingReason\"\n                            name=\"movingReason\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>הערות</p>\n                        <Input\n                            error={errors.description}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"description\"\n                            name=\"description\"\n                            onChange={handleInputChange} />\n                    </div>\n                </div>\n                <ImgUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">הוסף עץ </Button>\n\n                {isModalShown.isAddingTree &&\n                    <div\n                        onClick={() => { HandleIsModalShown(!isModalShown.health) }}\n                        className=\"adding-modal\">\n                        <div className=\"background\"></div>\n                        <h1>העץ נוסף בהצלחה!</h1>\n                    </div>}\n            </form>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\nimport { treeService } from '../services/treeService'\n\nexport const TreePreview = ({ tree, querySurveyTrees }) => {\n\n    const dispatch = useDispatch()\n    const [isRemove, setIsRemove] = useState(false)\n    const history = useHistory()\n    const { loggedInUser } = useSelector(state => state.appModule)\n\n\n\n    useEffect(() => {\n    })\n\n    const onRemoveTree = () => {\n        treeService.removeTree(tree._id,loggedInUser.username)\n        querySurveyTrees()\n    }\n\n    return (\n        <section className=\"main-container tree-preview\">\n            <div className=\"preview-info\">\n                <p>מספר עץ: {tree?.idx}</p>\n                <p> סוג עץ: {tree?.type.typeValue}</p>\n                <p>קוטר גזע: {tree?.diameter}</p>\n                <p>מצב בריאותי: {tree?.health}</p>\n                <p>גובה העץ: {tree?.height}</p>\n                <p>מיקום העץ: {tree?.location}</p>\n                <p>ניקוד חופת העץ: {tree?.canopy}</p>\n                <p>היתכנות העתקה: {tree?.movingPossibility}</p>\n                <p>המלצה: {tree?.recommendation}</p>\n            </div>\n            {tree.imgUrl !== '' && <img src={tree?.imgUrl} alt=\"tree\" />}\n            {tree.imgUrl === '' && <img src='imgs/tree_silhouette.png' alt=\"tree\" />}\n            <div className=\"options\">\n                <div\n                    className=\"remove-btn btn\"\n                    onClick={() => { setIsRemove(true) }}>\n                    <span>מחק</span>\n                </div>\n                <div\n                    className=\"update-btn btn\"\n                    onClick={() => {\n                        history.push(`/tree_update/${tree._id}`)\n                    }}>\n                    <span>עדכן</span>\n                </div>\n\n            </div>\n            {isRemove && <div className=\"remove-modal \">\n                <p>האם למחוק ?</p>\n                <div className=\"\">\n                    <p className=\"btn\" onClick={() => { onRemoveTree() }}>מחק</p>\n                    <p className=\"btn\" onClick={() => { setIsRemove(false) }}>חזור</p>\n                </div>\n            </div>}\n            <div\n                className=\"close-preview\"\n                onClick={(ev) => {\n                    ev.preventDefault()\n                    dispatch(toggleIsTreePreviewShowen())\n                }}\n            ><span>X</span></div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TreesForm } from '../cmps/TreesForm'\nimport { treeService } from '../services/treeService'\nimport { storageService } from '../services/storageService';\nimport { TreePreview } from '../cmps/TreePreview';\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions';\n\nexport const SurveyEditor = () => {\n    \n    const dispatch = useDispatch()\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const { loggedInUser } = useSelector(state => state.appModule)\n    const [isAddingTree, setIsAddingTree] = useState(true)\n    const [currentSurveyTrees, setCurrentSurveyTrees] = useState([])\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n    const [localCurrentSurvey, setLocalCurrentSurvey] = useState(null)\n\n\n    useEffect(() => { // querySurveyTreessss\n        querySurveyTrees()\n    }, [])\n\n\n\n    const querySurveyTrees = async () => {\n        let trees = await treeService.querySurveyTrees(currentSurvey?.surveyTitle,loggedInUser?.username)\n        setCurrentSurveyTrees(trees)\n        setLocalCurrentSurvey(currentSurvey)\n        if (!currentSurvey) {\n            const storageTreeId = storageService.loadFromStorage('surveyId')\n            if (storageTreeId) {\n                let trees = await treeService.querySurveyTrees(storageTreeId.surveyTitle,loggedInUser?.username)\n                setLocalCurrentSurvey(storageTreeId)\n                setCurrentSurveyTrees(trees)\n            }\n        }\n    }\n    // const querySurveyTrees = async () => {\n    //     let trees = await treeService.querySurveyTrees(currentSurvey?.surveyTitle,loggedInUser?.username)\n    //     setCurrentSurveyTrees(trees)\n    //     if (Object.keys(currentSurvey).length === 0) {\n    //         const storageTreeId = storageService.loadFromStorage('surveyId')\n    //         if (storageTreeId) {\n    //             let trees = await treeService.querySurveyTrees(storageTreeId.surveyTitle,loggedInUser?.username)\n    //             setLocalCurrentSurvey(storageTreeId)\n    //             setCurrentSurveyTrees(trees)\n    //         }\n    //     }\n    // }\n\n    return (\n        <section id=\"swup\" className=\"main-container rtl\">\n            <h1>טופס סקר עצים <span>{localCurrentSurvey?.surveyTitle}</span>  </h1>\n            <div className=\"add-tree\">\n                {<p onClick={(ev) => {\n                    ev.preventDefault()\n                    setIsAddingTree(true)\n                }}>הוסף עץ</p> && !isAddingTree}\n                {isAddingTree && <TreesForm querySurveyTrees={querySurveyTrees} />}\n            </div>\n            <div className=\"other-trees\">\n                <h3>עצים נוספים</h3>\n                {currentSurveyTrees && <div className=\"current-trees pointer flex\">\n                    {currentSurveyTrees.map((tree) => {\n                        return <div\n                            key={tree._id}\n                            className=\"tree-index\"\n                            onClick={() => {\n                                setCurrentPreviewTree(tree)\n                                dispatch(toggleIsTreePreviewShowen())\n                            }} >\n                            <p>{tree.idx}</p>\n                            <img src=\"imgs/treeLogo.png\" alt=\"index\" />\n                        </div>\n                    })}\n                    {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} querySurveyTrees={querySurveyTrees} />}\n                </div>}\n            </div>\n        </section>\n    )\n}","import React, { useEffect, useState } from \"react\"\nimport { useParams, useHistory } from \"react-router\"\nimport { treeService } from \"../services/treeService\"\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\n// import { CloudinaryUpload } from './CloudinaryUpload';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from '../cmps/FormAutocomplete';\nimport Input from '../cmps/form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from '../cmps/form/FormModal';\n\nexport const TreeUpdate = () => {\n\n    const params = useParams()\n    let history = useHistory()\n    \n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const { loggedInUser } = useSelector(state => state.appModule)\n    \n    const [tree, setTree] = useState({})\n    const [surveyId, setSurveyId] = useState('')\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState('')\n    // const [imgUrl, setImgUrl] = useState('')\n\n    useEffect(() => {\n        (async () => {\n            const treeById = await treeService.getTreeById(params.treeId, loggedInUser.username)\n            setTree(treeById)\n        })()\n    }, [])\n    \n    useEffect(() => {\n        if (surveyId) {\n            if (Object.keys(surveyId).length === 0) {\n                let storageId = storageService.loadFromStorage('surveyId')\n                if (storageId) {\n                    setSurveyId(storageId)\n                }\n            }\n        }\n    }, [surveyId])\n    \n    useEffect(() => {\n        // setType(tree.type.label)\n\n        console.log('tree🌲',tree);\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n        setInputRef()\n        setTextAreaRef()\n        \n    }, [tree])\n    \n    \n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n        temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n        temp.recommendation = isEmptyInput(fieldValues.recommendation)\n        \n        setErrors({\n            ...temp\n        })\n\n        if (tree === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        errors,\n        setErrors,\n        handleInputChange,\n    } = useForm(tree, true, validate);\n\n    const [isModalShown, HandleIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: '',\n        isAddingTree: ''\n    })\n\n\n\n    const setInputRef = () => {\n        console.log('setInputRef');\n        const inputsRef = document.querySelectorAll('input')\n        inputsRef.forEach(input => {\n            const name = input.name\n            input.value = (name === 'type') ? tree.type?.label : tree[name]\n        })\n    }\n    const setTextAreaRef = () => {\n        const textareasRef = document.querySelectorAll('textarea')\n        textareasRef.forEach(textarea => {\n            const name = textarea.name\n            textarea.value = tree[name]\n        })\n    }\n\n\n\n    // const onGetImgUrl = (img) => {\n    //     setImgUrl(img)\n    // }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        const mergeTree = { ...tree, type: treeType, ...values }\n        console.log(\"🚀 ~ file: TreeUpdate.jsx ~ line 170 ~ submitForm ~ mergeTree\", mergeTree)\n        // if (validate()) {\n        console.log('UPDATE');\n        treeService.save(mergeTree, loggedInUser)\n        history.goBack()\n        // }\n    }\n\n    return (\n        <div className=\"main-container\">\n            <h1>עדכן עץ</h1>\n            <div className=\"form-container\">\n                <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                    <div className=\"trees-form flex column\">\n                        <div className=\"type-form \">\n                            <label htmlFor=\"isPalmTree rtl\">\n                                <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                                עץ דקל\n                            </label>\n                            <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>מספר עץ</p>\n                            <Input\n                                error={errors.idx}\n                                name=\"idx\"\n                                value={values.idx}\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>כמות עצים</p>\n                            <Input\n                                error={errors.quantity}\n                                value={values.quantity}\n                                name=\"quantity\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>קוטר הגזע</p>\n                            <Input\n                                error={errors.diameter}\n                                value={values.diameter}\n                                placeholder=\"קוטר בס״מ של הגזע\"\n                                name=\"diameter\"\n                                variant=\"standard\"\n                                onChange={handleInputChange} />\n                        </div>\n\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                            <Input\n                                error={errors.health}\n                                value={values.health}\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                placeholder=\"0-5\"\n                                id=\"health\"\n                                name=\"health\"\n                                variant=\"standard\"\n                                onChange={handleInputChange} />\n                            {isModalShown.health &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'health',\n                                        isShowen: isModalShown.health\n                                    }}\n                                    imgSrc=\"/imgs/modal/healthModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p>גובה העץ</p>\n                            <Input\n                                error={errors.height}\n                                name=\"height\"\n                                variant=\"standard\"\n                                placeholder=\"גובה העץ במטרים\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                            <Input\n                                error={errors.location}\n                                placeholder=\"0-5\"\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                id=\"location\"\n                                name=\"location\"\n                                onChange={handleInputChange} />\n\n                            {isModalShown.location &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'location',\n                                        isShowen: isModalShown.location\n                                    }}\n                                    imgSrc=\"/imgs/modal/locationModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p onClick={() => HandleIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                            <Input\n                                error={errors.canopy}\n                                placeholder=\"0-5\"\n                                InputProps={{\n                                    inputProps: {\n                                        max: 5,\n                                        min: 0\n                                    }\n                                }}\n                                id=\"canopy\"\n                                name=\"canopy\"\n                                onChange={handleInputChange} />\n                            {isModalShown.canopy &&\n                                <FormModal\n                                    HandleiIsModalShown={HandleIsModalShown}\n                                    modal={{\n                                        type: 'canopy',\n                                        isShowen: isModalShown.canopy\n                                    }}\n                                    imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                        </div>\n                        <div className=\"input-container\">\n                            <p>אזור שורשים מוגן</p>\n                            <Input\n                                error={errors.rootsDiameter}\n                                placeholder=\"אזור שורשים מוגן במטרים\"\n                                id=\"rootsDiameter\"\n                                name=\"rootsDiameter\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>היתכנות העתקה</p>\n                            <FormControl>\n                                <Select\n                                    // error={errors.movingPossibility}\n                                    type=\"text\"\n                                    id=\"movingPossibility\"\n                                    name=\"movingPossibility\"\n                                    value={values.movingPossibility}\n                                    onChange={handleInputChange}>\n                                    {formService.movingPossibility.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <div className=\"input-container\">\n                            <p>המלצה</p>\n                            <FormControl >\n                                <Select\n                                    // error={errors.recommendation}\n                                    type=\"text\"\n                                    id=\"recommendation\"\n                                    name=\"recommendation\"\n                                    value={values.recommendation}\n                                    onChange={handleInputChange}>\n                                    {formService.recomandationOptions.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </div>\n                        <div className=\"input-container\">\n                            <p>סיבת כריתה או\n                                העתקת\n                                העץ</p>\n                            <Input\n                                error={errors.movingReason}\n                                multiline\n                                rows={2}\n                                type=\"text\"\n                                id=\"movingReason\"\n                                name=\"movingReason\"\n                                onChange={handleInputChange} />\n                        </div>\n                        <div className=\"input-container\">\n                            <p>הערות</p>\n                            <Input\n                                error={errors.description}\n                                multiline\n                                rows={2}\n                                type=\"text\"\n                                id=\"description\"\n                                name=\"description\"\n                                onChange={handleInputChange} />\n                        </div>\n                    </div>\n                    {/* <CloudinaryUpload onGetImgUrl={onGetImgUrl} /> */}\n                    <Button style={{ marginBottom: '20px' }} onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">עדכן עץ</Button>\n                    {isModalShown.isAddingTree &&\n                        <div\n                            onClick={() => { HandleIsModalShown(!isModalShown.health) }}\n                            className=\"adding-modal\">\n                            <div className=\"background\"></div>\n                            <h1>העץ נוסף בהצלחה!</h1>\n                        </div>}\n                </form>\n            </div>\n        </div>\n    )\n\n}","import React, { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { useHistory } from 'react-router-dom'\n\nexport function Home() {\n    const { loggedInUser, loginErr } = useSelector(state => state.appModule)\n    const history = useHistory()\n\n    useEffect(() => {\n        // console.log(loggedInUser);\n        // if (!loggedInUser) history.push('/login')\n    }, [])\n\n    return (\n        <section className=\"home-container flex \">\n            {/* <></> */}\n            <Link to=\"/create_survey\" >\n                <div className=\"new-survey\">סקר חדש</div>\n            </Link>\n\n            <Link to=\"/choose_survey\" >\n                <div className=\"existing-survey\">בחר סקר</div>\n            </Link>\n        </section>\n\n    )\n}","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux'\nimport { Link, useHistory } from 'react-router-dom'\n// import { GoogleLogin } from 'react-google-login'\nimport { useDispatch } from 'react-redux';\nimport { onLogin } from '../actions/appActions'\nimport * as Yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { storageService } from '../services/storageService';\n\n\nexport function Login() {\n\n  const { loginErr } = useSelector(state => state.appModule)\n  const history = useHistory()\n  // const location = useLocation()\n  const dispatch = useDispatch()\n\n  const credentials = {\n    username: '',\n    password: ''\n  }\n\n  useEffect(() => {\n    console.log('loginErr', loginErr);\n  }, [loginErr])\n\n  const onSubmit = (values) => {\n    const storageLocalUser = {}\n    storageLocalUser.username = values.username\n    storageService.saveToStorage('surveyId', null) // Reset current survey\n    storageService.saveToStorage('loggedinUser', storageLocalUser) // Reset current survey\n    dispatch(onLogin(values))\n    history.push('/')\n  }\n\n  const validate = Yup.object({\n    username: Yup.string()\n      .min(4, 'Must be 4 or more')\n      .max(15, 'Must be 15 characters or less')\n      .required('Required'),\n    password: Yup.string()\n      .min(6, 'Must be 6 or more')\n      .max(20, 'Must be 20 characters or less')\n      .required('Required')\n  })\n\n  // const onSuccessGoogle = (res) => {\n  //   const { tokenId } = res\n  //   // const { onGoogleLogin } = this.props\n  //   onGoogleLogin(tokenId)\n  // }\n  // const onFailureGoogle = (res) => {\n  //   console.log('Login with google failed', res)\n  // }\n\n  return (\n    <section className=\"login-signup-container\">\n      <div className=\"login-signup \">\n        <Formik\n          initialValues={credentials}\n          validationSchema={validate}\n          onSubmit={(values) => {\n            onSubmit(values)\n          }} >\n          <Form className=\"flex column\">\n            <ErrorMessage name=\"username\" component=\"div\" />\n            <Field type=\"username\" placeholder=\"Enter username\" name=\"username\" autoFocus />\n            <ErrorMessage name=\"password\" component=\"div\" />\n            <Field type=\"password\" placeholder=\"Enter password\" name=\"password\" />\n            <button type=\"submit\" className=\"primary-btn login-signup-btn\">Log in</button>\n            {loginErr && <div className=\"err-msg\">שם משתמש או סיסמא לא נכונים</div>}\n          </Form>\n        </Formik>\n        <hr />\n        <Link to=\"/signup\">? עדיין לא רשום</Link>\n      </div>\n    </section>\n  )\n\n}\n\n","import React from 'react';\n// import { useSelector } from 'react-redux'\nimport { Link, useHistory } from 'react-router-dom'\n// import { GoogleLogin } from 'react-google-login'\nimport { useDispatch } from 'react-redux';\nimport {  onSignup, } from '../actions/appActions'\nimport * as Yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\n\n\nexport function Signup() {\n\n    // const { loggedInUser } = useSelector(state => state.appModule)\n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    const userInfo = {\n        fullname: '',\n        username: '',\n        password: '',\n        imgUrl: ''\n    }\n    const validate = Yup.object({\n        fullname: Yup.string()\n            .min(4, 'Must be 4 or more')\n            .max(15, 'Must be 15 characters or less')\n            .required('Required'),\n        username: Yup.string()\n            .min(4, 'Must be 4 or more')\n            .max(15, 'Must be 15 characters or less')\n            .required('Required'),\n        password: Yup.string()\n            .min(6, 'Must be 6 or more')\n            .max(20, 'Must be 20 characters or less')\n            .required('Required')\n    })\n\n    // const onSuccessGoogle = (res) => {\n    //     const { tokenId } = res\n    //     // const { onGoogleLogin } = this.props\n    //     onGoogleLogin(tokenId)\n    // }\n\n    // const onFailureGoogle = (res) => {\n    //     console.log('Login with google failed', res)\n    // }\n\n    const onSubmit = (values) => {\n        dispatch(onSignup(values))\n        history.push('/')\n    }\n\n\n    return (\n        <section className=\"login-signup-container\">\n            <div className=\"login-signup \">\n                <Formik\n                    initialValues={userInfo}\n                    validationSchema={validate}\n                    onSubmit={(values) => {\n                        onSubmit(values)\n                    }} >\n                    <Form className=\"flex column\">\n                        <div className=\"flex\">\n                            <Field type=\"fullname\" placeholder=\"Enter fullname\" name=\"fullname\" autoFocus />\n                            <ErrorMessage name=\"fullname\" component=\"p\" />\n                        </div>\n                        <div className=\"flex\">\n                            <Field type=\"username\" placeholder=\"Enter username\" name=\"username\" autoFocus />\n                            <ErrorMessage name=\"username\" component=\"p\" />\n                        </div>\n                        <div className=\"flex\">\n                            <Field type=\"password\" placeholder=\"Enter password\" name=\"password\" />\n                            <ErrorMessage name=\"password\" component=\"p\" />\n                        </div>\n                        <button type=\"submit\" className=\"primary-btn login-signup-btn\">Signup</button>\n                    </Form>\n                </Formik>\n                <hr />\n                <Link to=\"/login\">? משתמש רשום</Link>\n            </div>\n        </section>\n    )\n\n}\n\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { ChooseSurvey } from './pages/ChooseSurvey';\nimport { CreateSurvey } from './pages/CreateSurvey';\nimport { SurveyEditor } from './pages/SurveyEditor';\nimport { TreeUpdate } from './pages/TreeUpdate';\nimport { Home } from './pages/Home';\nimport { Login } from './cmps/Login';\nimport { Signup } from './cmps/Signup';\n\nfunction App() {\n  return (\n    <div id=\"swup\" className=\"transition content-wrapper\">\n      <AppHeader />\n      <Switch> \n        <Route path=\"/about\" component={About} />\n        <Route path=\"/trees\" component={TreesSurvey} />\n        <Route path=\"/tree_update/:treeId\" component={TreeUpdate} />\n        <Route path=\"/survey_editor\" component={SurveyEditor} />\n        <Route path=\"/choose_survey\" component={ChooseSurvey} />\n        <Route path=\"/create_survey\" component={CreateSurvey} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={Signup} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport TreeReducer from './reducers/TreeReducer';\r\nimport  { AppReducer } from './reducers/AppReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    TreeModule: TreeReducer,\r\n    appModule: AppReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}