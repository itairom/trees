{"version":3,"sources":["serviceWorker.js","reducers/TreeReducer.js","assets/svg/menu_black_24dp.svg","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","cmps/TreesTable.jsx","services/httpService.js","services/treeService.js","services/storageService.js","pages/TreesSurvey.jsx","services/customHooks.js","services/formService.js","services/cloudinaryService.js","cmps/CloudinaryUpload.jsx","cmps/FormAutocomplete.jsx","cmps/TreesForm.jsx","services/carService.js","actions/TreeActions.js","pages/ChooseSurvey.jsx","pages/CreateSurvey.jsx","cmps/TreePreview.jsx","pages/SurveyEditor.jsx","pages/Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","cars","filterBy","isDark","currentSurvey","isTreePreviewShowen","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","_ref","svgRef","title","props","height","viewBox","width","ref","ForwardRef","forwardRef","AppHeader","useState","isMobile","setIsMobile","changeMobile","prev","className","to","onClick","About","TreesImages","trees","map","tree","imgUrl","_id","idx","src","alt","TreesTable","useEffect","console","log","calculateValue","canopy","monetaryValue","health","calculateMonetaryValue","ValueColor","sum","type","label","quantity","diameter","typeValue","rootsDiameter","movingPossibility","description","movingReason","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","then","tableId","surveyId","treeService","save","queryTrees","querySurveyIdList","querySurveyTrees","storageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","TreesSurvey","useSelector","state","TreeModule","setTrees","setTableIdList","surveyTitle","storageId","useForm","cb","fields","setFields","ev","field","name","value","prevFields","formService","treeTypes","recomandationOptions","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","error","CloudinaryUpload","file","setFile","setIsUpload","sendFile","preventDefault","imgUrlRes","onGetImgUrl","fileHandler","action","htmlFor","required","multiple","id","onChange","FormAutocomplete","onSetTreeType","display","setDisplay","options","setOptions","search","setSearch","treeObj","setTreeObj","placeholder","filter","option","includes","v","TreesForm","setSurveyId","setSurvyIdList","treeType","setType","setImgUrl","comments","totalValue","recommendation","isPalmTree","form","handleChange","useHandleModal","isModalShown","HandleiIsModalShown","submitForm","treeCopy","dir","onSubmit","treeTypeObj","TextField","ran","variant","color","InputProps","inputProps","max","min","FormControl","InputLabel","Select","MenuItem","multiline","rows","img","Button","gDefaultCars","vendor","speed","imgName","_loadCars","_setCurrentSurvey","survey","setCurrentSurvey","dispatch","ChooseSurvey","useDispatch","history","useHistory","surveyIdList","setSurveyIdList","currentSurveyId","setCurrentSurveyId","handleOnClickNext","useCallback","push","handleOnClickBack","filterdList","CreateSurvey","handleOnClick","surveyDate","surveySummary","addNewSurvey","TreePreview","SurveyEditor","isAddingTree","setIsAddingTree","currentSurveyTrees","setCurrentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","Home","App","path","component","rootReducer","combineReducers","car","carId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCjBAC,EAAe,CACjBC,KAAM,GACNC,SAAU,KACVC,QAAQ,EACRC,cAAc,GACdC,qBAAoB,G,mBCNxB,SAASC,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnED,EAEzF,SAAuCI,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DD,EAAS,GAAQa,EAAaf,OAAOgB,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaL,EAAOK,GAAOD,EAAOC,IAAQ,OAAOL,EAFxMgB,CAA8BZ,EAAQQ,GAAuB,GAAId,OAAOmB,sBAAuB,CAAE,IAAIC,EAAmBpB,OAAOmB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBP,OAAOQ,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBL,EAAOK,GAAOD,EAAOC,IAAU,OAAOL,EAMne,IAAI,EAEJ,IAAMoB,cAAc,OAAQ,CAC1BC,EAAG,kBACHC,KAAM,SAGJ,EAEJ,IAAMF,cAAc,OAAQ,CAC1BC,EAAG,kDAGD,EAAmB,SAA0BE,GAC/C,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQf,EAAyBY,EAAM,CAAC,SAAU,UAEtD,OAAO,IAAMH,cAAc,MAAOvB,EAAS,CACzC8B,OAAQ,OACRC,QAAS,YACTC,MAAO,OACPP,KAAM,UACNQ,IAAKN,GACJE,GAAQD,EAAQ,IAAML,cAAc,QAAS,KAAMK,GAAS,KAAM,EAAO,IAG1EM,EAAa,IAAMC,YAAW,SAAUN,EAAOI,GACjD,OAAO,IAAMV,cAAc,EAAkBvB,EAAS,CACpD2B,OAAQM,GACPJ,OAEU,ICnCR,SAASO,IAAa,IAAD,EACQC,oBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,KAElBC,EAAe,WACjBD,GAAY,SAAAE,GAAI,OAAYA,MAGhC,OACI,4BAAQC,UAAU,cACd,yBAAKA,UAAU,cACTJ,GAAY,yBAAKI,UAAU,YACzB,kBAAC,IAAD,CAAMC,GAAG,UAAS,uGAClB,kBAAC,IAAD,CAAMA,GAAG,KAAI,wGAEhBL,GAAY,yBAAKM,QAASJ,EAAcE,UAAU,cAC/C,kBAAC,IAAD,CAAMC,GAAG,UAAS,uGAClB,kBAAC,IAAD,CAAMA,GAAG,KAAI,wGAEhBL,GAAY,yBAAKI,UAAU,kBAAkBE,QAASJ,IACvD,kBAAC,EAAD,CAAMI,QAASJ,EAAcE,UAAU,aACvC,yBAAKA,UAAU,gB,gBCtBlBG,EAAQ,WAEjB,OACI,6BAASH,UAAU,mBACf,uC,wBCFCI,EAAc,WAAe,IAAD,0CAI7BC,EAJ6B,EAI7BA,MACR,OACI,6BAAUL,UAAU,qBACfK,EAAMC,KAAI,SAACC,GACR,OACI,oCACKA,EAAKC,QAAU,yBAAK1C,IAAKyC,EAAKE,IAAKT,UAAU,cAC1C,2BAAKO,EAAKG,KACV,yBAAKC,IAAKJ,EAAKC,OAAQI,IAAI,gBCX1CC,EAAa,WAAc,IAAC,IAAD,qBAAV1B,EAAU,yBAAVA,EAAU,gBAEpC2B,qBAAU,WACNC,QAAQC,IAAI,QAAS7B,KACtB,CAACA,IAGJ,IAAM8B,EAAiB,SAACV,GAEpB,OADoDA,EAA5CW,SAA4CX,EAApCY,gBAAoCZ,EAArB1D,WAAqB0D,EAAXa,QAIvCC,EAAyB,SAACd,GAG5B,QAFoDA,EAA5CW,SAA4CX,EAApCY,gBAAoCZ,EAArB1D,WAAqB0D,EAAXa,QACqB,EAAK,IAIjEE,EAAa,SAACf,GAChB,IAAIgB,EAAMN,EAAeV,GACzB,OAAIgB,EAAM,EAAU,SACXA,EAAM,GAAK,GAAKA,EAAY,OAC5BA,EAAM,IAAM,GAAKA,EAAY,QAC1B,OAGhB,OACI,6BAASvB,UAAU,oBACf,+BACI,4BACI,uHAEA,+IAEA,iFACA,uFAGA,4FAGA,mGAGA,uFAGA,8FAIA,gHAIA,sJAGA,sKAKA,qGAGA,0GACA,8DACA,oEACA,uJAEJ,yCACKb,EAAM,GAAGkB,aADd,aACK,EAAgBC,KAAI,SAACC,GAClB,OACI,wBAAIzC,IAAKyC,EAAKE,KACTF,EAAKG,KAAO,4BAAKH,EAAKG,KACvB,4BAAKH,EAAKiB,KAAKC,OACf,4BAAKlB,EAAKmB,UACV,4BAAKnB,EAAKnB,QACV,4BAAKmB,EAAKoB,UACV,4BAAKpB,EAAKa,QACV,4BAAKb,EAAK1D,UACV,4BAAK0D,EAAKiB,KAAKI,WAEf,4BAAKrB,EAAKW,QACV,wBAAIlB,UAAWsB,EAAWf,IAAQU,EAAeV,IACjD,4BAAKA,EAAKsB,eACV,4BAAKR,EAAuBd,IAC5B,4BAAKA,EAAKuB,mBACV,4BAAKvB,EAAKwB,aACV,8DACA,4BAAKxB,EAAKyB,sB,QC3FtCC,E,OAAQC,EAAMC,OAAO,CACrBC,iBAAiB,IAGRC,EAAc,SACnBC,EAAUC,GACV,OAAOC,EAAKF,EAAU,MAAOC,IAFxBF,EAAc,SAOnBC,EAAUC,GACV,OAAOC,EAAKF,EAAU,MAAOC,I,SAOtBC,E,8EAAf,WAAoBF,GAApB,+BAAAG,EAAA,6DAA8BC,EAA9B,+BAAuC,MAAOH,EAA9C,+BAAqD,KAArD,kBAE0BN,EAAM,CACpBU,IAAI,GAAD,OAzB4C,SAyB5C,OAAgBL,GACnBI,SACAH,OACAK,OAAoB,QAAXF,EAAoBH,EAAO,OANhD,cAEcM,EAFd,yBAQeA,EAAIN,MARnB,sCAYY,KAAIO,UAAoC,MAAxB,KAAIA,SAASC,QAC7BnG,OAAOC,SAASW,OAAO,YAbnC,+D,kECrBA,WAAoB+C,GAApB,SAAAkC,EAAA,sEACUJ,EAAA,YAA6B9B,GAC9ByC,MAAK,SAACH,GACH9B,QAAQC,IAAI6B,MAHxB,4C,kEAOA,WAA0BI,GAA1B,eAAAR,EAAA,sEACsBJ,EAAA,QAAwBY,GAD9C,cACQ5C,EADR,OAEIU,QAAQC,IAAI,0BAAiBX,GAFjC,kBAGWA,GAHX,4C,kEAMA,4BAAAoC,EAAA,sEACsBJ,EAAA,uBADtB,cACQhC,EADR,OAEIU,QAAQC,IAAI,eAAMX,GAFtB,kBAGWA,GAHX,4C,kEAKA,WAAgC6C,GAAhC,eAAAT,EAAA,sEACsBJ,EAAA,oBAAoCa,GAD1D,cACQ7C,EADR,OAEIU,QAAQC,IAAI,eAAMX,GAFtB,kBAGWA,GAHX,4C,sBAWO,IAAM8C,EAAc,CACvBC,K,4CACAC,W,4CACAC,kB,2CACAC,iB,6CC1BG,IAAMC,EAAiB,CAC1BC,gBAXJ,SAAyB3F,GACrB,IAAI4F,EAAMC,aAAaC,QAAQ9F,GAC/B,OAAQ4F,EAAOG,KAAKC,MAAMJ,GAAO,MAUjCK,cAPJ,SAAuBjG,EAAK4F,GACxBC,aAAa7F,GAAO+F,KAAKG,UAAUN,KCK1BO,EAAc,WAAO,IAAD,EAEkBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAAlEhH,EAFqB,EAErBA,cAFqB,KAENC,oBAECsC,mBAAS,KAJJ,mBAIxBU,EAJwB,KAIjBgE,EAJiB,OAKa1E,mBAAS,IALtB,gCAMOA,mBAAS,CAAC,MANjB,mBAMX2E,GANW,WA6B7B,OApBAxD,qBAAU,WAAM,4CAKZ,4BAAA2B,EAAA,kEAEI6B,EAFJ,SAEyBnB,EAAYG,oBAFrC,8CAGIe,EAHJ,SAGmBlB,EAAYE,WAAWjG,EAAcmH,aAHxD,qCAK8C,IAAtChH,OAAOgB,KAAKnB,GAAeQ,OALnC,wBAMY4G,EAAWhB,EAAeC,gBAAgB,YAC9C1C,QAAQC,IAAI,yEAAgEwD,GAPpF,KAQQH,EARR,UAQuBlB,EAAYE,WAAWmB,EAAUD,aARxD,gFALY,sBAEZxD,QAAQC,IAAI,sBAAuB5D,GAFvB,mCAgBZiG,KACD,IAKC,6BAASrD,UAAU,oCACf,4BAAI,8BAAO5C,EAAcmH,aAAzB,gDA0BA,kBAAC,EAAD,CAAalE,MAAOA,IACpB,kBAAC,EAAD,CAAeA,MAAOA,M,QCpErBoE,EAAU,SAACzH,GAAkC,IAApB0H,EAAmB,uDAAd,aAAc,EAC3B/E,mBAAS3C,GADkB,mBAChD2H,EADgD,KACxCC,EADwC,KAOvD,OAJA9D,qBAAU,WACR4D,EAAGC,KACF,CAACA,IAEG,CACLA,EACA,SAAUE,GAER,IAAMC,EAAQD,EAAGpH,OAAOsH,KAClBC,EAA4B,WAAnBH,EAAGpH,OAAO+D,MAAsBqD,EAAGpH,OAAOuH,MAAQH,EAAGpH,OAAOuH,MAC3EJ,GAAU,SAAAK,GAAU,sBAAUA,EAAV,eAAuBH,EAAQE,QAErDJ,I,sDCwCSM,EAAc,CACvBpD,kBA1C6B,CAC7B,CACIkD,MAAO,OACPvD,MAAO,kCAEX,CACIuD,MAAO,SACPvD,MAAO,8CAEX,CACIuD,MAAO,MACPvD,MAAO,kCAIX,CACIuD,MAAO,cACPvD,MAAO,0CA0BX0D,U,MACAC,qBAvB0B,CAC1B,CACIJ,MAAO,WACPvD,MAAO,kCAEX,CACIuD,MAAO,aACPvD,MAAO,kCAEX,CACIuD,MAAO,aACPvD,MAAO,kCAEX,CACIuD,MAAO,aACPvD,MAAO,iDC9BR,IAAM4D,EAAoB,CAC7BC,UAtBJ,SAAmBC,GACf,IACMC,EAAU,0CADG,YACH,iBAEVC,EAAW,IAAIC,SAKrB,OAJAD,EAASE,OAAO,OAAQJ,EAAM,IAC9BxE,QAAQC,IAAI,uBAAwBuE,EAAM,IAC1CE,EAASE,OAAO,gBAAiB,YAE1BC,MAAMJ,EAAY,CACrB9C,OAAQ,OACRmD,KAAMJ,IAELzC,MAAK,SAAAH,GAAG,OAAIA,EAAIiD,UAChB9C,MAAK,SAAAH,GAEF,OADA9B,QAAQC,IAAI6B,GACLA,KAEVkD,OAAM,SAAAC,GAAG,OAAIjF,QAAQkF,MAAMD,QChBvBE,EAAmB,WAAe,IAAD,uBAAV/G,EAAU,yBAAVA,EAAU,sBAGlBQ,mBAAS,MAHS,mBAGnCwG,EAHmC,KAG7BC,EAH6B,OAIVzG,oBAAS,GAJC,mBAIzB0G,GAJyB,WAMpCC,EAAQ,uCAAG,WAAMzB,GAAN,eAAApC,EAAA,6DACboC,EAAG0B,iBADU,SAESlB,EAAkBC,UAAUa,GAFrC,OAETK,EAFS,OAGbH,GAAY,GACZD,EAAQI,EAAU7D,KAClBxD,EAAM,GAAGsH,YAAYD,EAAU7D,KALlB,2CAAH,sDAQR+D,EAAc,SAAA7B,GAChBuB,EAAQvB,EAAGpH,OAAO8H,QAQtB,OACI,6BAASvF,UAAU,oBACf,0BAAM2G,OAAO,KACT,6BACI,2BAAOC,QAAQ,SACf,2BACIC,UAAQ,EACRC,UAAQ,EACR/B,KAAK,QACLvD,KAAK,OACLuF,GAAG,OACHC,SAAU,SAACnC,GAAS6B,EAAY7B,OAExC,4BAAQ3E,QAAS,SAAC2E,GAAD,OAAQyB,EAASzB,KAAlC,WAEHsB,GACG,yBAAKnG,UAAU,iBACX,sCACA,yBAAKW,IAAKwF,EAAMvF,IAAI,aCzC3BqG,EAAmB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEnBvH,oBAAS,GAFU,mBAE1CwH,EAF0C,KAEjCC,EAFiC,OAGnBzH,mBAAS,IAHU,mBAG1C0H,EAH0C,KAGjCC,EAHiC,OAIrB3H,mBAAS,IAJY,mBAI1C4H,EAJ0C,KAIlCC,EAJkC,OAKnB7H,mBAAS,IALU,mBAK1C8H,EAL0C,KAKjCC,EALiC,KAQjD5G,qBAAU,WACNwG,EAAWpC,EAAYC,aAExB,IAIHrE,qBAAU,WACNC,QAAQC,IAAI,2BAAQyG,KAGrB,CAACA,IAWJ,OACI,6BAASzH,UAAU,sBACf,2BAAOgH,SAAU,SAACnC,GAAS2C,EAAU3C,EAAGpH,OAAOuH,QAAUA,MAAOuC,EAAQ/F,KAAK,OAAOmG,YAAY,yCAAWzH,QAAS,WAAQkH,GAAYD,MACvIA,GACG,yBAAKnH,UAAU,0BACVqH,EAAQO,QAAO,SAACC,GAAD,oBAAYA,QAAZ,IAAYA,OAAZ,YAAYA,EAAQpG,aAApB,aAAY,EAAeqG,SAASP,MAASjH,KAAI,SAACyH,EAAGrK,GACzD,OACI,yBAAKwC,QAAS,WAd9B,IAACK,EACbmH,EADanH,EAc6CwH,GAZ1DP,EAAUjH,EAAKkB,OACfyF,EAAcO,GACdL,GAAW,IAUqDpH,UAAU,cAAclC,IAAKiK,EAAEtG,OAC/D,8BAAOsG,EAAEtG,cC5BpCuG,GAAY,WAAc,IAG3B5K,EAAkB8G,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAA7ChH,cAH2B,EAIHuC,mBAAS,IAJN,mBAI5BuD,EAJ4B,KAIlB+E,EAJkB,OAKMtI,mBAAS,IALf,gCAMGA,mBAAS,CAAC,MANb,mBAMfuI,GANe,aAQPvI,mBAAS,IARF,mBAQ5BwI,EAR4B,KAQlBC,EARkB,OASPzI,mBAAS,IATF,mBAS5Ba,EAT4B,KASpB6H,EAToB,OAUN5D,EAAQ,CACjC/C,SAAU,GACVF,KAAM,GACNpC,OAAQ,GACRuC,SAAU,GACVP,OAAQ,GACRvE,SAAU,GACVqE,OAAQ,GACRa,YAAa,GACbuG,SAAU,GACVC,WAAY,GACZpH,cAAe,GACfW,kBAAmB,GACnBE,aAAc,GACdtB,IAAK,GACLmB,cAAe,GACf2G,eAAgB,GAChBC,YAAY,IA3BmB,mBAU5BC,EAV4B,KAUtBC,EAVsB,OLQT,SAAC3L,GAAkC,IAApB0H,EAAmB,uDAAd,aAAc,EAClC/E,mBAAS3C,GADyB,mBACvD2H,EADuD,KAC/CC,EAD+C,KAO9D,OAJA9D,qBAAU,WACR4D,EAAGC,KACF,CAACA,IAEG,CACLA,EACA,SAAUG,EAAOE,GAEfjE,QAAQC,IAAI,gBAAiB8D,EAAOE,GAGpCJ,GAAU,SAAAK,GAAU,sBAAUA,EAAV,eAAuBH,EAAQE,QAErDJ,GKM4CgE,CAAe,CACvDxH,QAAQ,IA/BuB,mBA8B5ByH,EA9B4B,KA8BdC,EA9Bc,KAkCnChI,qBAAU,WAENmH,EAAW,OAAC7K,QAAD,IAACA,OAAD,EAACA,EAAemH,eAC5B,IAEHzD,qBAAU,WAAM,4CACZ,sBAAA2B,EAAA,kEACIyF,EADJ,SACyB/E,EAAYG,oBADrC,8EADY,uBAAC,WAAD,wBAIZD,KACD,CAACH,IAGJpC,qBAAU,cACP,CAACqH,IAEJ,IAIMY,EAAa,SAAClE,GAChBA,EAAG0B,iBACH,IAAIyC,EAAQ,eAAQN,GACpBM,EAASxH,KAAO2G,EAChBa,EAAS9F,SAAW9F,EACpB4L,EAASxI,OAASA,EAClB2C,EAAYC,KAAK4F,IASrB,OACI,yBAAKhJ,UAAU,kBAGX,0BAAMiJ,IAAI,MAAMtC,OAAO,IAAIuC,SAAU,SAACrE,GAAD,OAAQkE,EAAWlE,KACpD,yBAAK7E,UAAU,0BACX,kBAAC,EAAD,CAAkBkH,cAZd,SAACiC,GACjBpI,QAAQC,IAAImI,GACZf,EAAQe,MAWI,kBAACC,EAAA,EAAD,CACIC,KAAG,EACHxC,UAAQ,EACRpF,MAAM,wCACND,KAAK,SACLuF,GAAG,MACHhC,KAAK,MACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAACuE,EAAA,EAAD,CACIvC,UAAQ,EACRpF,MAAM,oDACND,KAAK,SACLuF,GAAG,WACHhC,KAAK,WACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAACuE,EAAA,EAAD,CACIvC,UAAQ,EACRpF,MAAM,oDACND,KAAK,SACLuF,GAAG,WACHhC,KAAK,WACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,yBAAK3E,QAAS,kBAAM4I,EAAoB,UAAWD,EAAazH,SAASpB,UAAU,oBAAnF,iEACC6I,EAAazH,QACV,yBACIlB,QAAS,kBAAM4I,EAAoB,UAAWD,EAAazH,SAC3DpB,UAAU,2BAEV,yBAAKA,UAAU,oBAOX,yBAAKW,IAAI,8BAA8BC,IAAI,6FAGvD,kBAACwI,EAAA,EAAD,CACIvC,UAAQ,EACR2C,WAAY,CACRC,WAAY,CACRC,IAAK,EACLC,IAAK,IAGblI,MAAM,gEACNkG,YAAY,MACZnG,KAAK,SACLuF,GAAG,SACHhC,KAAK,SACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,yBAAK7E,UAAU,oBAAf,+CAEA,kBAACoJ,EAAA,EAAD,CACIvC,UAAQ,EACRpF,MAAM,mEACND,KAAK,SACLuF,GAAG,SACHhC,KAAK,SACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAACuE,EAAA,EAAD,CACIvC,UAAQ,EACRc,YAAY,MACZ6B,WAAY,CACRC,WAAY,CACRC,IAAK,EACLC,IAAK,IAGblI,MAAM,oDACND,KAAK,SACLuF,GAAG,WACHhC,KAAK,WACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAACuE,EAAA,EAAD,CACIvC,UAAQ,EACRc,YAAY,MACZ6B,WAAY,CACRC,WAAY,CACRC,IAAK,EACLC,IAAK,IAGblI,MAAM,uEACND,KAAK,SACLuF,GAAG,SACHhC,KAAK,SACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAACuE,EAAA,EAAD,CACIvC,UAAQ,EACRpF,MAAM,yFACND,KAAK,SACLuF,GAAG,gBACHhC,KAAK,gBACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAAC+E,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYhD,UAAQ,EAACE,GAAG,qBAAxB,6EACA,kBAAC+C,EAAA,EAAD,CACIjD,UAAQ,EACRpF,MAAM,4EACND,KAAK,OACLuF,GAAG,oBACHhC,KAAK,oBACLuE,QAAQ,SACRC,MAAM,UACNvE,MAAO0D,EAAK5G,kBACZkF,SAAU,SAACnC,GAAS8D,EAAa9D,KAE7BK,EAAYpD,kBAAkBxB,KAAI,SAACuH,GAAD,OAC9B,kBAACkC,EAAA,EAAD,CACIjM,IAAK+J,EAAO7C,MACZA,MAAO6C,EAAO7C,OACb6C,EAAOpG,YAM5B,kBAAC2H,EAAA,EAAD,CACIY,WAAS,EACTnD,UAAQ,EACRoD,KAAM,EACNxI,MAAM,iCACND,KAAK,OACLuF,GAAG,cACHhC,KAAK,cACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAACuE,EAAA,EAAD,CACIvC,UAAQ,EACRmD,WAAS,EACTC,KAAM,EACNxI,MAAM,0HAIND,KAAK,OACLuF,GAAG,eACHhC,KAAK,eACLuE,QAAQ,SACRC,MAAM,UACNvC,SAAU,SAACnC,GAAS8D,EAAa9D,MACrC,kBAAC+E,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYhD,UAAQ,EAACE,GAAG,kBAAxB,kCACA,kBAAC+C,EAAA,EAAD,CACIjD,UAAQ,EACRrF,KAAK,OACLuF,GAAG,iBACHhC,KAAK,iBACLuE,QAAQ,SACRC,MAAM,UACNvE,MAAO0D,EAAKF,eACZxB,SAAU,SAACnC,GAAS8D,EAAa9D,KAE7BK,EAAYE,qBAAqB9E,KAAI,SAACuH,GAAD,OACjC,kBAACkC,EAAA,EAAD,CACIjM,IAAK+J,EAAO7C,MACZA,MAAO6C,EAAO7C,OACb6C,EAAOpG,aAOhC,kBAAC,EAAD,CAAkBgF,YAjNV,SAACyD,GACjB7B,EAAU6B,MAiNF,kBAACC,EAAA,EAAD,CAAQjK,QAAS,SAAC2E,GAAD,OAAQkE,EAAWlE,IAAK0E,MAAM,WAA/C,gCClQZa,I,MAAe,CACf,CAAE3J,IAAK,KAAM4J,OAAQ,OAAQC,MAAO,IAAKC,QAAS,MAClD,CAAE9J,IAAK,KAAM4J,OAAQ,SAAUC,MAAO,IAAKC,QAAS,MACpD,CAAE9J,IAAK,KAAM4J,OAAQ,OAAQC,MAAO,GAAIC,QAAS,MACjD,CAAE9J,IAAK,KAAM4J,OAAQ,QAASC,MAAO,IAAKC,QAAS,SAoDvD,WACI,IAAItN,EAAOuG,EAAeC,gBAlDV,QAmDXxG,GAASA,EAAKW,SAAQX,EAAOmN,IAClC5G,EAAeO,cApDC,OAoD0B9G,GAnDhCuN,GCpBd,IAKMC,GAAoB,SAACC,GAAD,MAAa,CAAElJ,KAAM,qBAAsBkJ,WAkB9D,SAASC,GAAiBD,GAC7B,8CAAO,WAAOE,GAAP,SAAAnI,EAAA,+EAAoBmI,EAASH,GAAkBC,KAA/C,2CAAP,mDAAM,GClBH,IAAMG,GAAe,WAExB,IAAID,EAAWE,cACTC,EAAUC,cAHc,EAKQrL,mBAAS,CAAC,KALlB,mBAKzBsL,EALyB,KAKXC,EALW,OAMcvL,mBAAS,aANvB,mBAMzBwL,EANyB,KAMRC,EANQ,KAOxBC,EAAoBC,uBAAY,kBAAMP,EAAQQ,KAAK,oBAAmB,CAACR,IACvES,EAAoBF,uBAAY,kBAAMP,EAAQQ,KAAK,OAAM,CAACR,IACtC7G,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAA7ChH,cAoBR,OAjBA0D,qBAAU,WAAM,4CACZ,sBAAA2B,EAAA,kEACIyI,EADJ,SAC0B/H,EAAYG,oBADtC,8EADY,uBAAC,WAAD,wBAKZD,KACD,IAEHvC,qBAAU,WAEN,IAAI2K,EAAcR,EAAarD,QAAO,SAAArH,GAAU,OAAOA,EAAKgE,cAAgB4G,KAC5EP,EAASD,GAAiBc,EAAY,OACvC,CAACN,IAMA,6BAASnL,UAAU,uBACf,qEACA,kBAAC4J,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYhD,UAAQ,EAACE,GAAG,sBACxB,kBAAC+C,EAAA,EAAD,CACIjD,UAAQ,EACRrF,KAAK,OACLuF,GAAG,iBACHhC,KAAK,iBACLuE,QAAQ,SACRC,MAAM,UACNvE,MAAOmG,EACPnE,SAAU,SAACnC,GAASuG,EAAmBvG,EAAGpH,OAAOuH,SAE7CiG,EAAa3K,KAAI,SAACyG,GAAD,OACb,kBAACgD,EAAA,EAAD,CACIjM,IAAKiJ,EAAGxC,YACRS,MAAO+B,EAAGxC,aACTwC,EAAGxC,kBAMxB,yBAAKvE,UAAU,WACXE,QAAS,WAAQmL,MACjB,wDAEJ,yBAAKrL,UAAU,WACXE,QAAS,WAAQsL,MACjB,0DC7DHE,GAAe,WAGxB,IAAMX,EAAUC,cACVW,EAAgBL,uBAAY,kBAAMP,EAAQQ,KAAK,oBAAmB,CAACR,IACnEH,EAAWE,cALa,GAMJ5G,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAA7ChH,cAEuBqH,EAAQ,CACnCF,YAAa,GACbqH,WAAY,GACZC,cAAe,MAXW,mBAQvBnB,EARuB,KAQf/B,EARe,KAcxBmD,EAAY,uCAAG,sBAAArJ,EAAA,sEACXmI,EAASD,GAAiBD,IADf,OAEjBlH,EAAeO,cAAc,WAAY2G,GAEzCiB,IAJiB,2CAAH,qDAOlB,OACI,6BAAS3L,UAAU,kBACf,0BAAM2G,OAAO,IACT,2BAAOC,QAAQ,cAAcsC,SAAU,SAACrE,GAASA,EAAG0B,mBAApD,qDAEI,2BACIQ,GAAG,cACHhC,KAAK,cACLvD,KAAK,OACLwF,SAAU,SAACnC,GAAS8D,EAAa9D,IACjCG,MAAO0F,EAAOnG,eAEtB,2BAAOqC,QAAQ,eAAf,qDAEI,2BACIG,GAAG,aACHhC,KAAK,aACLvD,KAAK,OACLwF,SAAU,SAACnC,GAAS8D,EAAa9D,IACjCG,MAAO0F,EAAOkB,cAEtB,yBAAK5L,UAAU,UAAUE,QAAS,WAAQ4L,MAA1C,+CAEA,kBAAC,IAAD,CAAM7L,GAAG,kBACL,yBAAKD,UAAU,mBAAf,gCCjDP+L,GAAc,SAAC,GAAc,IAAZxL,EAAW,EAAXA,KAEpBqK,EAAWE,cAOjB,OAHAhK,qBAAU,eAIN,6BAASd,UAAU,+BACf,2BAAIO,EAAKiB,MACT,2BAAIjB,EAAKmB,UACT,2BAAInB,EAAKnB,QACT,2BAAImB,EAAKoB,UACT,2BAAIpB,EAAKa,QACT,2BAAIb,EAAK1D,UACT,2BAAI0D,EAAKY,eACT,2BAAIZ,EAAKW,QAET,2BAAIX,EAAKsB,eAET,2BAAItB,EAAKuB,mBACT,2BAAIvB,EAAKwB,aACT,2BAAIxB,EAAKyB,cACT,yBACI9B,QAAS,SAAC2E,GACNA,EAAG0B,iBACHqE,GHCT,SAACA,GAAD,OAAcA,EA1BiB,CAAEpJ,KAAM,+BG2BlCxB,UAAU,iBALd,OClBCgM,GAAe,WAExB,IAAMpB,EAAWE,cAFa,EAGiB5G,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAAlEhH,EAHsB,EAGtBA,cAAeC,EAHO,EAGPA,oBAHO,EAIUsC,oBAAS,GAJnB,mBAIvBsM,EAJuB,KAITC,EAJS,OAKsBvM,mBAAS,IAL/B,mBAKvBwM,EALuB,KAKHC,EALG,OAOsBzM,oBAAS,GAP/B,mBAOvB0M,EAPuB,KAOHC,EAPG,KAqB9B,OAZAxL,qBAAU,YACgB,uCAAG,4BAAA2B,EAAA,sEACHU,EAAYI,iBAAiBnG,EAAcmH,aADxC,OACjBlE,EADiB,OAErB+L,EAAsB/L,GAFD,2CAAH,qDAItBkD,KACD,IAEHzC,qBAAU,WACNC,QAAQC,IAAI,gBAAiB5D,KAC9B,CAACA,IAGA,6BAAS4C,UAAU,mBACf,4BAAI,8BAAO5C,EAAcmH,aAAzB,0EAEA,yBAAKvE,UAAU,YACX,uBAAGE,QAAS,SAAC2E,GACTA,EAAG0B,iBACH2F,GAAgB,KAFpB,yCAICD,GAAgB,kBAAC,GAAD,OAErB,yBAAKjM,UAAU,eACX,6FACCmM,GAAsB,yBAAKnM,UAAU,sBACjCmM,EAAmB7L,KAAI,SAACC,GACrB,OAAO,yBACHzC,IAAKyC,EAAKE,IACVT,UAAU,aACVE,QAAS,WACLoM,EAAsB/L,GAEtBqK,GJpBrB,SAACA,GAAD,OAAcA,EA1BiB,CAAEpJ,KAAM,gCIkDtB,2BAAIjB,EAAKG,SAGhBrD,GAAuB,kBAAC,GAAD,CAAakD,KAAM8L,QCzDlDE,GAAO,WAEhB,OACI,6BAASvM,UAAU,wBACnB,kBAAC,IAAD,CAAMC,GAAG,kBACL,yBAAKD,UAAU,cAAf,0CAGJ,kBAAC,IAAD,CAAMC,GAAG,kBACT,yBAAKD,UAAU,mBAAf,4CCkBOwM,OAjBf,WACE,OACE,yBAAKxM,UAAU,mBACb,kBAACN,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+M,KAAK,SAASC,UAAYvM,IACjC,kBAAC,IAAD,CAAOsM,KAAK,SAASC,UAAYzI,IAEjC,kBAAC,IAAD,CAAOwI,KAAK,iBAAiBC,UAAYV,KACzC,kBAAC,IAAD,CAAOS,KAAK,iBAAiBC,UAAY7B,KACzC,kBAAC,IAAD,CAAO4B,KAAK,iBAAiBC,UAAYhB,KACzC,kBAAC,IAAD,CAAOe,KAAK,IAAIC,UAAYH,QCZ9BI,GAAcC,YAAgB,CAChCxI,WxBJW,WAAoD,IAA/BD,EAA8B,uDAAtBnH,EAAc2J,EAAQ,uCAC9D,OAAQA,EAAOnF,MACX,IAAK,qBACD,OAAO,eACA2C,EADP,CAEI/G,cAAeuJ,EAAO+D,SAE9B,IAAK,WACD,OAAO,eACAvG,EADP,CAEIlH,KAAM0J,EAAO1J,OAErB,IAAK,cAED,OADA8D,QAAQC,IAAI,UACL,eACAmD,EADP,CAEIhH,QAASgH,EAAMhH,SAEvB,IAAK,yBACD,OAAO,eACAgH,EADP,CAEI9G,qBAAsB8G,EAAM9G,sBAEpC,IAAK,aACD,OAAO,eACA8G,EADP,CAEIjH,SAAUyJ,EAAOzJ,WAEzB,IAAK,UACD,OAAO,eACAiH,EADP,CAEIlH,KAAK,GAAD,mBAAMkH,EAAMlH,MAAZ,CAAkB0J,EAAOkG,QAErC,IAAK,aACD,OAAO,eACA1I,EADP,CAEIlH,KAAMkH,EAAMlH,KAAKqD,KAAI,SAAAuM,GACjB,OAAIA,EAAIpM,MAAQkG,EAAOkG,IAAIpM,IAAYkG,EAAOkG,IACvCA,OAGnB,IAAK,aACD,OAAO,eACA1I,EADP,CAEIlH,KAAMkH,EAAMlH,KAAK2K,QAAO,SAAAiF,GAAG,OAAIA,EAAIpM,MAAQkG,EAAOmG,WAE1D,QACI,OAAO3I,MwBvCb4I,GAAmBnQ,OAAOoQ,sCAAwCC,IAClEC,GAAQC,YAAYR,GAAaI,GAAiBK,YAAgBC,OAExEC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,GAAD,QAGRM,SAASC,eAAe,SzByGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5K,MAAK,SAAA6K,GACjCA,EAAaC,iB","file":"static/js/main.fea074e8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n    cars: [],\r\n    filterBy: null,\r\n    isDark: false,\r\n    currentSurvey:{},\r\n    isTreePreviewShowen:false\r\n}\r\n\r\nexport default function TreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_SURVEY':\r\n            return {\r\n                ...state,\r\n                currentSurvey: action.survey\r\n            }\r\n        case 'SET_CARS':\r\n            return {\r\n                ...state,\r\n                cars: action.cars\r\n            }\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'TOGGLE_IS_PREVIEW_TREE':\r\n            return {\r\n                ...state,\r\n                isTreePreviewShowen: !state.isTreePreviewShowen\r\n            }\r\n        case 'SET_FILTER':\r\n            return {\r\n                ...state,\r\n                filterBy: action.filterBy\r\n            }\r\n        case 'ADD_CAR':\r\n            return {\r\n                ...state,\r\n                cars: [...state.cars, action.car]\r\n            }\r\n        case 'UPDATE_CAR':\r\n            return {\r\n                ...state,\r\n                cars: state.cars.map(car => {\r\n                    if (car._id === action.car._id) return action.car;\r\n                    return car;\r\n                })\r\n            }\r\n        case 'REMOVE_CAR':\r\n            return {\r\n                ...state,\r\n                cars: state.cars.filter(car => car._id !== action.carId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n});\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav className=\"main-nav \">\r\n                {!isMobile && <div className=\"left-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                    {/* <Link to='/'> <img src=\"imgs/logo.png\" alt=\"\" /></Link> */}\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\n\n\nexport const TreesImages = (...props) => {\n\n\n\n    const { trees } = props[0]\n    return (\n        <section  className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    < >\n                        {tree.imgUrl && <div key={tree._id} className=\"image-card\">\n                            <p >{tree.idx}</p>\n                            <img src={tree.imgUrl} alt=\"tree\" />\n                        </div>}\n                    </>\n                )\n            })}\n        </section>\n\n    )\n}","import React, { useEffect } from \"react\"\n\n\n\n\nexport const TreesTable = (...props) => {\n\n    useEffect(() => {\n        console.log('PROPS', props);\n    }, [props])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, monetaryValue, location, health } = tree\n        return (+canopy + +monetaryValue + +location + +health)\n    }\n\n    const calculateMonetaryValue = (tree) => {\n        const { canopy, monetaryValue, location, health } = tree\n        let sum = ((+canopy + +monetaryValue + +location + +health) / 5) * 20\n        return sum\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum < 6) return 'yellow'\n        else if (sum > 6 && 12 < sum) return 'grey'\n        else if (sum > 13 && 17 < sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {props[0].trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type.label}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.type.typeValue}</td>\n                                {/* <td>{tree.monetaryValue}</td> */}\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                <td>{calculateMonetaryValue(tree)}</td>\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>כריתה</td>\n                                <td>{tree.movingReason}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n\n            </table>\n\n\n        </section>\n    )\n\n\n}\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","import { httpService } from \"./httpService\"\n\n\nasync function save(tree) {\n    await httpService.put(`tree/save`, tree)\n        .then((res) => {\n            console.log(res);\n        })\n\n}\nasync function queryTrees(tableId) {\n    let trees = await httpService.get(`tree/`,tableId)\n    console.log(\"🌲 queryTrees\", trees)\n    return trees\n}\n\nasync function querySurveyIdList() {\n    let trees = await httpService.get(`tree/survey_id_list`)\n    console.log(\"🥳\", trees)\n    return trees\n}\nasync function querySurveyTrees(surveyId) {\n    let trees = await httpService.get(`tree/survey_trees`,surveyId)\n    console.log(\"🥳\", trees)\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    queryTrees,\n    querySurveyIdList,\n    querySurveyTrees\n}","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect, useState } from 'react'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\n\n\n\n\nexport const TreesSurvey = () => {\n\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n\n    let [trees, setTrees] = useState([])\n    let [currentTableId, setCurrentTableId] = useState('')\n    let [tableIdList, setTableIdList] = useState([''])\n\n\n    useEffect(() => {\n\n        console.log('currentSurvey table', currentSurvey);\n        \n        \n        async function queryTrees() {\n                \n            setTableIdList(await treeService.querySurveyIdList())\n            setTrees(await treeService.queryTrees(currentSurvey.surveyTitle))\n\n            if (Object.keys(currentSurvey).length === 0) {\n                let storageId= storageService.loadFromStorage('surveyId')\n                console.log(\"🚀 ~ file: TreesSurvey.jsx ~ line 26 ~ useEffect ~ storageId\", storageId)\n                setTrees(await treeService.queryTrees(storageId.surveyTitle))\n            }\n        }\n        queryTrees()\n    }, [])\n\n\n    return (\n\n        <section className=\"main-container trees-survey flex\">\n            <h1><span>{currentSurvey.surveyTitle}</span> טבלה סקר</h1>\n            {/* <div className=\"select-table\">\n                <p>בחר טבלה: </p>\n                <FormControl>\n                    <InputLabel required id=\"movingPossibility\">בחר טבלה: </InputLabel>\n                    <Select\n                        required\n                        type=\"text\"\n                        id=\"currentTableId\"\n                        name=\"currentTableId\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        value={currentTableId}\n                        onChange={(ev) => { setCurrentTableId(ev.target.value) }}>\n                        {\n                            tableIdList.map((id) => (\n                                <MenuItem\n                                    key={id}\n                                    value={id}>\n                                    {id}\n                                </MenuItem>\n                            ))\n                        }\n                    </Select>\n                </FormControl>\n            </div> */}\n            <TreesTable  trees={trees} />\n            <TreesImages   trees={trees} />\n        </section>\n\n\n    )\n\n}","import { useEffect, useState } from 'react'\r\n\r\nexport const useForm = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      const value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useHandleModal = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (field, value) {\r\n\r\n      console.log('(field,value)', field, value);\r\n      // const field = ev.target.name\r\n      // const value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n","import treeTypes from '../data/treeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n    ,\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notDefined',\n        label: 'לא מוגדר',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    recomandationOptions: recommendationOptions\n}\n","\nfunction uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n\n    const formData = new FormData();\n    formData.append('file', files[0])\n    console.log('ev.target.files[0]):', files[0])\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            console.log(res)\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","import React, {  useState } from \"react\"\nimport { cloudinaryService } from \"../services/cloudinaryService\"\n\nexport const CloudinaryUpload = (...props) => {\n\n    // const [name, setName] = useState('')\n    const [file, setFile] = useState(null)\n    const [isUpload, setIsUpload] = useState(false)\n\n    const sendFile = async ev => {\n        ev.preventDefault()\n        let imgUrlRes = await cloudinaryService.uploadImg(file)\n        setIsUpload(true)\n        setFile(imgUrlRes.url)\n        props[0].onGetImgUrl(imgUrlRes.url)\n    }\n\n    const fileHandler = ev => {\n        setFile(ev.target.files)\n    }\n\n    // const nameHandler = ev => {\n    //     const { value } = ev.target\n    //     setName(value)\n    // }\n\n    return (\n        <section className=\"upload-container\">\n            <form action=\"#\">\n                <div>\n                    <label htmlFor=\"file\"></label>\n                    <input\n                        required\n                        multiple\n                        name=\"file1\"\n                        type=\"file\"\n                        id=\"file\"\n                        onChange={(ev) => { fileHandler(ev) }} />\n                </div>\n                <button onClick={(ev) => sendFile(ev)} >Upload</button>\n            </form>\n            {file &&\n                <div className=\"image-preview\">\n                    <p>Preview</p>\n                    <img src={file} alt=\"image\" />\n                </div>\n            }\n        </section>\n    )\n}\n\n\n\n","import React, { useEffect, useState } from 'react'\nimport { formService } from '../services/formService'\n\nexport const FormAutocomplete = ({onSetTreeType}) => {\n\n    const [display, setDisplay] = useState(false)\n    const [options, setOptions] = useState([])\n    const [search, setSearch] = useState('')\n    const [treeObj, setTreeObj] = useState('')\n\n\n    useEffect(() => {\n        setOptions(formService.treeTypes)\n\n    }, [])\n\n\n\n    useEffect(() => {\n        console.log('🌲🌲', treeObj);\n\n\n    }, [treeObj])\n\n\n\n    const setTree = (tree) => {\n        setTreeObj(tree)\n        setSearch(tree.label)\n        onSetTreeType(treeObj)\n        setDisplay(false)\n    }\n\n    return (\n        <section className=\"autocomplete-form \">\n            <input onChange={(ev) => { setSearch(ev.target.value) }} value={search} type=\"text\" placeholder=\" מין העץ\" onClick={() => { setDisplay(!display) }} />\n            {display &&\n                <div className=\"autocomplete-container\">\n                    {options.filter((option) => option?.label?.includes(search)).map((v, i) => {\n                                return (\n                                    <div onClick={() => { setTree(v) }} className=\"tree-option\" key={v.label}>\n                                        <span>{v.label}</span>\n                                    </div>\n                                )\n                            })\n                        }\n                </div>\n            }\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { TextField, Button, MenuItem, Select, FormControl, Paper, InputLabel } from '@material-ui/core';\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { CloudinaryUpload } from './CloudinaryUpload';\n// import { storageService } from '../services/storageService';\nimport {  useSelector } from 'react-redux';\nimport { FormAutocomplete } from './FormAutocomplete';\n\n//specious\n\nexport const TreesForm = (...props) => {\n    \n    // const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    const [newSurveyId, setNewTableIdList] = useState('')\n    const [survyIdList, setSurvyIdList] = useState([''])\n    // const [CurrentSurveyId, setCurrentSurveyId] = useState('')\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n    const [form, handleChange] = useForm({\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        comments: '',\n        totalValue: '',\n        monetaryValue: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: '',\n        isPalmTree: false\n    })\n\n    const [isModalShown, HandleiIsModalShown] = useHandleModal({\n        health: false\n    })\n\n    useEffect(() => {\n        // setSurveyId(storageService.loadFromStorage('surveyId'))\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        async function queryTrees() {\n            setSurvyIdList(await treeService.querySurveyIdList())\n        }\n        queryTrees()\n    }, [surveyId])\n\n\n    useEffect(() => {\n    }, [treeType])\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        let treeCopy = { ...form }\n        treeCopy.type = treeType\n        treeCopy.surveyId = currentSurvey\n        treeCopy.imgUrl = imgUrl\n        treeService.save(treeCopy)\n    }\n\n    const onSetTreeType=(treeTypeObj)=>{\n        console.log(treeTypeObj);\n        setType(treeTypeObj);\n    }\n\n\n    return (\n        <div className=\"form-container\">\n\n             \n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                <div className=\"trees-form flex column\">\n                    <FormAutocomplete onSetTreeType={onSetTreeType} />\n                    <TextField\n                        ran\n                        required\n                        label=\"מספר עץ\"\n                        type=\"number\"\n                        id=\"idx\"\n                        name=\"idx\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        label=\"כמות עצים\"\n                        type=\"number\"\n                        id=\"quantity\"\n                        name=\"quantity\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        label=\"קוטר הגזע\"\n                        type=\"number\"\n                        id=\"diameter\"\n                        name=\"diameter\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <div onClick={() => HandleiIsModalShown('health', !isModalShown.health)} className=\"health-container\">מצב בריאותי</div>\n                    {isModalShown.health &&\n                        <div\n                            onClick={() => HandleiIsModalShown('health', !isModalShown.health)}\n                            className=\"form-modal health-modal\"\n                        >\n                            <div className=\"modal-container \">\n{/* \n                                <div className=\"modal-header \">\n                                <h4>מקרא מצב בריאותי</h4>\n                                <p>X</p>\n\n                            </div> */}\n                                <img src=\"/imgs/modal/healthModal.png\" alt=\"מקרא מצב בריאותי\" />\n                            </div>\n                        </div>}\n                    <TextField\n                        required\n                        InputProps={{\n                            inputProps: {\n                                max: 5,\n                                min: 0\n                            }\n                        }}\n                        label=\"מצב בריאותי\"\n                        placeholder=\"0-5\"\n                        type=\"number\"\n                        id=\"health\"\n                        name=\"health\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <div className=\"health-container\">גובה העץ</div>\n\n                    <TextField\n                        required\n                        label=\"גובה העץ (מטר)\"\n                        type=\"number\"\n                        id=\"height\"\n                        name=\"height\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        placeholder=\"0-5\"\n                        InputProps={{\n                            inputProps: {\n                                max: 5,\n                                min: 0\n                            }\n                        }}\n                        label=\"מיקום העץ\"\n                        type=\"number\"\n                        id=\"location\"\n                        name=\"location\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        placeholder=\"0-5\"\n                        InputProps={{\n                            inputProps: {\n                                max: 5,\n                                min: 0\n                            }\n                        }}\n                        label=\"ניקוד חופת עץ\"\n                        type=\"number\"\n                        id=\"canopy\"\n                        name=\"canopy\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        label=\"אזור שורשים מוגן\"\n                        type=\"number\"\n                        id=\"rootsDiameter\"\n                        name=\"rootsDiameter\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <FormControl>\n                        <InputLabel required id=\"movingPossibility\">היתכנות העתקה</InputLabel>\n                        <Select\n                            required\n                            label=\"היתכנות העתקה\"\n                            type=\"text\"\n                            id=\"movingPossibility\"\n                            name=\"movingPossibility\"\n                            variant=\"filled\"\n                            color=\"primary\"\n                            value={form.movingPossibility}\n                            onChange={(ev) => { handleChange(ev) }}>\n                            {\n                                formService.movingPossibility.map((option) => (\n                                    <MenuItem\n                                        key={option.value}\n                                        value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))\n                            }\n                        </Select>\n                    </FormControl>\n                    <TextField\n                        multiline\n                        required\n                        rows={4}\n                        label=\"הערות\"\n                        type=\"text\"\n                        id=\"description\"\n                        name=\"description\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <TextField\n                        required\n                        multiline\n                        rows={2}\n                        label=\"סיבת\n                        כריתה או\n                        העתקת\n                        העץ \"\n                        type=\"text\"\n                        id=\"movingReason\"\n                        name=\"movingReason\"\n                        variant=\"filled\"\n                        color=\"primary\"\n                        onChange={(ev) => { handleChange(ev) }} />\n                    <FormControl >\n                        <InputLabel required id=\"recommendation\">המלצה</InputLabel>\n                        <Select\n                            required\n                            type=\"text\"\n                            id=\"recommendation\"\n                            name=\"recommendation\"\n                            variant=\"filled\"\n                            color=\"primary\"\n                            value={form.recommendation}\n                            onChange={(ev) => { handleChange(ev) }}>\n                            {\n                                formService.recomandationOptions.map((option) => (\n                                    <MenuItem\n                                        key={option.value}\n                                        value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))\n                            }\n                        </Select>\n                    </FormControl>\n                </div>\n                <CloudinaryUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\">סיום </Button>\n            </form>\n            {/* <Sheet data={form} /> */}\n        </div>\n    )\n}\n","import { storageService } from './storageService.js'\r\n// import { books } from '../data/books'\r\nimport books from '../data/books.json'\r\n\r\n\r\n\r\n\r\nexport const carService = {\r\n    query,\r\n    save,\r\n    remove,\r\n    getById,\r\n    getEmptyCar\r\n}\r\n\r\nvar gDefaultCars = [\r\n    { _id: 'c1', vendor: 'audu', speed: 210, imgName: 'c1' },\r\n    { _id: 'c2', vendor: 'subali', speed: 180, imgName: 'c2' },\r\n    { _id: 'c3', vendor: 'fiak', speed: 80, imgName: 'c3' },\r\n    { _id: 'c4', vendor: 'makda', speed: 100, imgName: 'c4' }\r\n]\r\n\r\nconst STORAGE_KEY = 'cars'\r\nconst gCars = _loadCars()\r\n\r\nfunction query(filterBy) {\r\n    // console.log('🦾', books);\r\n    console.log(books);\r\n    let carsToReturn = gCars;\r\n    if (filterBy) {\r\n        var { vendor, maxSpeed, minSpeed } = filterBy\r\n        maxSpeed = maxSpeed || Infinity\r\n        minSpeed = minSpeed || 0\r\n        carsToReturn = gCars.filter(car => car.vendor.toLowerCase().includes(vendor.toLowerCase())\r\n            && (car.speed < maxSpeed)\r\n            && car.speed > minSpeed)\r\n    }\r\n    return Promise.resolve([...carsToReturn]);\r\n}\r\n\r\nfunction getById(id) {\r\n    const car = gCars.find(car => car._id === id)\r\n    return Promise.resolve(car)\r\n}\r\n\r\nfunction remove(id) {\r\n    const idx = gCars.findIndex(car => car._id === id)\r\n    gCars.splice(idx, 1)\r\n    storageService.saveToStorage(STORAGE_KEY, gCars)\r\n    return Promise.resolve()\r\n}\r\n\r\nfunction save(carToSave) {\r\n    if (carToSave._id) {\r\n        const idx = gCars.findIndex(car => car._id === carToSave._id)\r\n        gCars.splice(idx, 1, carToSave)\r\n\r\n    } else {\r\n        carToSave._id = _makeId()\r\n        carToSave.imgName = 'default'\r\n        gCars.push(carToSave)\r\n    }\r\n    storageService.saveToStorage(STORAGE_KEY, gCars)\r\n    return Promise.resolve(carToSave);\r\n}\r\nfunction getEmptyCar() {\r\n    return {\r\n        vendor: '',\r\n        speed: ''\r\n    }\r\n}\r\nfunction _loadCars() {\r\n    let cars = storageService.loadFromStorage(STORAGE_KEY)\r\n    if (!cars || !cars.length) cars = gDefaultCars\r\n    storageService.saveToStorage(STORAGE_KEY, cars)\r\n    return cars\r\n}\r\n\r\nfunction _makeId(length = 5) {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n}\r\n","import { carService } from '../services/carService';\r\n\r\n// Dispatchers\r\nconst _removeCar = (carId) => ({ type: 'REMOVE_CAR', carId });\r\nconst _setCars = (cars) => ({ type: 'SET_CARS', cars });\r\nconst _setFilter = (filterBy) => ({ type: 'SET_FILTER', filterBy });\r\nconst _toggleDark = () => ({ type: 'TOGGLE_DARK' });\r\nconst _toggleIsTreePreviewShowen = () => ({ type: 'TOGGLE_IS_PREVIEW_TREE' });\r\nconst _setCurrentSurvey = (survey) => ({ type: 'SET_CURRENT_SURVEY', survey });\r\n\r\n// THUNK\r\nexport function loadCars(filterBy) {\r\n    return async (dispatch) => {\r\n        const cars = await carService.query(filterBy);\r\n        dispatch(_setCars(cars));\r\n    }\r\n}\r\nexport function removeCar(carId) {\r\n    return async (dispatch) => {\r\n        carService.remove(carId)\r\n        dispatch(_removeCar(carId))\r\n    }\r\n}\r\nexport function setFilter(filterBy) {\r\n    return async (dispatch) => dispatch(_setFilter(filterBy))\r\n}\r\nexport function setCurrentSurvey(survey) {\r\n    return async (dispatch) => dispatch(_setCurrentSurvey(survey))\r\n}\r\nexport function toggleDark() {\r\n    return (dispatch) => dispatch(_toggleDark())\r\n}\r\nexport function toggleIsTreePreviewShowen() {\r\n    return (dispatch) => dispatch(_toggleIsTreePreviewShowen())\r\n}\r\n\r\nexport function saveCar(car) {\r\n    return async (dispatch, getState) => {\r\n        const type = car._id ? 'UPDATE_CAR' : 'ADD_CAR';\r\n        const savedCar = await carService.save(car)\r\n        dispatch({ type, car: savedCar })\r\n    }\r\n}\r\n","import { Link, useHistory } from 'react-router-dom'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSurvey } from '../actions/TreeActions';\n\n\n\nexport const ChooseSurvey = () => {\n\n    let dispatch = useDispatch()\n    const history = useHistory();\n    // let [trees, setTrees] = useState([])\n    let [surveyIdList, setSurveyIdList] = useState([''])\n    let [currentSurveyId, setCurrentSurveyId] = useState('kfar saba')\n    const handleOnClickNext = useCallback(() => history.push('/survey_editor'), [history]);\n    const handleOnClickBack = useCallback(() => history.push('/'), [history]);\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n\n    useEffect(() => {\n        async function queryTrees() {\n            setSurveyIdList(await treeService.querySurveyIdList())\n            // setTrees(await treeService.query(currentSurveyId))\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n\n        let filterdList = surveyIdList.filter(tree => { return tree.surveyTitle === currentSurveyId })\n        dispatch(setCurrentSurvey(filterdList[0]))\n    }, [currentSurveyId])\n\n\n\n\n    return (\n        <section className=\"choose-section flex\">\n            <h1>בחר סקר</h1>\n            <FormControl>\n                <InputLabel required id=\"movingPossibility\"></InputLabel>\n                <Select\n                    required\n                    type=\"text\"\n                    id=\"currentTableId\"\n                    name=\"currentTableId\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                    value={currentSurveyId}\n                    onChange={(ev) => { setCurrentSurveyId(ev.target.value) }} >\n                    {\n                        surveyIdList.map((id) => (\n                            <MenuItem\n                                key={id.surveyTitle}\n                                value={id.surveyTitle}>\n                                {id.surveyTitle}\n                            </MenuItem>\n                        ))\n                    }\n                </Select>\n            </FormControl>\n            <div className=\"next-btn\"\n                onClick={() => { handleOnClickNext() }} >\n                <p>המשך</p>\n            </div>\n            <div className=\"back-btn\"\n                onClick={() => { handleOnClickBack() }} >\n                <p>חזור</p>\n            </div>\n        </section>\n    )\n}","import React, { useCallback } from 'react'\nimport { useForm } from '../services/customHooks'\nimport { Link,useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentSurvey } from '../actions/TreeActions'\nimport { storageService } from '../services/storageService';\n\n\nexport const CreateSurvey = () => {\n\n    \n    const history = useHistory();\n    const handleOnClick = useCallback(() => history.push('/survey_editor'), [history]);\n    const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    const [survey, handleChange] = useForm({\n        surveyTitle: '',\n        surveyDate: '',\n        surveySummary: ''\n    })\n\n    const addNewSurvey = async () => {\n        await dispatch(setCurrentSurvey(survey))\n        storageService.saveToStorage('surveyId', survey)\n\n        handleOnClick()\n    }\n\n    return (\n        <section className=\"new-survey rtl\">\n            <form action=\"\">\n                <label htmlFor=\"surveyTitle\" onSubmit={(ev) => { ev.preventDefault() }}>\n                    כותרת סקר:\n                    <input\n                        id=\"surveyTitle\"\n                        name=\"surveyTitle\"\n                        type=\"text\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyTitle} />\n                </label>\n                <label htmlFor=\"surveyTitle\">\n                    תאריך סקר:\n                    <input\n                        id=\"surveyDate\"\n                        name=\"surveyDate\"\n                        type=\"date\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyDate} />\n                </label>\n                <div className=\"add-btn\" onClick={() => { addNewSurvey() }}>הוסף סקר</div>\n\n                <Link to=\"/choose_survey\" >\n                    <div className=\"existing-survey\">חזרה</div>\n                </Link>\n\n            </form>\n        </section>\n\n    )\n}","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\n\nexport const TreePreview = ({ tree }) => {\n\n    const dispatch = useDispatch()\n    // const { currentSurvey,isTreePreviewShowen } = useSelector(state => state.TreeModule)\n\n\n    useEffect(() => {\n    })\n\n    return (\n        <section className=\"main-container tree-preview\">\n            <p>{tree.type}</p>\n            <p>{tree.quantity}</p>\n            <p>{tree.height}</p>\n            <p>{tree.diameter}</p>\n            <p>{tree.health}</p>\n            <p>{tree.location}</p>\n            <p>{tree.monetaryValue}</p>\n            <p>{tree.canopy}</p>\n            {/* <p className={ValueColor(tree)}>{calculateValue(tree)}</p> */}\n            <p>{tree.rootsDiameter}</p>\n            {/* <p>{calculateMonetaryValue(tree)}</p> */}\n            <p>{tree.movingPossibility}</p>\n            <p>{tree.description}</p>\n            <p>{tree.movingReason}</p>\n            <div\n                onClick={(ev) => {\n                    ev.preventDefault()\n                    dispatch(toggleIsTreePreviewShowen())\n                }}\n                className=\"close-preview\">X</div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TreesForm } from '../cmps/TreesForm'\nimport { treeService } from '../services/treeService'\nimport { storageService } from '../services/storageService';\nimport { TreePreview } from '../cmps/TreePreview';\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions';\n\n\n\n\nexport const SurveyEditor = () => {\n\n    const dispatch = useDispatch()\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const [isAddingTree, setIsAddingTree] = useState(false)\n    const [currentSurveyTrees, setCurrentSurveyTrees] = useState([])\n    // const [isChangeSurvey, setIsChangeSurvey] = useState(false)\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n\n    useEffect(() => {\n        const querySurveyTrees = async () => {\n            let trees = await treeService.querySurveyTrees(currentSurvey.surveyTitle)\n            setCurrentSurveyTrees(trees)\n        }\n        querySurveyTrees()\n    }, [])\n\n    useEffect(() => {\n        console.log('currentSurvey', currentSurvey);\n    }, [currentSurvey])\n\n    return (\n        <section className=\"main-container \">\n            <h1><span>{currentSurvey.surveyTitle}</span> טופס סקר עצים </h1>\n\n            <div className=\"add-tree\">\n                <p onClick={(ev) => {\n                    ev.preventDefault()\n                    setIsAddingTree(true)\n                }}>הוסף עץ</p>\n                {isAddingTree && <TreesForm />}\n            </div>\n            <div className=\"other-trees\">\n                <h3>עצים נוספים</h3>\n                {currentSurveyTrees && <div className=\"current-trees flex\">\n                    {currentSurveyTrees.map((tree) => {\n                        return <div\n                            key={tree._id}\n                            className=\"tree-index\"\n                            onClick={() => {\n                                setCurrentPreviewTree(tree)\n                                // setIsTreePreviewShowen(true)\n                                dispatch(toggleIsTreePreviewShowen())\n\n                            }}\n                        >\n                            <p>{tree.idx}</p>\n                        </div>\n                    })}\n                    {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} />}\n                </div>}\n            </div>\n\n\n        </section>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\n    return (\n        <section className=\"home-container flex \">\n        <Link to=\"/create_survey\" >\n            <div className=\"new-survey\">סקר חדש</div>\n        </Link>\n\n        <Link to=\"/choose_survey\" >\n        <div className=\"existing-survey\">בחר סקר</div>\n        </Link>\n    </section>\n\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { TreesForm } from './cmps/TreesForm';\nimport { ChooseSurvey } from './pages/ChooseSurvey';\nimport { CreateSurvey } from './pages/CreateSurvey';\nimport { SurveyEditor } from './pages/SurveyEditor';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/about\" component={ About } />\n        <Route path=\"/trees\" component={ TreesSurvey } />\n        {/* <Route path=\"/form\" component={ TreesForm } /> */}\n        <Route path=\"/survey_editor\" component={ SurveyEditor } />\n        <Route path=\"/choose_survey\" component={ ChooseSurvey } />\n        <Route path=\"/create_survey\" component={ CreateSurvey } />\n        <Route path=\"/\" component={ Home } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport TreeReducer from './reducers/TreeReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    TreeModule: TreeReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}