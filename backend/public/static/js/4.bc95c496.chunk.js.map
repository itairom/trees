{"version":3,"sources":["cmps/TreesImages.jsx","cmps/table/TreesTypesTable.jsx","cmps/table/TreesTable.jsx","cmps/table/TreeRecommendationTable.jsx","pages/FinalSurvey.jsx"],"names":["TreesImages","trees","className","map","tree","key","_id","idx","imgUrl","src","alt","MemoTreesTypesTable","memo","useState","treeTypeObj","setTreeTypeObj","treeTypeKeysArr","setTreeTypeKeysArr","totalvaluesArr","setTotalvaluesArr","useEffect","mapTreeValue","ValueColor","sum","canopy","location","health","type","typeValue","calculateValue","localTotalvaluesArr","lowPriority","mediumPriority","highPriority","veryHighPriority","typeObj","i","length","NTL","label","value","hasOwnProperty","treeKeys","Object","keys","objToArr","values","reduce","a","b","TreesTable","ReactExport","ExcelFile","ExcelSheet","setIsMobile","draggableTrees","setDraggableTrees","history","useHistory","loggedInUser","useSelector","state","appModule","survey","TreeModule","windowSize","useWindowSize","dispatch","useDispatch","width","survyCopy","surveyTrees","updateSurvey","sumTreeProperties","calculateTreeValue","Math","pow","diameter","quantity","toFixed","memoCalculateTreeValue","useCallback","console","log","calculatePalmTreeValue","height","memoCalculatePalmTreeValue","removeTree","treeId","filterdArray","filter","s2ab","s","buf","ArrayBuffer","view","Uint8Array","charCodeAt","id","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderItem","droppableId","provided","droppableProps","ref","innerRef","draggableId","style","backgroundColor","position","draggableProps","dragHandleProps","rootsDiameter","isPalmTree","movingPossibility","description","recommendation","movingReason","onClick","push","wb","XLSX","utils","table_to_book","document","querySelector","sheet","wbout","write","bookType","bookSST","saveAs","Blob","surveyInfo","surveyTitle","aria-multiline","TreeRecommendationTable","recommendationTable","setRecommendationTable","sumRecommendations","recArr","preserve","relocation","amputation","notDefined","total","forEach","rec","recLabelConvert","numToPercentage","FinalSurvey","currentSurvey","localSurvey","setLocalSurvey","query","storageSurveyId","storageService","loadFromStorage","querySurvey","username","onRemoveTree","treeService","LazyFinalSurvey"],"mappings":"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","file":"static/js/4.bc95c496.chunk.js","sourcesContent":["import React from \"react\"\n\nexport const TreesImages = (...props) => {\n\n    const { trees } = props[0]\n    return (\n        <section className=\"trees-images flex\">\n            {trees?.map((tree) => {\n                return (\n                    <div key={tree._id} className=\"image-card pointer\">\n                        <p >{tree.idx}</p>\n                        {tree.imgUrl !== '' && <img key={tree._id} src={tree.imgUrl} alt=\"tree\" />}\n                        {tree.imgUrl === '' && <img key={tree._id} src=\"imgs/tree_silhouette.png\" alt=\"tree\" />}\n                    </div>\n                )\n            })}\n        </section>\n\n    )\n}","import React, { memo,  useEffect, useState } from \"react\"\n\nconst TreesTypesTable = ({ trees }) => {\n\n    const [treeTypeObj, setTreeTypeObj] = useState([])\n    const [treeTypeKeysArr, setTreeTypeKeysArr] = useState([])\n    const [totalvaluesArr, setTotalvaluesArr] = useState({})\n\n    useEffect(() => {\n        // callbackMapTreeValue(trees)\n        mapTreeValue(trees)\n    }, [trees])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'lowPriority'\n        else if (sum > 6 && 14 > sum) return 'mediumPriority'\n        else if (sum > 13 && 17 > sum) return 'highPriority'\n        else return 'veryHighPriority'\n    }\n\n\n    const getTotalvaluesArr = () => {\n        return (\n            {\n                lowPriority: 0,\n                mediumPriority: 0,\n                highPriority: 0,\n                veryHighPriority: 0\n            }\n        )\n    }\n\n\n    const mapTreeValue = (trees) => { // improve the code!\n\n        let localTotalvaluesArr = getTotalvaluesArr()\n        let typeObj = {}\n        for (let i = 0; i < trees?.length; i++) {\n            let NTL = trees[i].type.label\n            let value = ValueColor(trees[i])\n            if (!typeObj.hasOwnProperty(NTL)) {\n                let NTL = trees[i].type.label\n                typeObj[NTL] = {\n                    'highPriority': 0,\n                    'lowPriority': 0,\n                    'mediumPriority': 0,\n                    'veryHighPriority': 0,\n                    'total': 0\n                }\n            }\n            ++localTotalvaluesArr[value]\n            ++typeObj[NTL][value]\n            ++typeObj[NTL]['total']\n        }\n\n\n        const treeKeys = Object.keys(typeObj)\n        const objToArr = Object.values(typeObj)\n        setTreeTypeObj(objToArr)\n        setTreeTypeKeysArr(treeKeys)\n        setTotalvaluesArr(localTotalvaluesArr)\n    }\n\n    // const callbackMapTreeValue = useCallback((trees) => {\n    //     mapTreeValue(trees)\n    // }, [trees])\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <thead>\n                    <tr key=\"tree-type-header\">\n                        <th className=\"white\">מין העץ/תאור\n                            הפוליגון</th>\n                        <th className=\"red\">ערכיות גבוהה מאוד **</th>\n                        <th className=\"green\">ערכיות גבוהה **</th>\n                        <th className=\"grey\">ערכיות בינונית **</th>\n                        <th className=\"yellow\">ערכיות נמוכה **</th>\n                        <th className=\"white\">סה״כ</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {treeTypeKeysArr && treeTypeObj?.map((tree, idx) => {\n                        return (\n                            <tr key={'tree-type-' + idx}>\n                                {<td>{treeTypeKeysArr[idx]}</td>}\n                                {<td>{tree['veryHighPriority']}</td>}\n                                {<td>{tree['highPriority']}</td>}\n                                {<td>{tree['mediumPriority']}</td>}\n                                {<td>{tree['lowPriority']}</td>}\n                                {<td>{tree['total']}</td>}\n                            </tr>\n                        )\n                    })}\n                    <tr key='total-values'>\n                        {<td>סה״כ</td>}\n                        {<td>{totalvaluesArr['veryHighPriority']}</td>}\n                        {<td>{totalvaluesArr['highPriority']}</td>}\n                        {<td>{totalvaluesArr['mediumPriority']}</td>}\n                        {<td>{totalvaluesArr['lowPriority']}</td>}\n                        {<td>{Object.values(totalvaluesArr).reduce((a, b) => a + b, 0)}</td>}\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\nexport const MemoTreesTypesTable = memo(TreesTypesTable)\n\n","import React, { useCallback, useEffect, useState } from \"react\"\nimport XLSX from 'xlsx';\nimport { saveAs } from 'file-saver'\nimport { useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router\"\nimport useWindowSize from \"../../services/customHooks\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\nimport { useDispatch } from \"react-redux\"\nimport { updateSurvey } from \"../../actions/TreeActions\"\nimport ReactExport from 'react-data-export';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n\n\nexport const TreesTable = ({ trees }) => {\n\n    const [isMobile, setIsMobile] = useState(false)\n    const [draggableTrees, setDraggableTrees] = useState(trees)\n    const history = useHistory()\n    const { loggedInUser } = useSelector(state => state.appModule)\n    const { survey } = useSelector(state => state.TreeModule)\n    const windowSize = useWindowSize()\n    const dispatch = useDispatch()\n\n    const DataSet = [\n        {\n            columns: [\n                { title: 'h1', style: { font: { bold: true } } },\n                { title: 'h1', style: { font: { bold: true } } },\n                { title: 'h1', style: { font: { bold: true } } },\n                { title: 'h1', style: { font: { bold: true } } }\n            ],\n            data: [\n                { value: 'abc' },\n                { value: 'abc' },\n                { value: 'abc' },\n                { value: 'abc' }\n            ]\n        }\n\n\n    ]\n\n    useEffect(() => {\n        if (trees) setDraggableTrees(trees)\n    }, [trees])\n\n\n    useEffect(() => {\n        windowSize.width < 500 ? setIsMobile(true) : setIsMobile(false)\n    }, [windowSize])\n\n    useEffect(() => {\n        const survyCopy = { ...survey }\n        survyCopy.surveyTrees = draggableTrees\n        if (trees) dispatch(updateSurvey(survyCopy, loggedInUser))\n    }, [draggableTrees])\n\n    const sumTreeProperties = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateTreeValue = (tree) => {\n        const sum = (((tree.location * +tree.type.typeValue * tree.health) / 5) * (Math.pow((tree.diameter / 2), 2) * 3.14) / 5) * 20\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const memoCalculateTreeValue = useCallback((tree) => {\n        console.log('✂️✂️✂️✂️✂️✂️✂️✂️');\n        calculateTreeValue(tree)\n    }, [trees])\n\n    const calculatePalmTreeValue = (tree) => {\n        const sum = (tree.height * ((tree.location / 5 * +tree.type.typeValue / 5 * +tree.health / 5))) * 1500\n        return tree.quantity * sum.toFixed(2)\n    }\n\n    const memoCalculatePalmTreeValue = useCallback((tree) => {\n        calculatePalmTreeValue(tree)\n    }, [trees])\n\n    const ValueColor = (tree) => {\n        let sum = sumTreeProperties(tree)\n        if (sum <= 6) return 'yellow'\n        else if (sum > 6 && 14 > sum) return 'grey'\n        else if (sum > 13 && 17 > sum) return 'green'\n        else return 'red'\n    }\n\n    const recommendationColor = (recommendation) => {\n        if (recommendation === 'כריתה') return 'yellow'\n        if (recommendation === 'שימור') return 'red'\n        if (recommendation === 'העתקה') return 'orange'\n        else return 'blue'\n    }\n\n    const handleOnDragEnd = (result) => {\n        if (!result.destination) return\n        const items = Array.from(draggableTrees)\n        const [reorderItem] = items.splice(result.source.index, 1)\n        items.splice(result.destination.index, 0, reorderItem)\n        setDraggableTrees(items)\n    }\n    const removeTree = (treeId) => {\n        const filterdArray = draggableTrees.filter((tree) => {\n            return tree._id !== treeId\n        })\n        setDraggableTrees(filterdArray)\n\n    }\n\n    function s2ab(s) {\n        var buf = new ArrayBuffer(s.length);\n        var view = new Uint8Array(buf);\n        for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n        return buf;\n    }\n\n    return (\n        <section className=\"trees-table \">\n            <table id=\"main-table\">\n                <thead>\n\n                    <tr>\n                        <th>מספר\n                            העץ/פוליגון </th>\n                        <th>מין העץ/תאור\n                            הפוליגון</th>\n                        <th>כמות עצים</th>\n                        <th>**גובה\n                            העץ\n                            (מ')</th>\n                        <th>*קוטר\n                            גזע\n                            (ס\"מ)</th>\n                        <th>מצב\n                            בריאותי\n                            (0-5)</th>\n                        <th>מיקום\n                            העץ\n                            (0-5)</th>\n                        <th>ערך\n                            מין\n                            העץ\n                            (0-5)</th>\n                        <th>ניקוד\n                            חופת\n                            העץ\n                            (0-5)</th>\n                        <th>סך ערכיות\n                            העץ/פוליגון\n                            (0-20)</th>\n                        <th>***אזור\n                            שורשים\n                            מוגן\n                            רדיוס\n                            במ'</th>\n                        <th>שווי\n                            העצים ב\n                            ₪</th>\n                        <th>היתכנות העתקה </th>\n                        <th>הערות</th>\n                        <th>המלצות</th>\n                        <th>סיבת כריתה או העתקת העץ</th>\n                    </tr>\n                </thead>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"trees-desktop\">\n                        {(provided) => (\n                            <tbody {...provided.droppableProps} ref={provided.innerRef}>\n                                {draggableTrees?.map((tree, idx) => {\n                                    return (\n                                        <Draggable\n                                            key={tree._id} draggableId={tree._id} index={idx}>\n                                            {(provided) => (\n                                                <tr\n                                                    style={{\n                                                        backgroundColor: 'red !important',\n                                                        position: 'absolute'\n                                                    }}\n\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    ref={provided.innerRef}>\n                                                    {tree.idx &&\n                                                        <td>{tree.idx}\n                                                        </td>}\n                                                    <td>{tree.type.label}</td>\n                                                    <td>{tree.quantity}</td>\n                                                    <td>{tree.height}</td>\n                                                    <td>{tree.diameter}</td>\n                                                    <td>{tree.health}</td>\n                                                    <td>{tree.location}</td>\n                                                    <td>{tree.type.typeValue}</td>\n                                                    <td>{tree.canopy}</td>\n                                                    <td className={ValueColor(tree)}>{sumTreeProperties(tree)}</td>\n                                                    <td>{tree.rootsDiameter}</td>\n                                                    {/* {!tree.isPalmTree && <td>{calculateTreeValue(tree)}</td>} */}\n                                                    {!tree.isPalmTree && <td>{memoCalculateTreeValue(tree)}</td>}\n                                                    {tree.isPalmTree && <td>{memoCalculatePalmTreeValue(tree)}</td>}\n                                                    <td>{tree.movingPossibility}</td>\n                                                    <td>{tree.description}</td>\n                                                    <td className={recommendationColor(tree.recommendation)}>{tree.recommendation}</td>\n                                                    <td>{tree.movingReason}</td>\n                                                    <td>\n\n                                                        <div\n                                                            onClick={() => { history.push(`tree_update/${tree._id}`) }}\n                                                            className=\"edit-btn btn\">עריכה</div >\n                                                        <div\n                                                            onClick={() => { removeTree(tree._id) }}\n                                                            className=\"delete-btn btn\">מחיקה</div >\n                                                    </td>\n                                                </tr>\n                                            )}\n                                        </Draggable>\n                                    )\n                                })}\n                            </tbody>\n                        )}\n                    </Droppable>\n                </DragDropContext >\n\n            </table>\n                <button\n                    className=\"download-table\"\n                    onClick={() => {\n                        let wb = XLSX.utils.table_to_book(document.querySelector('#main-table'), { sheet: 'sheetJs' })\n                        let wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' })\n\n\n\n                        saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), `סקר ${survey.surveyInfo.surveyTitle}.xlsx`);\n                    }}\n                >הורדה</button>\n\n                {/* <ExcelFile element={<button>Download Data With Styles</button>}>\n                    <ExcelSheet dataSet={DataSet} name=\"Organization\" />\n                </ExcelFile> */}\n\n            <section className=\"mobile-table\">\n                {trees?.map((tree, idx) => {\n                    return (\n                        <div className=\"mobile-tree-card\" key={tree._id}>\n                            <div className=\"flex\">\n                                <p>אינדקס</p>\n                                <p>{tree.idx}</p>\n\n                            </div>\n                            <div className=\"flex\">\n                                <p>סוג עץ</p>\n                                <p>{tree.type.label}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p> כמות</p>\n                                <p>{tree.quantity}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>גובה</p>\n                                <p>{tree.height}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>קוטר</p>\n                                <p>{tree.diameter}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>מצב בריאותי</p>\n                                <p>{tree.health}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>מיקום</p>\n                                <p>{tree.location}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ערך עץ</p>\n                                <p>{tree.type.typeValue}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ניקוד חופת עץ</p>\n                                <p>{tree.canopy}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>ערך עץ</p>\n                                <p className={ValueColor(tree)}>{sumTreeProperties(tree)}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>קוטר שורשרים</p>\n                                <p>{tree.rootsDiameter}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>שווי כספי</p>\n                                {!tree.isPalmTree && <p>{calculateTreeValue(tree)}</p>}\n                                {tree.isPalmTree && <p>{calculatePalmTreeValue(tree)}</p>}\n                            </div>\n                            <div className=\"flex\">\n                                <p>אפשרות העתקה</p>\n                                <p>{tree.movingPossibility}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>תיאור</p>\n                                <p aria-multiline=\"true\">{tree.description}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>המלצה</p>\n                                <p>{tree.recommendation}</p>\n                            </div>\n                            <div className=\"flex\">\n                                <p>סיבת העברה</p>\n                                <p>{tree.movingReason}</p>\n                            </div>\n                            <div\n                                onClick={() => { history.push(`tree_update/${tree._id}`) }}\n                                className=\"edit-btn btn\">עריכה</div >\n                            <div\n                                onClick={() => { removeTree(tree._id) }}\n                                className=\"delete-btn btn\">מחיקה</div >\n                        </div>\n                    )\n                })\n\n                }\n           \n            </section>\n        </section >\n    )\n\n\n}\n\n","import React, { useEffect, useState } from \"react\"\n\nexport function TreeRecommendationTable({ trees }) {\n\n  const [recommendationTable, setRecommendationTable] = useState({\n\n  })\n\n  useEffect(() => {\n    sumRecommendations()\n  }, [trees])\n\n  useEffect(() => {\n  }, [recommendationTable])\n\n  const recLabelConvert = (rec) => {\n    switch (rec) {\n      case 'שימור':\n        return 'preserve'\n      case 'העתקה':\n        return 'relocation'\n      case 'כריתה':\n        return 'amputation'\n      default:\n        return 'אינו מוגדר עץ בוגר'\n    }\n  }\n\n  const sumRecommendations = () => {\n    const recArr = {\n      preserve: 0,\n      relocation: 0,\n      amputation: 0,\n      notDefined: 0,\n      total: 0\n    }\n    if (trees) {\n      trees.forEach(tree => {\n        const rec = recLabelConvert(tree.recommendation)\n        recArr[rec]++\n        recArr.total++\n      })\n      setRecommendationTable(recArr)\n    }\n  }\n\n\n  const numToPercentage = (type) => {\n    const res = (((type / trees?.length) * 100).toFixed(0))\n    return (res + '%')\n  }\n\n  return (\n    <section className='tree-recommendation-table trees-table flex cloumn'>\n\n      <table>\n        <thead className=\"green\">\n          <tr className=\"green\" key=\"\">\n            <th >המלצה</th>\n            <th >מס׳ עצים</th>\n            <th >סה״כ</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>סה״כ עצים לשימור</td>\n            <td>{recommendationTable.preserve}</td>\n            <td>{numToPercentage(recommendationTable.preserve)}</td>\n          </tr>\n          <tr>\n            <td>סה״כ עצים להעתקה</td>\n            <td>{recommendationTable.relocation}</td>\n            <td>{numToPercentage(recommendationTable.relocation)}</td>\n          </tr>\n          <tr>\n            <td>סה״כ עצים לכריתה</td>\n            <td>{recommendationTable.amputation}</td>\n            <td>{numToPercentage(recommendationTable.amputation)}</td>\n          </tr>\n          <tr>\n            <td>סה\"כ עצים בוגרים בשטח</td>\n            <td>{recommendationTable.total}</td>\n            <td>{numToPercentage(recommendationTable.total)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  )\n}","\nimport React, { useEffect, useState } from 'react'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\nimport { MemoTreesTypesTable } from '../cmps/table/TreesTypesTable';\nimport { TreesTable } from '../cmps/table/TreesTable';\nimport { TreeRecommendationTable } from '../cmps/table/TreeRecommendationTable';\nimport { useDispatch } from 'react-redux';\nimport { querySurvey } from '../actions/TreeActions';\n// const TreesTypesTable = lazy(() => import('../cmps/TreesTypesTable'))\n\nexport const FinalSurvey = () => {\n\n    const { currentSurvey, survey } = useSelector(state => state.TreeModule)\n    const { loggedInUser } = useSelector(state => state.appModule)\n    let [localSurvey, setLocalSurvey] = useState({})\n    // let [tableIdList, setTableIdList] = useState([''])\n    const [localSurveyId, setLocalSurveyId] = useState('')\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        query()\n    }, [loggedInUser])\n    \n    useEffect(() => {\n        setLocalSurvey(survey)\n    }, [survey])\n\n    const query = async () => {\n        const storageSurveyId = storageService.loadFromStorage('surveyId')\n        if (storageSurveyId) {\n            dispatch(querySurvey(storageSurveyId.surveyTitle, loggedInUser.username))\n        }\n    }\n\n    // useEffect(() => { //CHECK IF NECCECERY\n    //     async function queryTrees() {\n    //         if (currentSurvey) {\n    //             setTrees(await treeService.queryTrees(localSurveyId?.surveyTitle))\n    //         }\n    //     }\n    //     queryTrees()\n    // }, [localSurveyId])\n\n    // useEffect(() => {\n    //     queryTrees()\n    // }, [currentSurvey, loggedInUser])\n\n    const onRemoveTree = (tree) => {\n        treeService.removeTree(tree._id, loggedInUser.username)\n        // queryTrees()\n    }\n\n    return (\n        <section id=\"main-survey\" className=\"main-container  \">\n            <div className=\"final-survey\">\n                {/* <h1>טבלה סקר <span>{currentSurvey?.surveyTitle || localSurveyId?.surveyTitle}</span></h1> */}\n                <TreesTable onRemoveTree={onRemoveTree} trees={localSurvey.surveyTrees} />\n                <h1>תמונות</h1>\n                <TreesImages trees={localSurvey.surveyTrees} />\n                <h1>טבלת ריכוז עפ\"י מיני העצים </h1>\n                <MemoTreesTypesTable trees={localSurvey.surveyTrees} />\n                <h1>טבלת סיכום המלצות</h1>\n                <TreeRecommendationTable trees={localSurvey.surveyTrees} />\n            </div>\n        </section>\n    )\n}\n\nexport default function LazyFinalSurvey() {\n    return <FinalSurvey />\n}"],"sourceRoot":""}