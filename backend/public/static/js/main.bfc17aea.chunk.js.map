{"version":3,"sources":["serviceWorker.js","reducers/TreeReducer.js","assets/svg/menu_black_24dp.svg","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","cmps/TreesTable.jsx","services/httpService.js","services/treeService.js","services/storageService.js","cmps/TreesTypesTable.jsx","pages/TreesSurvey.jsx","services/customHooks.js","services/formService.js","services/cloudinaryService.js","cmps/CloudinaryUpload.jsx","cmps/FormAutocomplete.jsx","cmps/TreesForm.jsx","actions/TreeActions.js","pages/ChooseSurvey.jsx","pages/CreateSurvey.jsx","cmps/TreePreview.jsx","pages/SurveyEditor.jsx","pages/Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","filterBy","isDark","currentSurvey","isTreePreviewShowen","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","_ref3","_ref","svgRef","title","props","height","viewBox","width","ref","ForwardRef","forwardRef","AppHeader","useState","isMobile","setIsMobile","changeMobile","prev","className","to","onClick","About","TreesImages","trees","map","tree","imgUrl","_id","idx","src","alt","TreesTable","useEffect","calculateValue","canopy","health","type","typeValue","calculateMonetaryValue","ValueColor","sum","label","quantity","diameter","rootsDiameter","movingPossibility","description","recommendation","movingReason","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","then","console","log","tableId","surveyId","treeService","save","queryTrees","querySurveyIdList","querySurveyTrees","storageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","TreesTypesTable","mapTreeValue","reduceTrees","reduce","obj","name","field","TreesSurvey","useSelector","state","TreeModule","setTrees","setTableIdList","surveyTitle","storageId","useForm","cb","fields","setFields","ev","value","checked","prevFields","formService","treeTypes","palmstreeTypes","recomandationOptions","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","error","CloudinaryUpload","file","setFile","isUpload","setIsUpload","sendFile","img","imgUrlRes","onGetImgUrl","fileHandler","htmlFor","required","multiple","id","onChange","FormAutocomplete","onSetTreeType","options","display","setDisplay","search","setSearch","treeObj","setTreeObj","placeholder","filter","option","includes","v","TreesForm","setSurveyId","treeTypeOptions","setTreeTypeOptions","treeType","setType","setImgUrl","isPalmTree","form","handleChange","useHandleModal","isModalShown","HandleiIsModalShown","submitForm","preventDefault","treeCopy","dir","action","onSubmit","treeTypeObj","setIsPalmTree","TextField","ran","variant","color","InputProps","inputProps","max","min","FormControl","Select","MenuItem","multiline","rows","Button","_setCurrentSurvey","survey","setCurrentSurvey","dispatch","ChooseSurvey","useDispatch","history","useHistory","surveyIdList","setSurveyIdList","currentSurveyId","setCurrentSurveyId","handleOnClickNext","useCallback","push","handleOnClickBack","filterdList","InputLabel","CreateSurvey","handleOnClick","surveyDate","surveySummary","addNewSurvey","TreePreview","SurveyEditor","isAddingTree","setIsAddingTree","currentSurveyTrees","setCurrentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","localCurrentSurvey","setLocalCurrentSurvey","storageTreeId","Home","App","path","component","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfc17aea.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n    filterBy: null,\r\n    isDark: false,\r\n    currentSurvey:{},\r\n    isTreePreviewShowen:false\r\n}\r\n\r\nexport default function TreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_SURVEY':\r\n            return {\r\n                ...state,\r\n                currentSurvey: action.survey\r\n            }\r\n\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'TOGGLE_IS_PREVIEW_TREE':\r\n            return {\r\n                ...state,\r\n                isTreePreviewShowen: !state.isTreePreviewShowen\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n});\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav className=\"main-nav \">\r\n                {!isMobile && <div className=\"left-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                    {/* <Link to='/'> <img src=\"imgs/logo.png\" alt=\"\" /></Link> */}\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\n\n\nexport const TreesImages = (...props) => {\n\n\n\n    const { trees } = props[0]\n    return (\n        <section  className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    < >\n                        {tree.imgUrl && <div key={tree._id} className=\"image-card\">\n                            <p >{tree.idx}</p>\n                            <img src={tree.imgUrl} alt=\"tree\" />\n                        </div>}\n                    </>\n                )\n            })}\n        </section>\n\n    )\n}","import React, { useEffect } from \"react\"\n\n\n\n\nexport const TreesTable = (...props) => {\n\n    useEffect(() => {\n    }, [props])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateMonetaryValue = (tree) => {\n        let sum = (calculateValue(tree) / 5) * 20\n        return sum\n    }\n    // const calculateMonetaryValue = (tree) => {\n    //     const { canopy, location, health } = tree\n    //     const { typeValue } = tree.type\n    //     let sum = ((+canopy + +typeValue + +location + +health) / 5) * 20\n    //     return sum\n    // }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum < 6) return 'yellow'\n        else if (sum > 6 && 12 < sum) return 'grey'\n        else if (sum > 13 && 17 < sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {props[0].trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type.label}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.type.typeValue}</td>\n                                {/* <td>{tree.monetaryValue}</td> */}\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                <td>{calculateMonetaryValue(tree)}</td>\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>{tree.recommendation}</td>\n                                <td>{tree.movingReason}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","import { httpService } from \"./httpService\"\n\n\nasync function save(tree) {\n    await httpService.put(`tree/save`, tree)\n        .then((res) => {\n            console.log(res);\n        })\n\n}\nasync function queryTrees(tableId) {\n    let trees = await httpService.get(`tree/`,tableId)\n    console.log(\"🌲 queryTrees\", trees)\n    return trees\n}\n\nasync function querySurveyIdList() {\n    let trees = await httpService.get(`tree/survey_id_list`)\n    console.log(\"🥳\", trees)\n    return trees\n}\nasync function querySurveyTrees(surveyId) {\n    let trees = await httpService.get(`tree/survey_trees`,surveyId)\n    console.log(\"🥳\", trees)\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    queryTrees,\n    querySurveyIdList,\n    querySurveyTrees\n}","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect } from \"react\"\n\n\n\n\nexport const TreesTypesTable = ({ trees }) => {\n\n    useEffect(() => {\n        console.log('PROPS trees', trees);\n        mapTreeValue(trees)\n    }, [trees])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateMonetaryValue = (tree) => {\n        let sum = (calculateValue(tree) / 5) * 20\n        return sum\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum < 6) return 'yellow'\n        else if (sum > 6 && 12 < sum) return 'grey'\n        else if (sum > 13 && 17 < sum) return 'green'\n        else return 'red'\n    }\n\n\n\n    const mapTreeValue = (trees) => { // work on it\n        let reduceTrees = trees.reduce(function (obj, name) {\n            obj[name.type.label] = {}\n            // obj[name.type.label] = {\n            //     red:0,\n            //     green:0,\n            //     grey:0,\n            //     yellow:0\n            // }\n            let field = ValueColor(name)\n            obj[name.type.label][field] = obj[name.type.label][field] ? obj[name.type.label][field]++ : 1;\n            // obj[name.type.label][field]++\n            return obj;\n        }, {});\n        console.log('reduceTrees', reduceTrees);\n    }\n\n    // const mapTreeValue = (trees) => { // work on it\n    //     let reduceTrees = trees.reduce(function (obj, name) {\n    //         obj[name.type.BinomialNomenclature] = obj[name.type.BinomialNomenclature] ? ++obj[name.type.BinomialNomenclature] : 1;\n    //         return obj;\n    //     }, {});\n    //     console.log('reduceTrees', reduceTrees);\n    // }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>גבוהה מאוד *ערכיות</th>\n                    <th>**ערכיות גבוהה </th>\n                    <th>בינונית ***ערכיות</th>\n                    <th>נמוכה ****ערכיות</th>\n                    <th>סה״כ</th>\n                </tr>\n                <tbody>\n                    {trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                {/* <td>{tree.monetaryValue}</td> */}\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{calculateMonetaryValue(tree)}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\n","import React, { useEffect, useState } from 'react'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\nimport { TreesTypesTable } from '../cmps/TreesTypesTable';\n\n\n\n\nexport const TreesSurvey = () => {\n\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n\n    let [trees, setTrees] = useState([])\n    let [currentTableId, setCurrentTableId] = useState('')\n    let [tableIdList, setTableIdList] = useState([''])\n\n\n    useEffect(() => {\n\n        async function queryTrees() {\n\n            setTableIdList(await treeService.querySurveyIdList())\n            setTrees(await treeService.queryTrees(currentSurvey.surveyTitle))\n\n            if (Object.keys(currentSurvey).length === 0) {\n                let storageId = storageService.loadFromStorage('surveyId')\n                setTrees(await treeService.queryTrees(storageId.surveyTitle))\n            }\n        }\n        queryTrees()\n    }, [])\n\n\n    return (\n\n        <section className=\"main-container trees-survey flex\">\n            <h1><span>{currentSurvey?.surveyTitle}</span> טבלה סקר</h1>\n            <TreesTable trees={trees} />\n            <TreesImages trees={trees} />\n            <TreesTypesTable trees={trees} />\n        </section>\n\n\n    )\n\n}","import { useEffect, useState } from 'react'\r\n\r\nexport const useForm = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useHandleModal = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (field, value) {\r\n\r\n      console.log('(field,value)', field, value);\r\n      // const field = ev.target.name\r\n      // const value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n","import treeTypes from '../data/treeTypes.json';\nimport palmstreeTypes from '../data/palmstreeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n    ,\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notDefined',\n        label: 'לא מוגדר',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    palmstreeTypes,\n    recomandationOptions: recommendationOptions\n}\n","\nfunction uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n\n    const formData = new FormData();\n    formData.append('file', files[0])\n    console.log('ev.target.files[0]):', files[0])\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            console.log(res)\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","import React, { useState } from \"react\"\nimport { cloudinaryService } from \"../services/cloudinaryService\"\n\nexport const CloudinaryUpload = (...props) => {\n\n    // const [name, setName] = useState('')\n    const [file, setFile] = useState(null)\n    const [isUpload, setIsUpload] = useState(false)\n\n    const sendFile = async img => {\n        setIsUpload(true)\n        let imgUrlRes = await cloudinaryService.uploadImg(img)\n        setIsUpload(false)\n        setFile(imgUrlRes.url)\n        props[0].onGetImgUrl(imgUrlRes.url)\n    }\n\n    const fileHandler = ev => {\n        // setFile(ev.target.files)\n        sendFile(ev.target.files)\n    }\n\n    // const nameHandler = ev => {\n    //     const { value } = ev.target\n    //     setName(value)\n    // }\n\n    return (\n        <section className=\"upload-container\">\n            <label htmlFor=\"file\">בחר תמונה</label>\n            <input\n                required\n                multiple\n                name=\"file1\"\n                type=\"file\"\n                id=\"file\"\n                className=\"upload-btn\"\n                onChange={(ev) => { fileHandler(ev) }} />\n            {isUpload &&\n                <img src=\"/imgs/circle_loader.gif\" alt=\"loader\" />\n            }\n            {file &&\n\n                <div className=\"image-preview\">\n                    <p>Preview</p>\n                    <img src={file} alt=\"image\" />\n                </div>\n            }\n        </section>\n    )\n}\n\n\n\n","import React, { useEffect, useState } from 'react'\nimport { formService } from '../services/formService'\n\nexport const FormAutocomplete = ({ onSetTreeType, options }) => {\n\n    const [display, setDisplay] = useState(false)\n    // const [options, setOptions] = useState([])\n    const [search, setSearch] = useState('')\n    const [treeObj, setTreeObj] = useState('')\n\n\n    useEffect(() => {\n        // setOptions(formService.treeTypes)\n    }, [options])\n\n\n\n    useEffect(() => {\n        onSetTreeType(treeObj)\n        setDisplay(false)\n    }, [treeObj])\n\n\n\n    const setTree = (tree) => {\n        setTreeObj(tree)\n        setSearch(tree.label)\n    }\n\n    return (\n        <section className=\"autocomplete-form \">\n            <input onChange={(ev) => { setSearch(ev.target.value) }} value={search} type=\"text\" placeholder=\" מין העץ\" onClick={() => { setDisplay(!display) }} />\n            {display &&\n                <div className=\"autocomplete-container\">\n                    {options.filter((option) => option?.label?.includes(search)).map((v, i) => {\n                        return (\n                            <div onClick={() => { setTree(v) }} className=\"tree-option\" key={v.label}>\n                                <span>{v.label}</span>\n                            </div>\n                        )\n                    })\n                    }\n                </div>\n            }\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { TextField, Button, MenuItem, Select, FormControl, Paper, InputLabel } from '@material-ui/core';\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { CloudinaryUpload } from './CloudinaryUpload';\n// import { storageService } from '../services/storageService';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from './FormAutocomplete';\n\n\nexport const TreesForm = (...props) => {\n\n    // const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    // const [newSurveyId, setNewTableIdList] = useState('')\n    // const [survyIdList, setSurvyIdList] = useState([''])\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n\n    // const [isPalmTree, setIsPalmTree] = useState(false)\n\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n    const [form, handleChange] = useForm({\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: '',\n        isPalmTree: false\n    })\n\n    const [isModalShown, HandleiIsModalShown] = useHandleModal({\n        health: false\n    })\n\n    useEffect(() => {\n        // setSurveyId(storageService.loadFromStorage('surveyId'))\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        async function queryTrees() {\n            // setSurvyIdList(await treeService.querySurveyIdList())\n        }\n        queryTrees()\n    }, [surveyId])\n\n\n    useEffect(() => {\n    }, [treeType])\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        let treeCopy = { ...form }\n        treeCopy.type = treeType\n        treeCopy.surveyId = currentSurvey\n        treeCopy.imgUrl = imgUrl\n        treeService.save(treeCopy)\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n\n    return (\n        <div className=\"form-container\">\n\n\n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                <div className=\"trees-form flex column\">\n                    <div className=\"type-form \">\n                        <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                        <label htmlFor=\"isPalmTree rtl\">\n                            <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                            עץ תמר\n                        </label>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>מספר עץ</p>\n                        <TextField\n                            ran\n                            required\n                            dir=\"rtl\"\n                            // label=\"מספר עץ\"\n                            variant=\"standard\"\n                            type=\"number\"\n                            id=\"idx\"\n                            name=\"idx\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>כמות עצים</p>\n                        <TextField\n                            required\n                            // label=\"כמות עצים\"\n                            type=\"number\"\n                            id=\"quantity\"\n                            name=\"quantity\"\n                            variant=\"standard\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>קוטר הגזע</p>\n                        <TextField\n                            required\n                            // label=\"קוטר הגזע\"\n                            type=\"number\"\n                            id=\"diameter\"\n                            name=\"diameter\"\n                            variant=\"standard\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleiIsModalShown('health', !isModalShown.health)} >מצב בריאותי</p>\n                        {/* <p onClick={() => HandleiIsModalShown('health', !isModalShown.health)} className=\"health-container\">מצב בריאותי</p> */}\n                        <TextField\n                            required\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            // label=\"מצב בריאותי\"\n                            placeholder=\"0-5\"\n                            type=\"number\"\n                            id=\"health\"\n                            name=\"health\"\n                            variant=\"standard\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                        {isModalShown.health &&\n                            <div\n                                onClick={() => HandleiIsModalShown('health', !isModalShown.health)}\n                                className=\"form-modal health-modal\" >\n                                <div className=\"modal-container \">\n                                    <img src=\"/imgs/modal/healthModal.png\" alt=\"מקרא מצב בריאותי\" />\n                                </div>\n                            </div>}\n\n                    </div>\n\n\n                    <div className=\"input-container\">\n                        <p>גובה העץ</p>\n                        {/* <div className=\"health-container\">גובה העץ</div> */}\n                        <TextField\n                            required\n                            // label=\"גובה העץ (מטר)\"\n                            type=\"number\"\n                            id=\"height\"\n                            name=\"height\"\n                            variant=\"standard\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>מיקום העץ</p>\n                        <TextField\n                            required\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            // label=\"מיקום העץ\"\n                            type=\"number\"\n                            id=\"location\"\n                            name=\"location\"\n                            variant=\"standard\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>ניקוד חופת העץ</p>\n                        <TextField\n                            required\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            // label=\"ניקוד חופת עץ\"\n                            type=\"number\"\n                            id=\"canopy\"\n                            name=\"canopy\"\n                            variant=\"standard\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>אזור שורשים מוגן</p>\n                        <TextField\n                            required\n                            // label=\"אזור שורשים מוגן\"\n                            type=\"number\"\n                            id=\"rootsDiameter\"\n                            name=\"rootsDiameter\"\n                            variant=\"standard\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>היתכנות העתקה</p>\n                        <FormControl>\n                            {/* <InputLabel required id=\"movingPossibility\">היתכנות העתקה</InputLabel> */}\n                            <Select\n                                required\n                                // label=\"היתכנות העתקה\"\n                                type=\"text\"\n                                id=\"movingPossibility\"\n                                name=\"movingPossibility\"\n                                variant=\"standard\"\n                                color=\"primary\"\n                                value={form.movingPossibility}\n                                onChange={(ev) => { handleChange(ev) }}>\n                                {\n                                    formService.movingPossibility.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))\n                                }\n                            </Select>\n\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>הערות</p>\n                        <TextField\n                            multiline\n                            required\n                            rows={4}\n                            // label=\"הערות\"\n                            type=\"text\"\n                            id=\"description\"\n                            name=\"description\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>סיבת כריתה או\n                            העתקת\n                            העץ</p>\n                        <TextField\n                            required\n                            multiline\n                            rows={2}\n                            //             label=\"סיבת\n                            // כריתה או\n                            // העתקת\n                            // העץ \"\n                            type=\"text\"\n                            id=\"movingReason\"\n                            name=\"movingReason\"\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            onChange={(ev) => { handleChange(ev) }} />\n                    </div>\n\n                    <div className=\"input-container\">\n                        <p>המלצה</p>\n                        <FormControl >\n                            {/* <InputLabel required id=\"recommendation\">המלצה</InputLabel> */}\n                            <Select\n                                required\n                                type=\"text\"\n                                id=\"recommendation\"\n                                name=\"recommendation\"\n                                variant=\"standard\"\n                                // color=\"primary\"\n                                value={form.recommendation}\n                                onChange={(ev) => { handleChange(ev) }}>\n                                {\n                                    formService.recomandationOptions.map((option) => (\n                                        <MenuItem\n                                            key={option.label}\n                                            value={option.label}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))\n                                }\n                            </Select>\n                        </FormControl>\n                    </div>\n                </div>\n                <CloudinaryUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">הוסף עץ </Button>\n            </form>\n            {/* <Sheet data={form} /> */}\n        </div>\n    )\n}\n","\r\n// Dispatchers\r\nconst _setFilter = (filterBy) => ({ type: 'SET_FILTER', filterBy });\r\nconst _toggleDark = () => ({ type: 'TOGGLE_DARK' });\r\nconst _toggleIsTreePreviewShowen = () => ({ type: 'TOGGLE_IS_PREVIEW_TREE' });\r\nconst _setCurrentSurvey = (survey) => ({ type: 'SET_CURRENT_SURVEY', survey });\r\n\r\n// THUNK\r\n\r\nexport function setFilter(filterBy) {\r\n    return async (dispatch) => dispatch(_setFilter(filterBy))\r\n}\r\nexport function setCurrentSurvey(survey) {\r\n    return async (dispatch) => dispatch(_setCurrentSurvey(survey))\r\n}\r\nexport function toggleDark() {\r\n    return (dispatch) => dispatch(_toggleDark())\r\n}\r\nexport function toggleIsTreePreviewShowen() {\r\n    return (dispatch) => dispatch(_toggleIsTreePreviewShowen())\r\n}\r\n\r\n// export function saveCar(car) {\r\n//     return async (dispatch, getState) => {\r\n//         const type = car._id ? 'UPDATE_CAR' : 'ADD_CAR';\r\n//         const savedCar = await carService.save(car)\r\n//         dispatch({ type, car: savedCar })\r\n//     }\r\n// }\r\n","import { Link, useHistory } from 'react-router-dom'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSurvey } from '../actions/TreeActions';\n\n\n\nexport const ChooseSurvey = () => {\n\n    let dispatch = useDispatch()\n    const history = useHistory();\n    // let [trees, setTrees] = useState([])\n    let [surveyIdList, setSurveyIdList] = useState([''])\n    let [currentSurveyId, setCurrentSurveyId] = useState('kfar saba')\n    const handleOnClickNext = useCallback(() => history.push('/survey_editor'), [history]);\n    const handleOnClickBack = useCallback(() => history.push('/'), [history]);\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n\n    useEffect(() => {\n        async function queryTrees() {\n            setSurveyIdList(await treeService.querySurveyIdList())\n            // setTrees(await treeService.query(currentSurveyId))\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n\n        let filterdList = surveyIdList.filter(tree => { return tree.surveyTitle === currentSurveyId })\n        dispatch(setCurrentSurvey(filterdList[0]))\n    }, [currentSurveyId])\n\n\n\n\n    return (\n        <section className=\"choose-section flex\">\n            <h1>בחר סקר</h1>\n            <FormControl>\n                <InputLabel required id=\"movingPossibility\">בחר</InputLabel>\n                <Select\n                    required\n                    type=\"text\"\n                    id=\"currentTableId\"\n                    name=\"currentTableId\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                    value={currentSurveyId}\n                    // defaultValue=\"juju\"\n                    label=\"לחץ כאן\"\n                    placeholder=\"לחץ כאן\"\n                    onChange={(ev) => { setCurrentSurveyId(ev.target.value) }} >\n                    {\n                        surveyIdList.map((id) => (\n                            <MenuItem\n                                \n                                key={id.surveyTitle}\n                                value={id.surveyTitle}>\n                                {id.surveyTitle}\n                            </MenuItem>\n                        ))\n                    }\n                </Select>\n            </FormControl>\n            <div className=\"next-btn\"\n                onClick={() => { handleOnClickNext() }} >\n                <p>המשך</p>\n            </div>\n            <div className=\"back-btn\"\n                onClick={() => { handleOnClickBack() }} >\n                <p>חזור</p>\n            </div>\n        </section>\n    )\n}","import React, { useCallback } from 'react'\nimport { useForm } from '../services/customHooks'\nimport { Link,useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentSurvey } from '../actions/TreeActions'\nimport { storageService } from '../services/storageService';\n\n\nexport const CreateSurvey = () => {\n\n    \n    const history = useHistory();\n    const handleOnClick = useCallback(() => history.push('/survey_editor'), [history]);\n    const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    const [survey, handleChange] = useForm({\n        surveyTitle: '',\n        surveyDate: '',\n        surveySummary: ''\n    })\n\n    const addNewSurvey = async () => {\n        await dispatch(setCurrentSurvey(survey))\n        storageService.saveToStorage('surveyId', survey)\n\n        handleOnClick()\n    }\n\n    return (\n        <section className=\"new-survey rtl\">\n            <form action=\"\">\n                <label htmlFor=\"surveyTitle\" onSubmit={(ev) => { ev.preventDefault() }}>\n                    כותרת סקר:\n                    <input\n                        id=\"surveyTitle\"\n                        name=\"surveyTitle\"\n                        type=\"text\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyTitle} />\n                </label>\n                <label htmlFor=\"surveyTitle\">\n                    תאריך סקר:\n                    <input\n                        id=\"surveyDate\"\n                        name=\"surveyDate\"\n                        type=\"date\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyDate} />\n                </label>\n                <div className=\"add-btn\" onClick={() => { addNewSurvey() }}>הוסף סקר</div>\n\n                <Link to=\"/choose_survey\" >\n                    <div className=\"existing-survey\">חזרה</div>\n                </Link>\n\n            </form>\n        </section>\n\n    )\n}","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\n\nexport const TreePreview = ({ tree }) => {\n\n    const dispatch = useDispatch()\n    // const { currentSurvey,isTreePreviewShowen } = useSelector(state => state.TreeModule)\n\n\n    useEffect(() => {\n    })\n\n    return (\n        <section className=\"main-container tree-preview\">\n            <p>{tree.type.typeValue}</p>\n            <p>{tree.quantity}</p>\n            <p>{tree.height}</p>\n            <p>{tree.diameter}</p>\n            <p>{tree.health}</p>\n            <p>{tree.location}</p>\n            <p>{tree.type.typeValue}</p>\n            <p>{tree.canopy}</p>\n            {/* <p className={ValueColor(tree)}>{calculateValue(tree)}</p> */}\n            <p>{tree.rootsDiameter}</p>\n            {/* <p>{calculateMonetaryValue(tree)}</p> */}\n            <p>{tree.movingPossibility}</p>\n            <p>{tree.description}</p>\n            <p>{tree.movingReason}</p>\n            <div\n                onClick={(ev) => {\n                    ev.preventDefault()\n                    dispatch(toggleIsTreePreviewShowen())\n                }}\n                className=\"close-preview\">X</div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TreesForm } from '../cmps/TreesForm'\nimport { treeService } from '../services/treeService'\nimport { storageService } from '../services/storageService';\nimport { TreePreview } from '../cmps/TreePreview';\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions';\n\nexport const SurveyEditor = () => {\n\n    const dispatch = useDispatch()\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const [isAddingTree, setIsAddingTree] = useState(true)\n    // const [isAddingTree, setIsAddingTree] = useState(false)\n    const [currentSurveyTrees, setCurrentSurveyTrees] = useState([])\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n    const [localCurrentSurvey, setLocalCurrentSurvey] = useState('')\n\n    useEffect(() => {\n        const querySurveyTrees = async () => {\n\n            let trees = await treeService.querySurveyTrees(currentSurvey.surveyTitle)\n            setCurrentSurveyTrees(trees)\n\n            if (Object.keys(currentSurvey).length === 0) {\n                const storageTreeId = storageService.loadFromStorage('surveyId')\n                let trees = await treeService.querySurveyTrees(storageTreeId.surveyTitle)\n                setLocalCurrentSurvey(storageTreeId)\n                setCurrentSurveyTrees(trees)\n            }\n        }\n        querySurveyTrees()\n    }, [])\n\n    return (\n        <section className=\"main-container rtl\">\n            {/* <h1><span>{currentSurvey.surveyTitle}</span> טופס סקר עצים </h1> */}\n            <h1>טופס סקר עצים <span>{localCurrentSurvey.surveyTitle}</span>  </h1>\n            <div className=\"add-tree\">\n                {<p onClick={(ev) => {\n                    ev.preventDefault()\n                    setIsAddingTree(true)\n                }}>הוסף עץ</p> && !isAddingTree}\n                {isAddingTree && <TreesForm />}\n            </div>\n            <div className=\"other-trees\">\n                <h3>עצים נוספים</h3>\n                {currentSurveyTrees && <div className=\"current-trees flex\">\n                    {currentSurveyTrees.map((tree) => {\n                        return <div\n                            key={tree._id}\n                            className=\"tree-index\"\n                            onClick={() => {\n                                setCurrentPreviewTree(tree)\n                                dispatch(toggleIsTreePreviewShowen())\n                            }} >\n                            <p>{tree.idx}</p>\n                            <img src=\"imgs/treeLogo.png\" alt=\"index\"  />\n                        </div>\n                    })}\n                    {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} />}\n                </div>}\n            </div>\n        </section>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\n    return (\n        <section className=\"home-container flex \">\n        <Link to=\"/create_survey\" >\n            <div className=\"new-survey\">סקר חדש</div>\n        </Link>\n\n        <Link to=\"/choose_survey\" >\n        <div className=\"existing-survey\">בחר סקר</div>\n        </Link>\n    </section>\n\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { TreesForm } from './cmps/TreesForm';\nimport { ChooseSurvey } from './pages/ChooseSurvey';\nimport { CreateSurvey } from './pages/CreateSurvey';\nimport { SurveyEditor } from './pages/SurveyEditor';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/about\" component={ About } />\n        <Route path=\"/trees\" component={ TreesSurvey } />\n        {/* <Route path=\"/form\" component={ TreesForm } /> */}\n        <Route path=\"/survey_editor\" component={ SurveyEditor } />\n        <Route path=\"/choose_survey\" component={ ChooseSurvey } />\n        <Route path=\"/create_survey\" component={ CreateSurvey } />\n        <Route path=\"/\" component={ Home } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport TreeReducer from './reducers/TreeReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    TreeModule: TreeReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}