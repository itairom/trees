{"version":3,"sources":["serviceWorker.js","reducers/TreeReducer.js","assets/svg/menu_black_24dp.svg","services/storageService.js","cmps/AppHeader.jsx","pages/About.jsx","cmps/TreesImages.jsx","cmps/TreesTable.jsx","services/httpService.js","services/treeService.js","cmps/TreesTypesTable.jsx","pages/TreesSurvey.jsx","services/customHooks.js","services/formService.js","services/cloudinaryService.js","cmps/CloudinaryUpload.jsx","cmps/FormAutocomplete.jsx","cmps/form/input.jsx","cmps/form/FormModal.jsx","cmps/TreesForm.jsx","actions/TreeActions.js","pages/ChooseSurvey.jsx","pages/CreateSurvey.jsx","cmps/TreePreview.jsx","pages/SurveyEditor.jsx","pages/Home.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","filterBy","isDark","currentSurvey","isTreePreviewShowen","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","d","fill","_ref3","_ref","svgRef","title","props","height","viewBox","width","ref","ForwardRef","forwardRef","storageService","loadFromStorage","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","AppHeader","useState","isMobile","setIsMobile","localSurveyId","setLocalSurveyId","useEffect","storageId","surveyTitle","changeMobile","prev","className","to","onClick","About","TreesImages","trees","map","tree","_id","idx","imgUrl","src","alt","TreesTable","calculateValue","canopy","health","type","typeValue","calculateMonetaryValue","ValueColor","sum","id","label","quantity","diameter","rootsDiameter","movingPossibility","description","recommendation","movingReason","table","filename","sheet","buttonText","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","params","res","response","status","then","console","log","tableId","treeId","removedTree","surveyId","treeService","save","queryTrees","querySurveyIdList","querySurveyTrees","removeTree","TreesTypesTable","treeTypeObj","setTreeTypeObj","treeTypeKeysArr","setTreeTypeKeysArr","totalvaluesArr","setTotalvaluesArr","mapTreeValue","localTotalvaluesArr","lowPriority","mediumPriority","highPriority","veryHighPriority","typeObj","NTL","value","treeKeys","objToArr","values","reduce","b","TreesSurvey","useSelector","state","TreeModule","setTrees","setTableIdList","formService","treeTypes","palmstreeTypes","recomandationOptions","cloudinaryService","uploadImg","files","UPLOAD_URL","formData","FormData","append","fetch","body","json","catch","err","error","CloudinaryUpload","file","setFile","isUpload","setIsUpload","sendFile","img","imgUrlRes","onGetImgUrl","fileHandler","ev","htmlFor","required","multiple","name","onChange","FormAutocomplete","onSetTreeType","options","display","setDisplay","search","setSearch","treeObj","setTreeObj","placeholder","filter","option","includes","v","Input","InputProps","multiline","rows","TextField","variant","color","helperText","FormModal","HandleiIsModalShown","modal","imgSrc","isShowen","TreesForm","setSurveyId","treeTypeOptions","setTreeTypeOptions","treeType","setType","setImgUrl","validate","fieldValues","temp","errors","isLessThenFiveInput","isEmptyInput","mobile","setErrors","every","x","field","initialFValues","validateOnChange","setValues","handleInputChange","checked","resetForm","useForm","isPalmTree","cb","fields","setFields","prevFields","useHandleModal","isModalShown","submitForm","preventDefault","alert","treeCopy","dir","action","onSubmit","setIsPalmTree","inputProps","max","min","FormControl","Select","MenuItem","Button","_setCurrentSurvey","survey","setCurrentSurvey","dispatch","ChooseSurvey","useDispatch","history","useHistory","surveyIdList","setSurveyIdList","currentSurveyId","setCurrentSurveyId","handleOnClickNext","useCallback","push","handleOnClickBack","filterdList","InputLabel","CreateSurvey","handleOnClick","useFormCreateSurvey","surveyDate","surveySummary","handleChange","addNewSurvey","TreePreview","isRemove","setIsRemove","SurveyEditor","isAddingTree","setIsAddingTree","currentSurveyTrees","setCurrentSurveyTrees","currentPreviewTree","setCurrentPreviewTree","localCurrentSurvey","setLocalCurrentSurvey","storageTreeId","Home","App","path","component","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b173cb6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n    filterBy: null,\r\n    isDark: false,\r\n    currentSurvey:{},\r\n    isTreePreviewShowen:false\r\n}\r\n\r\nexport default function TreeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_SURVEY':\r\n            return {\r\n                ...state,\r\n                currentSurvey: action.survey\r\n            }\r\n\r\n        case 'TOGGLE_DARK':\r\n            console.log('toggle');\r\n            return {\r\n                ...state,\r\n                isDark: !state.isDark\r\n            }\r\n        case 'TOGGLE_IS_PREVIEW_TREE':\r\n            return {\r\n                ...state,\r\n                isTreePreviewShowen: !state.isTreePreviewShowen\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0V0z\",\n  fill: \"none\"\n});\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n});\n\nvar SvgMenuBlack24Dp = function SvgMenuBlack24Dp(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#000000\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgMenuBlack24Dp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/menu_black_24dp.8684d03d.svg\";\nexport { ForwardRef as ReactComponent };","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ReactComponent as Menu } from '../assets/svg/menu_black_24dp.svg'\r\nimport { storageService } from '../services/storageService'\r\n\r\n\r\nexport function AppHeader() {\r\n    const [isMobile, setIsMobile] = useState(false)\r\n    const [localSurveyId, setLocalSurveyId] = useState('')\r\n\r\n    useEffect(() => {\r\n        let storageId = storageService.loadFromStorage('surveyId')\r\n        if(storageId){\r\n            setLocalSurveyId(storageId.surveyTitle)\r\n        }\r\n    }, [])\r\n\r\n    const changeMobile = () => {\r\n        setIsMobile(prev => prev = !prev)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <nav className=\"main-nav \">\r\n                {!isMobile && <div className=\"left-nav\">\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                    <a className=\"current-survey\"><span>סקר </span>{localSurveyId}</a>\r\n                </div>}\r\n                {isMobile && <div onClick={changeMobile} className=\"mobile-nav\">\r\n                    <p>סקר <span>{localSurveyId}</span></p>\r\n                    <Link to='/trees'><span>סקר עצים סופי</span></Link>\r\n                    <Link to='/'><span>טופס סקר עצים</span></Link>\r\n                </div>}\r\n                {isMobile && <div className=\"background-menu\" onClick={changeMobile}></div>}\r\n                <Menu onClick={changeMobile} className=\"menu-btn\" />\r\n                <div className=\"right-nav\">\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\n\nexport const About = () => {\n\n    return (\n        <section className=\"main-container \">\n            <h1>About</h1>\n        </section>\n    )\n}","import React from \"react\"\n\nexport const TreesImages = (...props) => {\n\n    const { trees } = props[0]\n    return (\n        <section className=\"trees-images flex\">\n            {trees.map((tree) => {\n                return (\n                    <div key={tree._id} className=\"image-card\">\n                        <p >{tree.idx}</p>\n                        {tree.imgUrl && <img key={tree._id} src={tree.imgUrl} alt=\"tree\" />}\n                    </div>\n                )\n            })}\n        </section>\n\n    )\n}","import React, { useEffect } from \"react\"\nimport ReactToExcel from 'react-html-table-to-excel'\n\nexport const TreesTable = (...props) => {\n\n    useEffect(() => {\n    }, [props])\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    const calculateMonetaryValue = (tree) => {\n        let sum = (calculateValue(tree) / 5) * 20\n        return sum\n    }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'yellow'\n        else if (sum > 6 && 14 > sum) return 'grey'\n        else if (sum > 13 && 17 > sum) return 'green'\n        else return 'red'\n    }\n\n    return (\n        <section className=\"trees-table \">\n\n            <table id=\"main-table\">\n                <tr>\n                    <th>מספר\n                        העץ/פוליגון </th>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>כמות עצים</th>\n                    <th>**גובה\n                        העץ\n                        (מ')</th>\n                    <th>*קוטר\n                        גזע\n                        (ס\"מ)</th>\n                    <th>מצב\n                        בריאותי\n                        (0-5)</th>\n                    <th>מיקום\n                        העץ\n                        (0-5)</th>\n                    <th>ערך\n                        מין\n                        העץ\n                        (0-5)</th>\n                    <th>ניקוד\n                        חופת\n                        העץ\n                        (0-5)</th>\n                    <th>סך ערכיות\n                        העץ/פוליגון\n                        (0-20)</th>\n                    <th>***אזור\n                        שורשים\n                        מוגן\n                        רדיוס\n                        במ'</th>\n                    <th>שווי\n                        העצים ב\n                        ₪</th>\n                    <th>היתכנות העתקה </th>\n                    <th>הערות</th>\n                    <th>המלצות</th>\n                    <th>סיבת כריתה או העתקת העץ</th>\n                </tr>\n                <tbody>\n                    {props[0].trees?.map((tree) => {\n                        return (\n                            <tr key={tree._id}>\n                                {tree.idx && <td>{tree.idx}</td>}\n                                <td>{tree.type.label}</td>\n                                <td>{tree.quantity}</td>\n                                <td>{tree.height}</td>\n                                <td>{tree.diameter}</td>\n                                <td>{tree.health}</td>\n                                <td>{tree.location}</td>\n                                <td>{tree.type.typeValue}</td>\n                                <td>{tree.canopy}</td>\n                                <td className={ValueColor(tree)}>{calculateValue(tree)}</td>\n                                <td>{tree.rootsDiameter}</td>\n                                <td>{calculateMonetaryValue(tree)}</td>\n                                <td>{tree.movingPossibility}</td>\n                                <td>{tree.description}</td>\n                                <td>{tree.recommendation}</td>\n                                <td>{tree.movingReason}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <ReactToExcel\n                className=\"download-table \"\n                table=\"main-table\"\n                filename=\"טבלת סקר עצים\"\n                sheet=\"טבלת סקר עצים\"\n                buttonText=\"הורדה\"\n            />\n        </section>\n    )\n\n\n}\n","import Axios from 'axios'\r\n\r\nconst BASE_URL = (process.env.NODE_ENV === 'production') ? '/api/' : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n})\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data,\r\n            params: (method === 'GET') ? data : null\r\n        })\r\n        return res.data\r\n    } catch (err) {\r\n        // console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`)\r\n        // console.dir(err)\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login')\r\n        }\r\n        throw err\r\n    }\r\n}","import { httpService } from \"./httpService\"\n\n\nasync function save(tree) {\n    await httpService.put(`tree/save`, tree)\n        .then((res) => {\n            console.log(res);\n        })\n\n}\nasync function queryTrees(tableId) {\n    let trees = await httpService.get(`tree/`,tableId)\n    return trees\n}\nasync function removeTree(treeId) {\n    console.log(\"🚀 ~ file: treeService.js ~ line 16 ~ removeTree ~ treeId\", treeId)\n    let removedTree = await httpService.delete(`tree/${treeId}`)\n    return removedTree\n}\n\nasync function querySurveyIdList() {\n    let trees = await httpService.get(`tree/survey_id_list`)\n    return trees\n}\nasync function querySurveyTrees(surveyId) {\n    let trees = await httpService.get(`tree/survey_trees`,surveyId)\n    return trees\n}\n\n// async function update(pet) {\n//     let updatedPet = await httpService.put(`pet/${pet._id}`, pet)\n//     return updatedPet\n// }\n\nexport const treeService = {\n    save,\n    queryTrees,\n    querySurveyIdList,\n    querySurveyTrees,\n    removeTree\n}","import { keys } from \"@material-ui/core/styles/createBreakpoints\"\nimport React, { useEffect, useState } from \"react\"\nimport { utilService } from \"../services/utilService\"\n\n\n\n\nexport const TreesTypesTable = ({ trees }) => {\n\n\n    const [treeTypeObj, setTreeTypeObj] = useState([])\n    const [treeTypeKeysArr, setTreeTypeKeysArr] = useState([])\n    const [totalvaluesArr, setTotalvaluesArr] = useState({})\n\n    useEffect(() => {\n        mapTreeValue(trees)\n    }, [trees])\n\n\n    const calculateValue = (tree) => {\n        const { canopy, location, health } = tree\n        const { typeValue } = tree.type\n        return (+canopy + +typeValue + +location + +health)\n    }\n\n    // const calculateMonetaryValue = (tree) => {\n    //     let sum = (calculateValue(tree) / 5) * 20\n    //     return sum\n    // }\n\n    const ValueColor = (tree) => {\n        let sum = calculateValue(tree)\n        if (sum <= 6) return 'lowPriority'\n        else if (sum > 6 && 14 > sum) return 'mediumPriority'\n        else if (sum > 13 && 17 > sum) return 'highPriority'\n        else return 'veryHighPriority'\n    }\n\n\n    const getTotalvaluesArr = () => {\n        return (\n            {\n                lowPriority: 0,\n                mediumPriority: 0,\n                highPriority: 0,\n                veryHighPriority: 0\n            }\n        )\n    }\n\n\n    const mapTreeValue = (trees) => { // improve the code!\n        let localTotalvaluesArr = getTotalvaluesArr()\n        let typeObj = {}\n        for (let i = 0; i < trees.length; i++) {\n            let NTL = trees[i].type.label\n            let value = ValueColor(trees[i])\n            if (!typeObj.hasOwnProperty(NTL)) {\n                let NTL = trees[i].type.label\n                typeObj[NTL] = {\n                    'highPriority': 0,\n                    'lowPriority': 0,\n                    'mediumPriority': 0,\n                    'veryHighPriority': 0,\n                    'total': 0\n                }\n            }\n            ++localTotalvaluesArr[value]\n            ++typeObj[NTL][value]\n            ++typeObj[NTL]['total']\n        }\n\n        // console.log(\"🚀 ~ file: TreesTypesTable.jsx ~ line 54 ~ mapTreeValue ~ localTotalvaluesArr\", localTotalvaluesArr)\n        const treeKeys = Object.keys(typeObj)\n        const objToArr = Object.values(typeObj)\n        setTreeTypeObj(objToArr)\n        setTreeTypeKeysArr(treeKeys)\n        setTotalvaluesArr(localTotalvaluesArr)\n    }\n\n    return (\n        <section className=\"trees-table flex\">\n            <table>\n                <tr>\n                    <th>מין העץ/תאור\n                        הפוליגון</th>\n                    <th>veryHighPriority *ערכיות</th>\n                    <th>**highPriority </th>\n                    <th>בינונית ***ערכיות</th>\n                    <th>נמוכה ****ערכיות</th>\n                    <th>סה״כ</th>\n                </tr>\n                <tbody>\n                    {treeTypeKeysArr && treeTypeObj?.map((tree, idx) => {\n                        return (\n                            <tr key={tree._id}>\n                                {<td>{treeTypeKeysArr[idx]}</td>}\n                                {<td>{tree['veryHighPriority']}</td>}\n                                {<td>{tree['highPriority']}</td>}\n                                {<td>{tree['mediumPriority']}</td>}\n                                {<td>{tree['lowPriority']}</td>}\n                                {<td>{tree['total']}</td>}\n                            </tr>\n                        )\n                    })}\n                    <tr key='total-values'>\n                        {<td>סה״ב</td>}\n                        {<td>{totalvaluesArr['veryHighPriority']}</td>}\n                        {<td>{totalvaluesArr['highPriority']}</td>}\n                        {<td>{totalvaluesArr['mediumPriority']}</td>}\n                        {<td>{totalvaluesArr['lowPriority']}</td>}\n                        {<td>{Object.values(totalvaluesArr).reduce((a, b) => a + b, 0)}</td>}\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    )\n\n\n}\n","import React, { useEffect, useState } from 'react'\nimport html2pdf from 'html2pdf.js'\nimport { TreesImages } from '../cmps/TreesImages';\nimport { TreesTable } from '../cmps/TreesTable';\nimport { treeService } from '../services/treeService';\nimport { useSelector } from 'react-redux';\nimport { storageService } from '../services/storageService';\nimport { TreesTypesTable } from '../cmps/TreesTypesTable';\n\nexport const TreesSurvey = () => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    let [trees, setTrees] = useState([])\n    // let [currentTableId, setCurrentTableId] = useState('')\n    let [tableIdList, setTableIdList] = useState([''])\n    const [localSurveyId, setLocalSurveyId] = useState('')\n\n    useEffect(() => {\n\n        async function queryTrees() {\n            setTableIdList(await treeService.querySurveyIdList())\n            setTrees(await treeService.queryTrees(currentSurvey?.surveyTitle))\n            if (Object.keys(currentSurvey).length === 0) {\n                let storageId = await storageService.loadFromStorage('surveyId')\n                if (storageId) {\n                    setTrees(await treeService.queryTrees(storageId?.surveyTitle))\n                    setLocalSurveyId(storageId)\n                }\n            }\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n        async function queryTrees() {\n            if (Object.keys(currentSurvey).length === 0) {\n                setTrees(await treeService.queryTrees(localSurveyId?.surveyTitle))\n            }\n        }\n        queryTrees()\n    }, [localSurveyId])\n\n\n    // const downloadAsPdf = () => {\n    //     let el = document.querySelector('#main-survey')\n    //     html2pdf(el);\n    // }\n\n    return (\n        <section id=\"main-survey\" className=\"main-container trees-survey flex\">\n            <h1>טבלה סקר <span>{currentSurvey?.surveyTitle || localSurveyId?.surveyTitle}</span></h1>\n\n            <TreesTable trees={trees} />\n            <TreesImages trees={trees} />\n            <TreesTypesTable trees={trees} />\n        </section>\n    )\n}","import { useEffect, useState } from 'react'\r\n\r\nexport function useForm(initialFValues, validateOnChange = false, validate) {\r\n\r\n  const [values, setValues] = useState(initialFValues);\r\n  const [errors, setErrors] = useState({});\r\n\r\n\r\n\r\n  const handleInputChange = ev => {\r\n    const { name } = ev.target\r\n    let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n    value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n    setValues({\r\n      ...values,\r\n      [name]: value\r\n    })\r\n    if (validateOnChange)\r\n      validate({ [name]: value })\r\n  }\r\n\r\n  const resetForm = () => {\r\n    console.log('RESET');\r\n    setValues(initialFValues);\r\n    setErrors({})\r\n  }\r\n\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n\r\n  }\r\n}\r\n\r\n\r\nexport const useFormCreateSurvey = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n\r\n    fields,\r\n    function (ev) {\r\n\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      value = (ev.target.type === 'checkbox') ? ev.target.checked : value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useError = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (ev) {\r\n      setFields(prevFields => ({ ...prevFields, [field]: '' }))\r\n      const field = ev.target.name\r\n      let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      if (value > 5 || value < 0) {\r\n        setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n      }\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\nexport const useHandleModal = (initialState, cb = () => { }) => {\r\n  const [fields, setFields] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    cb(fields)\r\n  }, [fields])\r\n\r\n  return [\r\n    fields,\r\n    function (field, value) {\r\n\r\n      console.log('(field,value)', field, value);\r\n      // const field = ev.target.name\r\n      // const value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n      setFields(prevFields => ({ ...prevFields, [field]: value }))\r\n    },\r\n    setFields\r\n  ]\r\n}\r\n\r\n","import treeTypes from '../data/treeTypes.json';\nimport palmstreeTypes from '../data/palmstreeTypes.json';\n\n//  const treeTypes = [\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \" Persea americana\",\n//         label: \"אבוקדו אמריקני (זנים שונים)\"\n//     },\n//     {\n//         typeValue: \"3\",\n//         BinomialNomenclature: \"Juglans regia \",\n//         label: \"אגוז המלך \"\n//     }\n// ]\n\n\nconst movingPossibilityOptions = [\n    {\n        value: 'hign',\n        label: 'גבוהה',\n    },\n    {\n        value: 'medium',\n        label: 'בינונית',\n    },\n    {\n        value: 'low',\n        label: 'נמוכה',\n\n    }\n    ,\n    {\n        value: 'notPossible',\n        label: 'לא ניתן',\n\n    }\n];\nconst recommendationOptions = [\n    {\n        value: 'preserve',\n        label: 'שימור',\n    },\n    {\n        value: 'relocation',\n        label: 'העתקה',\n    },\n    {\n        value: 'amputation',\n        label: 'כריתה',\n    },\n    {\n        value: 'notDefined',\n        label: 'לא מוגדר',\n    }\n\n];\n\nexport const formService = {\n    movingPossibility: movingPossibilityOptions,\n    treeTypes,\n    palmstreeTypes,\n    recomandationOptions: recommendationOptions\n}\n","function uploadImg(files) {\n    const CLOUD_NAME = 'dhorz8v6v'\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\n    const formData = new FormData();\n    formData.append('file', files[0])\n    formData.append('upload_preset', 'e4caygdi');\n\n    return fetch(UPLOAD_URL, {\n        method: 'POST',\n        body: formData\n    })\n        .then(res => res.json())\n        .then(res => {\n            return res\n        })\n        .catch(err => console.error(err))\n}\n\nexport const cloudinaryService = {\n    uploadImg\n}","import React, { useState } from \"react\"\nimport { cloudinaryService } from \"../services/cloudinaryService\"\n\nexport const CloudinaryUpload = (...props) => {\n\n    // const [name, setName] = useState('')\n    const [file, setFile] = useState(null)\n    const [isUpload, setIsUpload] = useState(false)\n\n    const sendFile = async img => {\n        setIsUpload(true)\n        let imgUrlRes = await cloudinaryService.uploadImg(img)\n        setIsUpload(false)\n        setFile(imgUrlRes.url)\n        props[0].onGetImgUrl(imgUrlRes.url)\n    }\n\n    const fileHandler = ev => {\n        // setFile(ev.target.files)\n        sendFile(ev.target.files)\n    }\n\n    // const nameHandler = ev => {\n    //     const { value } = ev.target\n    //     setName(value)\n    // }\n\n    return (\n        <section className=\"upload-container\">\n            <label htmlFor=\"file\">בחר תמונה</label>\n            <input\n                required\n                multiple\n                name=\"file1\"\n                type=\"file\"\n                id=\"file\"\n                className=\"upload-btn\"\n                onChange={(ev) => { fileHandler(ev) }} />\n            {isUpload &&\n                <img src=\"/imgs/circle_loader.gif\" alt=\"loader\" />\n            }\n            {file &&\n\n                <div className=\"image-preview\">\n                    <p>Preview</p>\n                    <img src={file} alt=\"image\" />\n                </div>\n            }\n        </section>\n    )\n}\n\n\n\n","import React, { useEffect, useState } from 'react'\nimport { formService } from '../services/formService'\n\nexport const FormAutocomplete = ({ onSetTreeType, options }) => {\n\n    const [display, setDisplay] = useState(false)\n    // const [options, setOptions] = useState([])\n    const [search, setSearch] = useState('')\n    const [treeObj, setTreeObj] = useState('')\n\n\n    useEffect(() => {\n        // setOptions(formService.treeTypes)\n    }, [options])\n\n\n\n    useEffect(() => {\n        onSetTreeType(treeObj)\n        setDisplay(false)\n    }, [treeObj])\n\n\n\n    const setTree = (tree) => {\n        setTreeObj(tree)\n        setSearch(tree.label)\n    }\n\n    return (\n        <section className=\"autocomplete-form\">\n            <input onChange={(ev) => { setSearch(ev.target.value) }} value={search} type=\"text\" placeholder=\" מין העץ\" onClick={() => { setDisplay(!display) }} />\n            {display &&\n                <div className=\"autocomplete-container\">\n                    {options.filter((option) => option?.label?.includes(search)).map((v, i) => {\n                        return (\n                            <div onClick={() => { setTree(v) }} className=\"tree-option\" key={v.label}>\n                                <span>{v.label}</span>\n                            </div>\n                        )\n                    })\n                    }\n                </div>\n            }\n        </section>\n    )\n}","import React from 'react'\nimport { TextField } from '@material-ui/core';\n\nexport default function Input(props) {\n\n    const { name, label, value, error = null, onChange, InputProps, id, multiline, rows, placeholder } = props;\n    return (\n        <TextField\n            variant=\"standard\"\n            name={name}\n            // value={value}\n            onChange={onChange}\n            InputProps={InputProps}\n            id={id}\n            color=\"primary\"\n            type=\"number\"\n            {...(error && { error: true, helperText: error })}\n            {...multiline &&\n            {\n                rows: rows,\n                multiline\n            }}\n            // {...placeholder && { placeholder: placeholder }}\n            placeholder={placeholder}\n        />\n    )\n}","import React from 'react'\n\nexport default function FormModal({ HandleiIsModalShown, modal, imgSrc }) {\n    return (\n        <div\n            onClick={() => HandleiIsModalShown(modal.type, !modal.isShowen)}\n            className=\"form-modal health-modal\" >\n            <div className=\"modal-container \">\n                <img src={imgSrc} alt=\"מקרא\" />\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useForm, useHandleModal } from '../services/customHooks'\nimport { Button, MenuItem, Select, FormControl } from '@material-ui/core';\nimport { formService } from '../services/formService';\nimport { treeService } from '../services/treeService';\nimport { CloudinaryUpload } from './CloudinaryUpload';\nimport { useSelector } from 'react-redux';\nimport { FormAutocomplete } from './FormAutocomplete';\nimport Input from './form/input';\nimport { storageService } from '../services/storageService';\nimport FormModal from './form/FormModal';\n\nexport const TreesForm = ({ querySurveyTrees }) => {\n\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n    const [surveyId, setSurveyId] = useState('')\n    const [treeTypeOptions, setTreeTypeOptions] = useState([])\n    const [treeType, setType] = useState('')\n    const [imgUrl, setImgUrl] = useState('')\n\n    const initialFValues = {\n        quantity: '',\n        type: '',\n        height: '',\n        diameter: '',\n        health: '',\n        location: '',\n        canopy: '',\n        description: '',\n        movingPossibility: '',\n        movingReason: '',\n        idx: '',\n        rootsDiameter: '',\n        recommendation: '',\n        isPalmTree: false\n    }\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('health' in fieldValues)\n            temp.health = isLessThenFiveInput(fieldValues.health) || isEmptyInput(fieldValues.health)\n        if ('canopy' in fieldValues)\n            temp.canopy = isLessThenFiveInput(fieldValues.canopy) || isEmptyInput(fieldValues.canopy)\n        if ('location' in fieldValues)\n            temp.location = isLessThenFiveInput(fieldValues.location) || isEmptyInput(fieldValues.location)\n        if ('mobile' in fieldValues)\n            temp.mobile = isLessThenFiveInput(fieldValues.mobile) || isEmptyInput(fieldValues.mobile)\n        if ('quantity' in fieldValues)\n            temp.quantity = isEmptyInput(fieldValues.quantity)\n        if ('idx' in fieldValues)\n            temp.idx = isEmptyInput(fieldValues.idx)\n        if ('diameter' in fieldValues)\n            temp.diameter = isEmptyInput(fieldValues.diameter)\n        if ('height' in fieldValues)\n            temp.height = isEmptyInput(fieldValues.height)\n        if ('rootsDiameter' in fieldValues)\n            temp.rootsDiameter = isEmptyInput(fieldValues.rootsDiameter)\n        if ('movingPossibility' in fieldValues)\n            temp.movingPossibility = isEmptyInput(fieldValues.movingPossibility)\n        if ('description' in fieldValues)\n            temp.description = isEmptyInput(fieldValues.description)\n        if ('movingReason' in fieldValues)\n            temp.movingReason = isEmptyInput(fieldValues.movingReason)\n        if ('recommendation' in fieldValues)\n            temp.recommendation = isEmptyInput(fieldValues.recommendation)\n\n        setErrors({\n            ...temp\n        })\n\n        if (fieldValues === values)\n            return Object.values(temp).every(x => x === \"\")\n    }\n\n    const isLessThenFiveInput = (field) => {\n        return (field <= 5 && field >= 0) ? \"\" : \"קלט צריך להיות בין 0 ל 5\"\n    }\n    const isEmptyInput = (field) => {\n        const length = (field + '').length\n        return (length > 0) ? \"\" : \"הכנס ערך\"\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate);\n\n    const [isModalShown, HandleiIsModalShown] = useHandleModal({\n        health: '',\n        location: '',\n        canopy: ''\n    })\n\n    useEffect(() => {\n        setTreeTypeOptions(formService.treeTypes)\n        setSurveyId(currentSurvey?.surveyTitle)\n    }, [])\n\n    useEffect(() => {\n        if (Object.keys(surveyId).length === 0) {\n            let storageId = storageService.loadFromStorage('surveyId')\n            if (storageId) {\n                setSurveyId(storageId)\n            }\n        }\n    }, [surveyId])\n\n    const onGetImgUrl = (img) => {\n        setImgUrl(img)\n    }\n\n    const submitForm = (ev) => {\n        ev.preventDefault()\n        if (!imgUrl) alert('יש לבחור תמונה')\n        let treeCopy = { ...values }\n        treeCopy.type = treeType\n        treeCopy.surveyId = surveyId\n        treeCopy.imgUrl = imgUrl\n        if (validate()) {\n            console.log('SUBMIT');\n            treeService.save(treeCopy)\n            querySurveyTrees()\n            resetForm()\n\n        }\n    }\n\n    const onSetTreeType = (treeTypeObj) => {\n        setType(treeTypeObj);\n    }\n\n    const setIsPalmTree = (ev) => {\n        handleInputChange(ev)\n        if (ev.target.checked) {\n            setTreeTypeOptions(formService.palmstreeTypes)\n        }\n        else {\n            setTreeTypeOptions(formService.treeTypes)\n        }\n    }\n\n\n\n\n    return (\n        <div className=\"form-container\">\n            <form dir=\"rtl\" action=\"#\" onSubmit={(ev) => submitForm(ev)}>\n                <div className=\"trees-form flex column\">\n                    <div className=\"type-form \">\n                        <label htmlFor=\"isPalmTree rtl\">\n                            <input type=\"checkbox\" name=\"isPalmTree\" id=\"isPalmTree\" onChange={(ev) => { setIsPalmTree(ev) }} />\n                            עץ דקל\n                        </label>\n                        <FormAutocomplete options={treeTypeOptions} onSetTreeType={onSetTreeType} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>מספר עץ</p>\n                        <Input\n                            error={errors.idx}\n                            name=\"idx\"\n                            value={values.idx}\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>כמות עצים</p>\n                        <Input\n                            error={errors.quantity}\n                            value={values.quantity}\n                            name=\"quantity\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>קוטר הגזע</p>\n                        <Input\n                            error={errors.diameter}\n                            value={values.diameter}\n                            placeholder=\"קוטר בס״מ של הגזע\"\n                            name=\"diameter\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                    </div>\n\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleiIsModalShown('health', !isModalShown.health)} >*מצב בריאותי</p>\n                        <Input\n                            error={errors.health}\n                            value={values.health}\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            placeholder=\"0-5\"\n                            id=\"health\"\n                            name=\"health\"\n                            variant=\"standard\"\n                            onChange={handleInputChange} />\n                        {isModalShown.health &&\n                            <FormModal\n                                HandleiIsModalShown={HandleiIsModalShown}\n                                modal={{\n                                    type: 'health',\n                                    isShowen: isModalShown.health\n                                }}\n                                imgSrc=\"/imgs/modal/healthModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>גובה העץ</p>\n                        <Input\n                            error={errors.height}\n                            name=\"height\"\n                            variant=\"standard\"\n                            placeholder=\"גובה העץ במטרים\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleiIsModalShown('location', !isModalShown.location)} > *מיקום העץ</p>\n\n                        <Input\n                            error={errors.location}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"location\"\n                            name=\"location\"\n                            onChange={handleInputChange} />\n\n                        {isModalShown.location &&\n                            <FormModal\n                                HandleiIsModalShown={HandleiIsModalShown}\n                                modal={{\n                                    type: 'location',\n                                    isShowen: isModalShown.location\n                                }}\n                                imgSrc=\"/imgs/modal/locationModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p onClick={() => HandleiIsModalShown('canopy', !isModalShown.canopy)} >*ניקוד חופת העץ</p>\n                        <Input\n                            error={errors.canopy}\n                            placeholder=\"0-5\"\n                            InputProps={{\n                                inputProps: {\n                                    max: 5,\n                                    min: 0\n                                }\n                            }}\n                            id=\"canopy\"\n                            name=\"canopy\"\n                            onChange={handleInputChange} />\n                        {isModalShown.canopy &&\n                            <FormModal\n                                HandleiIsModalShown={HandleiIsModalShown}\n                                modal={{\n                                    type: 'canopy',\n                                    isShowen: isModalShown.canopy\n                                }}\n                                imgSrc=\"/imgs/modal/canopyModal.png\" />}\n                    </div>\n                    <div className=\"input-container\">\n                        <p>אזור שורשים מוגן</p>\n                        <Input\n                            error={errors.rootsDiameter}\n                            placeholder=\"אזור שורשים מוגן במטרים\"\n                            id=\"rootsDiameter\"\n                            name=\"rootsDiameter\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>היתכנות העתקה</p>\n                        <FormControl>\n                            <Select\n                                // error={errors.movingPossibility}\n                                type=\"text\"\n                                id=\"movingPossibility\"\n                                name=\"movingPossibility\"\n                                value={values.movingPossibility}\n                                onChange={handleInputChange}>\n                                {formService.movingPossibility.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>המלצה</p>\n                        <FormControl >\n                            <Select\n                                // error={errors.recommendation}\n                                type=\"text\"\n                                id=\"recommendation\"\n                                name=\"recommendation\"\n                                value={values.recommendation}\n                                onChange={handleInputChange}>\n                                {formService.recomandationOptions.map((option) => (\n                                    <MenuItem\n                                        key={option.label}\n                                        value={option.label}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    <div className=\"input-container\">\n                        <p>סיבת כריתה או\n                            העתקת\n                            העץ</p>\n                        <Input\n                            error={errors.movingReason}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"movingReason\"\n                            name=\"movingReason\"\n                            onChange={handleInputChange} />\n                    </div>\n                    <div className=\"input-container\">\n                        <p>הערות</p>\n                        <Input\n                            error={errors.description}\n                            multiline\n                            rows={2}\n                            type=\"text\"\n                            id=\"description\"\n                            name=\"description\"\n                            onChange={handleInputChange} />\n                    </div>\n                </div>\n                <CloudinaryUpload onGetImgUrl={onGetImgUrl} />\n                <Button onClick={(ev) => submitForm(ev)} color=\"primary\" variant=\"outlined\">הוסף עץ </Button>\n            </form>\n        </div>\n    )\n}\n","\r\n// Dispatchers\r\nconst _setFilter = (filterBy) => ({ type: 'SET_FILTER', filterBy });\r\nconst _toggleDark = () => ({ type: 'TOGGLE_DARK' });\r\nconst _toggleIsTreePreviewShowen = () => ({ type: 'TOGGLE_IS_PREVIEW_TREE' });\r\nconst _setCurrentSurvey = (survey) => ({ type: 'SET_CURRENT_SURVEY', survey });\r\n\r\n// THUNK\r\n\r\nexport function setFilter(filterBy) {\r\n    return async (dispatch) => dispatch(_setFilter(filterBy))\r\n}\r\nexport function setCurrentSurvey(survey) {\r\n    return async (dispatch) => dispatch(_setCurrentSurvey(survey))\r\n}\r\nexport function toggleDark() {\r\n    return (dispatch) => dispatch(_toggleDark())\r\n}\r\nexport function toggleIsTreePreviewShowen() {\r\n    return (dispatch) => dispatch(_toggleIsTreePreviewShowen())\r\n}\r\n\r\n// export function saveCar(car) {\r\n//     return async (dispatch, getState) => {\r\n//         const type = car._id ? 'UPDATE_CAR' : 'ADD_CAR';\r\n//         const savedCar = await carService.save(car)\r\n//         dispatch({ type, car: savedCar })\r\n//     }\r\n// }\r\n","import { Link, useHistory } from 'react-router-dom'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { treeService } from '../services/treeService';\nimport { MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSurvey } from '../actions/TreeActions';\nimport { storageService } from '../services/storageService';\n\n\n\nexport const ChooseSurvey = () => {\n\n    let dispatch = useDispatch()\n    const history = useHistory();\n    // let [trees, setTrees] = useState([])\n    let [surveyIdList, setSurveyIdList] = useState([''])\n    let [currentSurveyId, setCurrentSurveyId] = useState('kfar saba')\n    const handleOnClickNext = useCallback(() => history.push('/survey_editor'), [history]);\n    const handleOnClickBack = useCallback(() => history.push('/'), [history]);\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n \n\n    useEffect(() => {\n        async function queryTrees() {\n            setSurveyIdList(await treeService.querySurveyIdList())\n            // setTrees(await treeService.query(currentSurveyId))\n        }\n        queryTrees()\n    }, [])\n\n    useEffect(() => {\n\n        let filterdList = surveyIdList.filter(tree => { return tree.surveyTitle === currentSurveyId })\n        storageService.saveToStorage('surveyId',filterdList[0])\n        dispatch(setCurrentSurvey(filterdList[0]))\n    }, [currentSurveyId])\n\n\n\n\n    return (\n        <section className=\"choose-section flex\">\n            <h1>בחר סקר</h1>\n            <FormControl>\n                <InputLabel required id=\"movingPossibility\">בחר</InputLabel>\n                <Select\n                    required\n                    type=\"text\"\n                    id=\"currentTableId\"\n                    name=\"currentTableId\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                    value={currentSurveyId}\n                    // defaultValue=\"בחר סקר\"\n                    label=\"לחץ כאן\"\n                    placeholder=\"לחץ כאן\"\n                    onChange={(ev) => { setCurrentSurveyId(ev.target.value) }} >\n                    {\n                        surveyIdList.map((id) => (\n                            <MenuItem\n                                \n                                key={id.surveyTitle}\n                                value={id.surveyTitle}>\n                                {id.surveyTitle}\n                            </MenuItem>\n                        ))\n                    }\n                </Select>\n            </FormControl>\n            <div className=\"next-btn button\"\n                onClick={() => { handleOnClickNext() }} >\n                <p>המשך</p>\n            </div>\n            <div className=\"back-btn button\"\n                onClick={() => { handleOnClickBack() }} >\n                <p>חזור</p>\n            </div>\n        </section>\n    )\n}","import React, { useCallback } from 'react'\nimport { useFormCreateSurvey } from '../services/customHooks'\nimport { Link,useHistory } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentSurvey } from '../actions/TreeActions'\nimport { storageService } from '../services/storageService';\n\n\nexport const CreateSurvey = () => {\n\n    \n    const history = useHistory();\n    const handleOnClick = useCallback(() => history.push('/survey_editor'), [history]);\n    const dispatch = useDispatch()\n    const { currentSurvey } = useSelector(state => state.TreeModule)\n\n    const [survey, handleChange] = useFormCreateSurvey({\n        surveyTitle: '',\n        surveyDate: '',\n        surveySummary: ''\n    })\n\n    const addNewSurvey = async () => {\n        await dispatch(setCurrentSurvey(survey))\n        storageService.saveToStorage('surveyId', survey)\n\n        handleOnClick()\n    }\n\n    return (\n        <section className=\"new-survey rtl\">\n            <form action=\"\">\n                <label htmlFor=\"surveyTitle\" onSubmit={(ev) => { ev.preventDefault() }}>\n                    כותרת סקר:\n                    <input\n                        id=\"surveyTitle\"\n                        name=\"surveyTitle\"\n                        type=\"text\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyTitle} />\n                </label>\n                <label htmlFor=\"surveyTitle\">\n                    תאריך סקר:\n                    <input\n                        id=\"surveyDate\"\n                        name=\"surveyDate\"\n                        type=\"date\"\n                        onChange={(ev) => { handleChange(ev) }}\n                        value={survey.surveyDate} />\n                </label>\n                <div className=\"add-btn button\" onClick={() => { addNewSurvey() }}>הוסף סקר</div>\n\n                <Link to=\"/choose_survey\" >\n                    <div className=\"existing-survey\">חזרה</div>\n                </Link>\n\n            </form>\n        </section>\n\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions'\nimport { treeService } from '../services/treeService'\n\nexport const TreePreview = ({ tree }) => {\n\n    const dispatch = useDispatch()\n    // const { currentSurvey,isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const [isRemove, setIsRemove] = useState(false)\n\n\n    useEffect(() => {\n    })\n\n    const onRemoveTree = () => {\n        treeService.removeTree(tree._id)\n    }\n\n    return (\n        <section className=\"main-container tree-preview\">\n            <div className=\"preview-info\">\n                <p>מספר עץ: {tree.idx}</p>\n                <p> סוג עץ: {tree.type.typeValue}</p>\n                <p>קוטר גזע: {tree.diameter}</p>\n                <p>מצב בריאותי: {tree.health}</p>\n                <p>גובה העץ: {tree.height}</p>\n                <p>מיקום העץ: {tree.location}</p>\n                <p>ניקוד חופת העץ: {tree.canopy}</p>\n                <p>היתכנות העתקה: {tree.movingPossibility}</p>\n                <p>המלצה: {tree.recommendation}</p>\n            </div>\n            <img src={tree.imgUrl} alt=\"tree image\" />\n            <div\n                className=\"remove-btn\"\n                onClick={() => { setIsRemove(true) }}>\n                <span>הסר עץ</span>\n            </div>\n            {isRemove && <div className=\"remove-modal\">\n                <p>האם למחוק ?</p>\n                <p onClick={() => { onRemoveTree() }}>מחק</p>\n                <p onClick={() => { setIsRemove(false) }}>חזור</p>\n            </div>}\n            <div\n                className=\"close-preview\"\n                onClick={(ev) => {\n                    ev.preventDefault()\n                    dispatch(toggleIsTreePreviewShowen())\n                }}\n            ><span>X</span></div>\n        </section>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TreesForm } from '../cmps/TreesForm'\nimport { treeService } from '../services/treeService'\nimport { storageService } from '../services/storageService';\nimport { TreePreview } from '../cmps/TreePreview';\nimport { toggleIsTreePreviewShowen } from '../actions/TreeActions';\n\nexport const SurveyEditor = () => {\n\n    const dispatch = useDispatch()\n    const { currentSurvey, isTreePreviewShowen } = useSelector(state => state.TreeModule)\n    const [isAddingTree, setIsAddingTree] = useState(true)\n    // const [isAddingTree, setIsAddingTree] = useState(false)\n    const [currentSurveyTrees, setCurrentSurveyTrees] = useState([])\n    const [currentPreviewTree, setCurrentPreviewTree] = useState(false)\n    const [localCurrentSurvey, setLocalCurrentSurvey] = useState('')\n\n    useEffect(() => {\n        querySurveyTrees()\n    }, [])\n\n    useEffect(() => {\n        console.log('currentSurveyTrees', currentSurveyTrees);\n    }, [currentSurveyTrees])\n\n    const querySurveyTrees = async () => {\n\n        let trees = await treeService.querySurveyTrees(currentSurvey.surveyTitle)\n        setCurrentSurveyTrees(trees)\n        if (Object.keys(currentSurvey).length === 0) {\n            const storageTreeId = storageService.loadFromStorage('surveyId')\n            if (storageTreeId) {\n                let trees = await treeService.querySurveyTrees(storageTreeId.surveyTitle)\n                setLocalCurrentSurvey(storageTreeId)\n                setCurrentSurveyTrees(trees)\n            }\n        }\n    }\n\n\n\n    return (\n        <section className=\"main-container rtl\">\n            {/* <h1><span>{currentSurvey.surveyTitle}</span> טופס סקר עצים </h1> */}\n            <h1>טופס סקר עצים <span>{localCurrentSurvey.surveyTitle}</span>  </h1>\n            <div className=\"add-tree\">\n                {<p onClick={(ev) => {\n                    ev.preventDefault()\n                    setIsAddingTree(true)\n                }}>הוסף עץ</p> && !isAddingTree}\n                {isAddingTree && <TreesForm querySurveyTrees={querySurveyTrees} />}\n            </div>\n            <div className=\"other-trees\">\n                <h3>עצים נוספים</h3>\n                {currentSurveyTrees && <div className=\"current-trees flex\">\n                    {currentSurveyTrees.map((tree) => {\n                        return <div\n                            key={tree._id}\n                            className=\"tree-index\"\n                            onClick={() => {\n                                setCurrentPreviewTree(tree)\n                                dispatch(toggleIsTreePreviewShowen())\n                            }} >\n                            <p>{tree.idx}</p>\n                            <img src=\"imgs/treeLogo.png\" alt=\"index\" />\n                        </div>\n                    })}\n                    {isTreePreviewShowen && <TreePreview tree={currentPreviewTree} />}\n                </div>}\n            </div>\n        </section>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\n    return (\n        <section className=\"home-container flex \">\n        <Link to=\"/create_survey\" >\n            <div className=\"new-survey\">סקר חדש</div>\n        </Link>\n\n        <Link to=\"/choose_survey\" >\n        <div className=\"existing-survey\">בחר סקר</div>\n        </Link>\n    </section>\n\n    )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {AppHeader } from './cmps/AppHeader'\nimport './assets/main.css'\nimport './assets/style/main.scss'\nimport { About } from './pages/About';\nimport { TreesSurvey } from './pages/TreesSurvey';\nimport { TreesForm } from './cmps/TreesForm';\nimport { ChooseSurvey } from './pages/ChooseSurvey';\nimport { CreateSurvey } from './pages/CreateSurvey';\nimport { SurveyEditor } from './pages/SurveyEditor';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"content-wrapper\">\n      <AppHeader/>\n      <Switch>\n        <Route path=\"/about\" component={ About } />\n        <Route path=\"/trees\" component={ TreesSurvey } />\n        {/* <Route path=\"/form\" component={ TreesForm } /> */}\n        <Route path=\"/survey_editor\" component={ SurveyEditor } />\n        <Route path=\"/choose_survey\" component={ ChooseSurvey } />\n        <Route path=\"/create_survey\" component={ CreateSurvey } />\n        <Route path=\"/\" component={ Home } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport TreeReducer from './reducers/TreeReducer';\r\nimport App from './App';\r\n\r\nconst rootReducer = combineReducers({\r\n    TreeModule: TreeReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}